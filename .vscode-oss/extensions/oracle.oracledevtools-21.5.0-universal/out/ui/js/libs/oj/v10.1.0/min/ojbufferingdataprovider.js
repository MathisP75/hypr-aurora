/**
 * @license
 * Copyright (c) 2014, 2021, Oracle and/or its affiliates.
 * Licensed under The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
define(["ojs/ojcore-base","ojs/ojdataprovider","ojs/ojeventtarget","ojs/ojmap","ojs/ojset","ojs/ojcomponentcore"],function(t,e,a,s,i,r){"use strict";t=t&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t,s=s&&Object.prototype.hasOwnProperty.call(s,"default")?s.default:s,i=i&&Object.prototype.hasOwnProperty.call(i,"default")?i.default:i;
/**
     * @license
     * Copyright (c) 2014, 2021, Oracle and/or its affiliates.
     * The Universal Permissive License (UPL), Version 1.0
     * as shown at https://oss.oracle.com/licenses/upl/
     * @ignore
     */
/**
     * @preserve Copyright 2013 jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
/**
     * @license
     * Copyright (c) 2014, 2021, Oracle and/or its affiliates.
     * The Universal Permissive License (UPL), Version 1.0
     * as shown at https://oss.oracle.com/licenses/upl/
     * @ignore
     */
/**
     * @preserve Copyright 2013 jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
class d{constructor(){this.unsubmittedItems=new s,this.submittingItems=new s}addItem(e){let a=this.unsubmittedItems.get(e.metadata.key),s=this.submittingItems.get(e.metadata.key);if(a&&("add"===a.operation||"update"===a.operation)||s&&("add"===s.operation||"update"===s.operation))throw new Error("Cannot add item with same key as an item being added or updated");a&&"remove"===a.operation?a.item.data&&t.Object.compareValues(a.item.data,e.data)?this.unsubmittedItems.delete(e.metadata.key):this.unsubmittedItems.set(e.metadata.key,{operation:"update",item:e}):this.unsubmittedItems.set(e.metadata.key,{operation:"add",item:e})}removeItem(t){let e=this.unsubmittedItems.get(t.metadata.key),a=this.submittingItems.get(t.metadata.key);if(e&&"remove"===e.operation||a&&"remove"===a.operation)throw new Error("Cannot remove item with same key as an item being removed");e&&"add"===e.operation?this.unsubmittedItems.delete(t.metadata.key):(e&&e.operation,this.unsubmittedItems.set(t.metadata.key,{operation:"remove",item:t}))}updateItem(t){let e=this.unsubmittedItems.get(t.metadata.key),a=this.submittingItems.get(t.metadata.key);if(e&&"remove"===e.operation||a&&"remove"===a.operation)throw new Error("Cannot update item with same key as an item being removed");!e||"add"!==e.operation&&"update"!==e.operation?this.unsubmittedItems.set(t.metadata.key,{operation:"update",item:t}):this.unsubmittedItems.set(t.metadata.key,{operation:e.operation,item:t})}setItemStatus(t,e,a){const s=t.item.metadata.key;if("submitting"===e)this.unsubmittedItems.delete(s),this.submittingItems.set(s,t);else if("submitted"===e)this.submittingItems.delete(s);else if("unsubmitted"===e){let e;this.submittingItems.delete(s),e=a?{operation:t.operation,item:{data:t.item.data,metadata:{key:t.item.metadata.key,message:a}}}:t,this.unsubmittedItems.set(s,e)}}getUnsubmittedItems(){return this.unsubmittedItems}getSubmittingItems(){return this.submittingItems}isEmpty(){return 0===this.unsubmittedItems.size&&0===this.submittingItems.size}getItem(t){let e=this.unsubmittedItems.get(t);return e||(e=this.submittingItems.get(t)),e}}class n extends t.GenericEvent{constructor(t){let e={};e.detail=t,super("submittableChange",e)}}class o{constructor(t,e){this.dataProvider=t,this.options=e,this.AsyncIterable=class{constructor(t,e){this._parent=t,this._asyncIterator=e,this[Symbol.asyncIterator]=function(){return this._asyncIterator}}},this.AsyncIterator=class{constructor(t,e,a){this._parent=t,this._baseIterator=e,this._params=a,this.firstBaseKey=null,this.mergedAddKeySet=new i,this.mergedItemArray=[],this.nextOffset=0,null==this._params&&(this._params={})}_fetchNext(){return this._baseIterator.next().then(t=>{!this.firstBaseKey&&t.value.metadata.length&&(this.firstBaseKey=t.value.metadata[0].key),t.value.fetchParameters&&t.value.fetchParameters.sortCriteria&&(this._parent.lastSortCriteria=t.value.fetchParameters.sortCriteria);let e=t.value.data.map((e,a)=>({data:t.value.data[a],metadata:t.value.metadata[a]}));this._parent._mergeEdits(e,this.mergedItemArray,this._params.filterCriterion,this._parent.lastSortCriteria,!0,this.mergedAddKeySet,t.done);let a=this.mergedItemArray.length-this.nextOffset;for(let t=this.nextOffset;t<this.mergedItemArray.length;t++){const e=this.mergedItemArray[t];this._parent._isItemRemoved(e.metadata.key)&&--a}const s=this._params||{};if((s.size&&a<s.size||null==s.size&&0===a)&&!t.done)return this._fetchNext();let i,r=[],d=[];for(i=this.nextOffset;i<this.mergedItemArray.length;i++){++this.nextOffset;const t=this.mergedItemArray[i];if(!this._parent._isItemRemoved(t.metadata.key)&&(r.push(t.data),d.push(t.metadata),s.size&&r.length===s.size))break}return{done:t.done&&0===r.length,value:{fetchParameters:this._params,data:r,metadata:d}}})}next(){return this._fetchNext()}},this._addEventListeners(t),this.editBuffer=new d,this.lastSortCriteria=null,this.lastIterator=null}_fetchByKeysFromBuffer(t){let e=new s,a=new i;return t.keys.forEach(t=>{const s=this.editBuffer.getItem(t);if(s)switch(s.operation){case"add":case"update":e.set(t,s.item)}else a.add(t)}),{results:e,unresolvedKeys:a}}_compareItem(t,e,a){for(let s=0;s<a.length;s++){if(t[a[s].attribute]>e[a[s].attribute])return"ascending"===a[s].direction?1:-1;if(t[a[s].attribute]<e[a[s].attribute])return"ascending"===a[s].direction?-1:1}return 0}_insertAddEdits(t,e,a,s,i,r){t.forEach((t,d)=>{if("add"===t.operation&&!i.has(d)&&(!e||e.filter(t.item.data)))if(a&&a.length){let e=!1;for(let r=0;r<s.length;r++)if(this._compareItem(t.item.data,s[r].data,a)<0){s.splice(r,0,t.item),i.add(d),e=!0;break}!e&&r&&(s.push(t.item),i.add(d))}else s.push(t.item),i.add(d)})}_mergeAddEdits(t,e,a,s,i){this._insertAddEdits(this.editBuffer.getUnsubmittedItems(),t,e,a,s,i),this._insertAddEdits(this.editBuffer.getSubmittingItems(),t,e,a,s,i)}_mergeEdits(t,a,s,i,r,d,n){let o;s&&(o=s.filter?s:e.FilterFactory.getFilter({filterDef:s,filterOptions:this.options})),!r||i&&i.length||this._mergeAddEdits(o,i,a,d,n);for(let e=0;e<t.length;e++){let s=t[e],i=this.editBuffer.getItem(s.metadata.key);i?"remove"===i.operation?a.push(s):"update"===i.operation&&(o&&!o.filter(i.item.data)||a.push(i.item)):a.push(s)}i&&i.length&&this._mergeAddEdits(o,i,a,d,n)}_fetchFromOffset(t,e){return this.dataProvider.fetchByOffset(t).then(a=>{if(!this.editBuffer.isEmpty()){const s=a.results;let r=null;r=a.fetchParameters&&a.fetchParameters.sortCriteria?a.fetchParameters.sortCriteria:t.sortCriteria,this._mergeEdits(s,e,t.filterCriterion,r,0===t.offset,new i,a.done);let d=e.length;for(let t=0;t<e.length;t++)this._isItemRemoved(e[t].metadata.key)&&--d;if((t.size&&d<t.size||null==t.size&&0===d)&&!a.done){const s={attributes:t.attributes,clientId:t.clientId,filterCriterion:t.filterCriterion,offset:t.offset+a.results.length,size:t.size,sortCriteria:t.sortCriteria};return this._fetchFromOffset(s,e)}for(let t=0;t<e.length;t++)this._isItemRemoved(e[t].metadata.key)&&(e.splice(t,1),--t);return t.size&&e.length>t.size&&e.splice(t.size),{fetchParameters:t,results:e,done:a.done}}return a})}containsKeys(t){let e=this._fetchByKeysFromBuffer(t),a=e.unresolvedKeys,s=new i;return e.results.forEach((t,e)=>{s.add(e)}),0===a.size?Promise.resolve({containsParameters:t,results:s}):this.dataProvider.containsKeys({attributes:t.attributes,keys:a,scope:t.scope}).then(e=>s.size>0?(e.results.forEach((t,e)=>{s.add(e)}),{containsParameters:t,results:s}):e)}fetchByKeys(t){let e=this._fetchByKeysFromBuffer(t),a=e.unresolvedKeys,s=e.results;return 0===a.size?Promise.resolve({fetchParameters:t,results:s}):this.dataProvider.fetchByKeys({attributes:t.attributes,keys:a,scope:t.scope}).then(e=>s.size>0?(e.results.forEach((t,e)=>{s.set(e,t)}),{fetchParameters:t,results:s}):e)}fetchByOffset(t){return this._fetchFromOffset(t,[])}fetchFirst(t){this.lastSortCriteria=t?t.sortCriteria:null;const e=this.dataProvider.fetchFirst(t)[Symbol.asyncIterator]();return this.lastIterator=new this.AsyncIterator(this,e,t),new this.AsyncIterable(this,this.lastIterator)}getCapability(t){return this.dataProvider.getCapability(t)}_calculateSizeChange(t){let e=0;return t.forEach((t,a)=>{"add"===t.operation?++e:"remove"===t.operation&&--e}),e}getTotalSize(){return this.dataProvider.getTotalSize().then(t=>(t>-1&&(t+=this._calculateSizeChange(this.editBuffer.getSubmittingItems()),t+=this._calculateSizeChange(this.editBuffer.getUnsubmittedItems())),t))}isEmpty(){const t=this.editBuffer.getUnsubmittedItems(),e=this.editBuffer.getSubmittingItems();t.forEach((t,e)=>{if("add"===t.operation||"update"===t.operation)return"no"}),e.forEach((t,e)=>{if("add"===t.operation||"update"===t.operation)return"no"});let a=this.dataProvider.isEmpty();return"no"===a&&(t.size>0||e.size>0)?"unknown":a}_isItemRemoved(t){const e=this.editBuffer.getItem(t);return null!=e&&"remove"===e.operation}_addToMergedArrays(t){let e=null;if(this.lastIterator){const a=this.lastSortCriteria;if(a&&a.length){const s=this.lastIterator.mergedItemArray;for(let i=0;i<s.length;i++)if(this._compareItem(t.data,s[i].data,a)<0&&!this._isItemRemoved(s[i].metadata.key)){e=s[i].metadata.key,s.splice(i,0,t),i<this.lastIterator.nextOffset&&++this.lastIterator.nextOffset;break}}else e=this.lastIterator.firstBaseKey}return e}addItem(t){this.editBuffer.addItem(t);let a=this._addToMergedArrays(t);const s={add:{data:[t.data],keys:(new i).add(t.metadata.key),metadata:[t.metadata],addBeforeKeys:[a]}},r=new e.DataProviderMutationEvent(s);this.dispatchEvent(r),this._dispatchSubmittableChangeEvent()}_removeFromMergedArrays(e,a){if(this.lastIterator){const s=this.lastIterator.mergedItemArray,i=this.lastIterator.mergedAddKeySet,r=this._findKeyInItems(e,s);if(-1!==r&&(a||i.has(e)?(s.splice(r,1),i.delete(e),r<this.lastIterator.nextOffset&&--this.lastIterator.nextOffset):r===this.lastIterator.nextOffset-1&&--this.lastIterator.nextOffset,t.KeyUtils.equals(this.lastIterator.firstBaseKey,e)&&(this.lastIterator.firstBaseKey=null,s.length>r)))for(let t=r;t<s.length;t++){let e=s[t].metadata.key;if(!this._isItemRemoved(e)){this.lastIterator.firstBaseKey=e;break}}}}removeItem(t){this.editBuffer.removeItem(t),this._removeFromMergedArrays(t.metadata.key,!1);const a={remove:{data:t.data?[t.data]:null,keys:(new i).add(t.metadata.key),metadata:[t.metadata]}},s=new e.DataProviderMutationEvent(a);this.dispatchEvent(s),this._dispatchSubmittableChangeEvent()}updateItem(t){this.editBuffer.updateItem(t);const a={update:{data:[t.data],keys:(new i).add(t.metadata.key),metadata:[t.metadata]}},s=new e.DataProviderMutationEvent(a);this.dispatchEvent(s),this._dispatchSubmittableChangeEvent()}getSubmittableItems(){const t=this.editBuffer.getUnsubmittedItems(),e=this.editBuffer.getSubmittingItems();let a=[];return t.forEach((t,s)=>{e.has(s)||a.push(t)}),a}resetAllUnsubmittedItems(){this.editBuffer.getUnsubmittedItems().clear(),this._dispatchSubmittableChangeEvent(),this.dispatchEvent(new e.DataProviderRefreshEvent)}_addEventDetail(t,e,a,s){null==t[e]&&(t[e]="add"===e?{data:[],keys:new i,metadata:[],addBeforeKeys:[]}:{data:[],keys:new i,metadata:[]}),t[e].keys.add(a.metadata.key),t[e].data.push(a.data),t[e].metadata.push(a.metadata),"add"===e&&t[e].addBeforeKeys.push(s)}resetUnsubmittedItem(t){const a=this.editBuffer.getUnsubmittedItems();let r=new i,d=new s;const n=a.get(t);n&&(r.add(t),d.set(t,n),a.delete(t)),this._dispatchSubmittableChangeEvent(),this.dataProvider.fetchByKeys({keys:r}).then(t=>{let a,s={};d.forEach((e,i)=>{if("add"===e.operation)this._removeFromMergedArrays(e.item.metadata.key,!1),this._addEventDetail(s,"remove",e.item);else if("remove"===e.operation){if(a=t.results.get(i),a){let t=null;if(this.lastIterator){let e=this.lastIterator.mergedItemArray;const a=this._findKeyInItems(i,e);if(-1!==a)for(let s=a+1;s<e.length;s++)if(!this._isItemRemoved(e[s].metadata.key)){t=e[s].metadata.key;break}}this._addEventDetail(s,"add",a,t)}}else a=t.results.get(i),a?this._addEventDetail(s,"update",a):this._addEventDetail(s,"remove",e.item)}),this.dispatchEvent(new e.DataProviderMutationEvent(s))})}setItemStatus(t,e,a){t&&(this.editBuffer.setItemStatus(t,e,a),this._dispatchSubmittableChangeEvent())}_dispatchSubmittableChangeEvent(){const t=this.getSubmittableItems(),e=new n(t);this.dispatchEvent(e)}_findKeyInMetadata(e,a){if(a)for(let s=0;s<a.length;s++)if(t.KeyUtils.equals(e,a[s].key))return s;return-1}_findKeyInItems(e,a){if(a)for(let s=0;s<a.length;s++)if(t.KeyUtils.equals(e,a[s].metadata.key))return s;return-1}_initDetailProp(t,e,a,s){t[a]&&(e[a]=s)}_pushDetailProp(t,e,a,s){t[a]&&e[a].push(t[a][s])}_getOperationDetail(t,e){if(t){let a={};const s=this.editBuffer.getSubmittingItems(),r=this.editBuffer.getUnsubmittedItems();if(0!==s.size||0!==r.size)return a.keys=new i,this._initDetailProp(t,a,"data",[]),this._initDetailProp(t,a,"metadata",[]),this._initDetailProp(t,a,"addBeforeKeys",[]),this._initDetailProp(t,a,"parentKeys",[]),t.keys.forEach(i=>{let d=null!=s.get(i);if(!d){const t=r.get(i);d=t&&"remove"===t.operation}if(!d&&(a.keys.add(i),t.metadata)){let e=this._findKeyInMetadata(i,t.metadata);e>-1&&(this._pushDetailProp(t,a,"data",e),this._pushDetailProp(t,a,"metadata",e),this._pushDetailProp(t,a,"addBeforeKeys",e),this._pushDetailProp(t,a,"parentKeys",e))}if(e){const t=r.get(i);!t||"remove"!==t.operation&&"update"!==t.operation||r.delete(i)}}),a;this._initDetailProp(t,a,"data",t.data),this._initDetailProp(t,a,"metadata",t.metadata),this._initDetailProp(t,a,"addBeforeKeys",t.addBeforeKeys),this._initDetailProp(t,a,"parentKeys",t.parentKeys)}return t}_handleRefreshEvent(t){let e=this.editBuffer.getUnsubmittedItems(),a=new i;e.forEach(t=>{"remove"!==t.operation&&"update"!==t.operation||a.add(t.item.metadata.key)}),a.size>0?this.dataProvider.fetchByKeys({keys:a}).then(s=>{s.results.forEach((t,e)=>{a.delete(e)}),a.forEach(t=>{e.delete(t)}),this.dispatchEvent(t)}):this.dispatchEvent(t)}_handleMutateEvent(t){t.detail.remove&&t.detail.remove.keys.forEach(t=>{this._removeFromMergedArrays(t,!0)});const a=t.detail.add;a&&a.metadata&&a.data&&a.metadata.forEach((t,e)=>{this._addToMergedArrays({metadata:a.metadata[e],data:a.data[e]})});let s={add:this._getOperationDetail(t.detail.add,!1),remove:this._getOperationDetail(t.detail.remove,!0),update:this._getOperationDetail(t.detail.update,!1)};this.dispatchEvent(new e.DataProviderMutationEvent(s))}_addEventListeners(t){t[o._ADDEVENTLISTENER](o._REFRESH,this._handleRefreshEvent.bind(this)),t[o._ADDEVENTLISTENER](o._MUTATE,this._handleMutateEvent.bind(this))}}return o._REFRESH="refresh",o._MUTATE="mutate",o._ADDEVENTLISTENER="addEventListener",a.EventTargetMixin.applyMixin(o),t._registerLegacyNamespaceProp("BufferingDataProvider",o),o});
//# sourceMappingURL=ojbufferingdataprovider.js.map