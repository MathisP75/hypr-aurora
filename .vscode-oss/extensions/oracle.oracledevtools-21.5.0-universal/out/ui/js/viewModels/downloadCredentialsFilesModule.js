define(["require","exports","knockout","../common/scriptExecutionModels","../common/dataAccessService","../common/localizedConstants","../common/autonomousDBModels","../utilities","ojs/ojcore","ojs/ojcheckboxset","jquery","ojs/ojtreeview","ojs/ojarraytreedataprovider","ojs/ojbutton","ojs/ojknockout","ojs/ojinputtext","ojs/ojlabel","ojs/ojprogress","ojs/ojformlayout","ojs/ojselectcombobox","ojs/ojmessage","ojs/ojmessages","ojs/ojnavigationlist","ojs/ojcollapsible","ojs/ojlabelvalue","ojs/ojdialog","ojs/ojprogress-circle"],(function(require,e,a,t,s,i,n,o){"use strict";let l;class c{constructor(){this.pswdPattern=i.LocalizedConstants.Instance.pswdPatternForDownloadWalletFile,this.pswdMismatch=i.LocalizedConstants.Instance.pswdMismatch,this.walletFileLocation=i.LocalizedConstants.Instance.connUIPlaceHolderWalletFileLocation,this.browse=i.LocalizedConstants.Instance.connUITextBrowse,this.ociReplaceExistingFiles=i.LocalizedConstants.Instance.ociReplaceExistingFiles,this.ociSkipExistingFiles=i.LocalizedConstants.Instance.ociSkipExistingFiles,this.ociCancel=i.LocalizedConstants.Instance.cancelQueryText,this.ociCopyCredentialsFileHeading=i.LocalizedConstants.Instance.ociCopyCredentialsFileHeading,this.ociFileAlreadtExists=i.LocalizedConstants.Instance.ociFileAlreadyExists,this.ociFilePath=i.LocalizedConstants.Instance.ociFilePath,this.ociOK=i.LocalizedConstants.Instance.OK,this.downloadWalletFileCheckboxLabel=i.LocalizedConstants.Instance.downloadWalletFileCheckboxLabel,this.downlaodCredentialFile=i.LocalizedConstants.Instance.downloadCredentialFile,this.downlaodCredentialFileForConnection=i.LocalizedConstants.Instance.downloadCredentialFileForConnection,this.downlaodCredentialFileDescription=i.LocalizedConstants.Instance.downloadCredentialFileDescription,this.useDefaultDBFileName=i.LocalizedConstants.Instance.appendDatabaseName,this.downLoad=i.LocalizedConstants.Instance.download,this.walletType=i.LocalizedConstants.Instance.walletType,this.password=i.LocalizedConstants.Instance.pswdStr,this.requiredText="*",this.confirmpassword=i.LocalizedConstants.Instance.confirmPswd,this.specifyPassword=i.LocalizedConstants.Instance.specifyPassword}}return class{constructor(e){this.downloadWalletFileInProgress=a.observable(!1),this.downloadWalletFileButtonText=a.observable(),this.adbDownloadCredentialsFilesUILabels=new c,this.newConnectionUIToDisplay=a.observable(n.NewConnectionUIToDisplay.DownloadWalletfileWhileMakingConnection),this.walletFileLocation=a.observable(""),this.downloadWalletFileOptions=a.observableArray(),this.clickedCancelButtonOnCopyReplaceDialog=!1,this.existingFiles=a.observableArray(),this.useDefaultDBFileNameOptions=a.observableArray(),this.specifyPasswordtoDownloadWalletFiles=a.observableArray(),this.pswdMismatchError=a.observable(""),this.downloadFileUIWhileMakingConnection=a.observable(!1),this.walletTypes=a.observableArray([{value:n.WalletType.Instance,label:i.LocalizedConstants.Instance.instanceWallet},{value:n.WalletType.Regional,label:i.LocalizedConstants.Instance.regionalWallet}]),this.walletType=a.observable(n.WalletType.Instance),this.messageHandlersField=new Map,this.isDedicatedDB=a.observable(!1),this.disablebrowseNOkButton=a.computed(()=>this.downloadWalletFileInProgress(),this),this.showDownlaodCredentialFileDescription=a.observable(!0),this.disableDownloadButton=a.computed(()=>this.downloadWalletFileInProgress()||this.controlsHaveInValidValues()||!this.enableCreatebutton(),this),this.onRawValueChanged=e=>{try{this.walletFileLocation(e.detail.value),this.updateWalletFilePathHandler&&this.updateWalletFilePathHandler(e.detail.value)}catch(e){}},this.handleTransitionCompleted=()=>{this.downloadFileUIWhileMakingConnection(this.newConnectionUIToDisplay()==n.NewConnectionUIToDisplay.DownloadWalletfileWhileMakingConnection)},this.tlsEnbledNMutualAuthentication=!1,this.downloadWalletWhileMakingConnectionForDedicatedDB=!1,this.themeFileId="ThemeCss",this.themeColorFileId="ThemeColor",this.customThemeTag="customTheme",this.downLoadCaption=a.observable(),this.onBrowseOCIWalletFileLocation=(e,a,i)=>{const n=new t.MessageBase;n.type=t.MessageName.browseRequest;const o=new t.BrowseRequest;o.executionId=s.DataAccessService.instance.currentExecutionId,o.ownerUri=s.DataAccessService.instance.URI,o.windowUri=s.DataAccessService.instance.windowUri,o.path=this.walletFileLocation(),n.data=o;try{s.DataAccessService.instance.send(n),s.DataAccessService.instance.logInfo("Successfully placed BrowseRequest")}catch(e){s.DataAccessService.instance.logError(e)}},this.onOCIDownloadWalletFile=(e,a,i)=>{if(this.downloadWalletFileInProgress(!0),this.newConnectionUIToDisplay()==n.NewConnectionUIToDisplay.DownloadWalletfileWhileMakingConnection&&null!=this.downloadWalletFileOptions()&&0==this.downloadWalletFileOptions().length)return void this.launchDBConnectionPageHandler(n.NewConnectionUIToDisplay.NormalDB);const l=new t.MessageBase;l.type=t.MessageName.adbDownloadWalletFileRequestMessage;const c=new n.adbDownloadWalletFileRequest;c.executionId=s.DataAccessService.instance.currentExecutionId,c.windowUri=s.DataAccessService.instance.windowUri,c.adbDatabaseID=s.DataAccessService.instance.adbDatabaseID,c.adbDisplayName=s.DataAccessService.instance.adbDisplayName,c.adbName=s.DataAccessService.instance.adbName,c.walletFilepath=this.walletFileLocation(),c.profileName=s.DataAccessService.instance.profileName,c.walletType=this.walletType(),c.dedicatedDb=s.DataAccessService.instance.isDedicatedDb,this.password().length>0&&(c.pswd=o.toCodePointArray(this.password())),l.data=c;try{s.DataAccessService.instance.send(l),s.DataAccessService.instance.logInfo("Successfully placed onOCIDownloadWalletFile")}catch(e){s.DataAccessService.instance.logError(e)}},this.showPasswordControls=a.observable(!1),this.showSpecifyPasswordCheckbox=a.observable(!0),this.showOKCaption=a.observable(!1),this.onDownloadWalletFileValueChanged=e=>{if(e&&e.detail){let a="yes"==e.detail.value;this.showSpecifyPasswordCheckbox(a),this.showPasswordControls(!1),this.password(""),this.newConnectionUIToDisplay()!=n.NewConnectionUIToDisplay.DownloadWalletfileWhileMakingConnection||a?(this.downLoadCaption(i.LocalizedConstants.Instance.download),this.showOKCaption(!1)):(this.downLoadCaption(i.LocalizedConstants.Instance.OK),this.showOKCaption(!0))}},this.onUseDefaultDBFileNameValueChanged=e=>{if(e&&e.detail){let a=null==e.detail.value||0!=e.detail.value.length;this.walletFileLocation()&&this.getDownloadWalletFilePath(a)}},this.onSpecifyPasswordtoDownloadWalletFilesChanged=e=>{e&&e.detail&&(this.showPasswordControls(null!=e.detail.value&&1==e.detail.value.length),this.password(""))},this.password=a.observable(""),this.pswderror=a.observable(""),this.onPswdProvided=e=>{let a=e.detail.value;(0!=a.length||this.pageinitialized)&&(this.confirmpassword(""),this.pswdMismatchError(""),this.validPswd(a)||0==a.length?this.pswderror(""):this.pswderror(this.adbDownloadCredentialsFilesUILabels.pswdPattern))},this.confirmpassword=a.observable(""),this.showInvalidPasswordError=a.pureComputed(()=>{let e=this.pswderror().length>0;return this.pageinitialized||(e=!1),e}),this.onConfirmPswdProvided=e=>{let a=e.detail.value;this.confirmpassword(a),(0!=a.length||this.pageinitialized)&&this.setPswdMismatchError(this.password(),a)},this.enableCreatebutton=a.pureComputed(()=>!this.showPasswordControls()||0==this.pswderror().length&&0==this.pswdMismatchError().length&&this.confirmpassword().length>0,this),this.pageinitialized=!1,this.showPasswordMismatchError=a.pureComputed(()=>{let e=this.pswdMismatchError().length>0;return this.pageinitialized||(e=!1),e}),this.onOCIReplaceExistingFiles=(e,a,t)=>{this.downloadWalletFileInProgress(!1),this.sendExistingFileActionRequest(n.FileExistsAction.Replace)},this.onOCISkipExistingFiles=(e,a,t)=>{this.downloadWalletFileInProgress(!1),this.sendExistingFileActionRequest(n.FileExistsAction.Skip)},this.onOCICancel=(e,a,t)=>{try{this.clickedCancelButtonOnCopyReplaceDialog=!0,document.getElementById("modalDialogID").close(),this.showDownloadCredentialsFileUI()}catch(e){s.DataAccessService.instance.logError(e)}},this.cancelHandler=e=>{this.clickedCancelButtonOnCopyReplaceDialog||this.showDownloadCredentialsFileUI()},l=this,this.downloadCredentialFileHeader=i.LocalizedConstants.Instance.downloadCredentialFile,e&&e.newConnectionUIToDisplay&&(this.newConnectionUIToDisplay(e.newConnectionUIToDisplay),this.launchDBConnectionPageHandler=e.launchDBConnectionPageHandler,this.updateWalletFilePathHandler=e.updateWalletFilePathHandler,e.newConnectionUIToDisplay==n.NewConnectionUIToDisplay.DownloadWalletfileWhileMakingConnection&&(this.downloadCredentialFileHeader=i.LocalizedConstants.Instance.downloadCredentialFileForConnection,this.showDownlaodCredentialFileDescription(!1)),e.tlsEnbledNMutualAuthentication&&(this.tlsEnbledNMutualAuthentication=e.tlsEnbledNMutualAuthentication),e.downloadWalletWhileMakingConnectionForDedicatedDB&&(this.downloadWalletWhileMakingConnectionForDedicatedDB=!0)),l.messageHandlers=new Map,s.DataAccessService.instance.subscribe(e=>{if(e&&this.messageHandlers.get(e.type)){const a=this.messageHandlers.get(e.type);a&&a(e)}else s.DataAccessService.instance.logError("Could not find handler for message "+e.type)}),this.downLoadCaption(i.LocalizedConstants.Instance.download),this.initialize(),s.DataAccessService.instance.logInfo("Fetching Localized resources "),s.DataAccessService.instance.getLocalizedData().done(e=>{s.DataAccessService.instance.logInfo("Fetched localized resources."),i.LocalizedConstants.Instance.Configure(e)}).fail(e=>{s.DataAccessService.instance.logError("Localized resources "+JSON.stringify(e))})}get messageHandlers(){return this.messageHandlersField}set messageHandlers(e){this.messageHandlersField=e}controlsHaveInValidValues(){let e=!1;return(0==this.walletFileLocation().trim().length||this.walletType()!=n.WalletType.Instance&&this.walletType()!=n.WalletType.Regional)&&(e=!0),e}initialize(){this.walletFileLocation(s.DataAccessService.instance.walletLocation),s.DataAccessService.instance.displayMode==t.UIDisplayMode.AutonomousDatabaseConnectionManagement?this.tlsEnbledNMutualAuthentication||this.downloadWalletWhileMakingConnectionForDedicatedDB?(this.newConnectionUIToDisplay(n.NewConnectionUIToDisplay.DownloadWalletfileWhileMakingConnection),this.downloadWalletFileOptions.push("yes")):s.DataAccessService.instance.tlsAuthenticationType==n.TLSAuthenticationType.TLS?this.newConnectionUIToDisplay(n.NewConnectionUIToDisplay.TLSAuthentication):(this.newConnectionUIToDisplay(n.NewConnectionUIToDisplay.DownloadWalletfileWhileMakingConnection),this.downloadWalletFileOptions.push("yes")):(this.newConnectionUIToDisplay(n.NewConnectionUIToDisplay.DownCredentialsfile),this.useDefaultDBFileNameOptions.push("yes")),this.messageHandlers.set(t.MessageName.browseReponseForDownloadCredentialPage,e=>{this.handleBrowseResponse(e)}),this.messageHandlers.set(t.MessageName.adbDownloadWalletFileResponseMessage,e=>{this.handleADBDownloadWalletFileResponse(e)}),this.messageHandlers.set(t.MessageName.adbDownloadWalletFilePathResponseMessage,e=>{this.updateWalletFilePath(e)}),this.isDedicatedDB(s.DataAccessService.instance.isDedicatedDb),this.pageinitialized=!0}handleADBDownloadWalletFileResponse(e){s.DataAccessService.instance.logInfo("Received handleADBDownloadWalletFileResponse");var a=e.data;if(a.downloadCredentialsFilesData.existingFiles)if(a.downloadCredentialsFilesData.existingFiles.length>0){this.newConnectionUIToDisplay()!=n.NewConnectionUIToDisplay.DownCredentialsfile&&this.newConnectionUIToDisplay(n.NewConnectionUIToDisplay.None),this.existingFiles.removeAll();for(let e=0;e<a.downloadCredentialsFilesData.existingFiles.length;e++)this.existingFiles.push({name:a.downloadCredentialsFilesData.existingFiles[e]});this.clickedCancelButtonOnCopyReplaceDialog=!1,document.getElementById("modalDialogID").open()}else this.downloadWalletFileInProgress(!1),this.newConnectionUIToDisplay()!=n.NewConnectionUIToDisplay.DownCredentialsfile&&0==a.downloadCredentialsFilesData.errorMessage.length&&this.launchDBConnectionPageHandler&&this.launchDBConnectionPageHandler(n.NewConnectionUIToDisplay.NormalDB);else this.downloadWalletFileInProgress(!1)}handleBrowseResponse(e){s.DataAccessService.instance.logInfo("Received BrowseResponse");try{const a=e.data;a&&a.path&&(this.walletFileLocation(a.path),this.updateWalletFilePathHandler&&this.updateWalletFilePathHandler(a.path))}catch(e){s.DataAccessService.instance.logError(e)}}getDownloadWalletFilePath(e){const a=new t.MessageBase;a.type=t.MessageName.adbDownloadWalletFilePathRequestMessage;let i=new n.adbDownloadWalletFilePathRequest;i.databaseName=s.DataAccessService.instance.adbName,i.appendDatabaseName=e,i.filePath=this.walletFileLocation(),i.executionId=s.DataAccessService.instance.currentExecutionId,i.windowUri=s.DataAccessService.instance.windowUri,a.data=i;try{s.DataAccessService.instance.send(a),s.DataAccessService.instance.logInfo("Successfully placed getDownloadWalletFilePath")}catch(e){s.DataAccessService.instance.logError(e)}}updateWalletFilePath(e){s.DataAccessService.instance.logInfo("Received adbDownloadWalletFilePathResponseMessage");let a=e.data;this.walletFileLocation(a.filePath),this.updateWalletFilePathHandler&&this.updateWalletFilePathHandler(a.filePath)}validPswd(e){let a=new RegExp("^(?=.*?[A-Za-z])(?=.*?[0-9]).{8,60}$");return null!=e.match(a)}setPswdMismatchError(e,a){0==a.length?this.pswdMismatchError(""):this.pswdMismatchError(this.passwordMatches(e,a)?"":this.adbDownloadCredentialsFilesUILabels.pswdMismatch)}passwordMatches(e,a){return e===a}sendExistingFileActionRequest(e){const a=new t.MessageBase;a.type=t.MessageName.adbReplaceWalletFileRequestMessage;const i=new n.adbReplaceWalletFileRequest;i.executionId=s.DataAccessService.instance.currentExecutionId,i.windowUri=s.DataAccessService.instance.windowUri,i.adbDatabaseID=s.DataAccessService.instance.adbDatabaseID,i.adbDisplayName=s.DataAccessService.instance.adbDisplayName,i.adbName=s.DataAccessService.instance.adbName,i.fileExistsAction=e,i.walletFilepath=this.walletFileLocation(),i.profileName=s.DataAccessService.instance.profileName,i.dedicatedDb=s.DataAccessService.instance.isDedicatedDb,i.existingFiles=this.existingFiles(),a.data=i;try{s.DataAccessService.instance.send(a),s.DataAccessService.instance.logInfo("Successfully placed sendExistingFileActionRequest"),this.clickedCancelButtonOnCopyReplaceDialog=!0,document.getElementById("modalDialogID").close(),this.newConnectionUIToDisplay()!=n.NewConnectionUIToDisplay.DownCredentialsfile&&this.launchDBConnectionPageHandler(n.NewConnectionUIToDisplay.NormalDB)}catch(e){s.DataAccessService.instance.logError(e)}}showDownloadCredentialsFileUI(){this.downloadWalletFileInProgress(!1),this.newConnectionUIToDisplay()==n.NewConnectionUIToDisplay.DownCredentialsfile?this.newConnectionUIToDisplay(n.NewConnectionUIToDisplay.DownCredentialsfile):(this.existingFiles([]),this.newConnectionUIToDisplay(n.NewConnectionUIToDisplay.DownloadWalletfileWhileMakingConnection))}}}));