define(["require","exports","knockout","../common/dataAccessService","../common/localizedConstants","../common/scriptExecutionModels","../utilities","../utilities","../common/autonomousDBModels","ojs/ojcore","ojs/ojcheckboxset","jquery","ojs/ojtreeview","ojs/ojarraytreedataprovider","ojs/ojbutton","ojs/ojknockout","ojs/ojinputtext","ojs/ojlabel","ojs/ojprogress","ojs/ojformlayout","ojs/ojselectcombobox","ojs/ojmessage","ojs/ojmessages","ojs/ojnavigationlist","ojs/ojcollapsible","ojs/ojlabelvalue","ojs/ojradioset","ojs/ojpopup","ojs/ojdialog","ojs/ojinputnumber","ojs/ojdialog"],(function(require,s,e,a,t,n,o,i,c){"use strict";let r;class d{constructor(){this.changePassword=t.LocalizedConstants.Instance.changePswd,this.profileName=t.LocalizedConstants.Instance.profile,this.compartmentName=t.LocalizedConstants.Instance.compartmentName,this.databaseDisplayName=t.LocalizedConstants.Instance.databaseDisplayName,this.confirmPassword=t.LocalizedConstants.Instance.confirmPswd,this.newPassword=t.LocalizedConstants.Instance.newPswd,this.userName=t.LocalizedConstants.Instance.userName,this.userNameValue="ADMIN",this.pswdPattern=t.LocalizedConstants.Instance.pswdChangePattern,this.emptyPswd=t.LocalizedConstants.Instance.emptyPswd,this.pswdMismatch=t.LocalizedConstants.Instance.pswdMismatch,this.requiredText=" *",this.cancel=t.LocalizedConstants.Instance.cancel,this.OK=t.LocalizedConstants.Instance.OK,this.changePasswordCancelMsg=t.LocalizedConstants.Instance.changePswdCancelMsg}}return class{constructor(){this.changeADBPasswordModuleUILabelText=new d,this.profileName=e.observable(""),this.adbDatabaseID=e.observable(""),this.compartmentFullPath=e.observable(""),this.databaseDisplayName=e.observable(""),this.confirmPassword=e.observable(""),this.newPassword=e.observable(""),this.pswderror=e.observable(""),this.changeAdminPasswordCancel=e.observable(""),this.changeAdminPasswordInProgress=e.observable(""),this.changeAdminPasswordStatus=e.observable(""),this.pswdMismatchError=e.observable(""),this.disableControls=e.observable(!1),this.onThemeChanged=s=>{a.DataAccessService.instance.logInfo("Theme Changed"),o.setContrast()},this.handlersField=new Map,this.changePswdResponse=s=>{var e=s.data;this.changeAdminPasswordStatus(e.statusMessage)},this.onLaunchChangeadminPasswordDialogResponse=s=>{document.getElementById("changeAdminPasswordDialogID").open()},this.transitionCompleted=()=>{a.DataAccessService.instance.logInfo("change admin transitionCompleted called");var s=new n.MessageBase;s.type=n.MessageName.ociLaunchChangeadminPswdDialogRequestMessage;var e=new c.adbLaunchChangeAdminPasswordDialogRequest;e.executionId=a.DataAccessService.instance.currentExecutionId,e.windowUri=a.DataAccessService.instance.windowUri,s.data=e;try{a.DataAccessService.instance.send(s),a.DataAccessService.instance.logInfo("Successfully placed launch admin dialog request"),this.disableControls(!1)}catch(s){a.DataAccessService.instance.logError(s)}},this.onConfirmPasswordChanged=s=>{let e=s.detail.value;0!=e.length&&this.setPswdMismatchError(this.newPassword(),e)},this.onNewPasswordChanged=s=>{let e=s.detail.value;0!=e.length?(this.confirmPassword(""),this.pswdMismatchError(""),this.validPswd(e)?this.pswderror(""):this.pswderror(this.changeADBPasswordModuleUILabelText.pswdPattern)):this.pswderror("")},this.showPasswordMismatchError=e.computed(()=>this.pswdMismatchError().length>0),this.showInvalidPasswordError=e.pureComputed(()=>this.pswderror().length>0),this.onChangePassword=()=>{a.DataAccessService.instance.logInfo("change admin pswd handler called");var s=new n.MessageBase;s.type=n.MessageName.ociUpdateAdminstratorPswd;var e=new c.ociUpdateAdministratorPswdRequest;e.executionId=a.DataAccessService.instance.currentExecutionId,e.windowUri=a.DataAccessService.instance.windowUri,e.profileName=a.DataAccessService.instance.profileName,e.adbDatabaseID=a.DataAccessService.instance.adbDatabaseID,e.pswd=o.toCodePointArray(this.newPassword()),s.data=e;try{a.DataAccessService.instance.send(s),a.DataAccessService.instance.logInfo("Successfully placed admin pswd request"),this.disableControls(!0),document.getElementById("changeAdminPasswordDialogID").close(),this.changeAdminPasswordInProgress(i.stringFormatterCsharpStyle(t.LocalizedConstants.Instance.aDBInstancePswsdChanging,this.databaseDisplayName()))}catch(s){a.DataAccessService.instance.logError(s)}},this.onCancelPassword=()=>{document.getElementById("changeAdminPasswordDialogID").close();let s=this.changeAdminPasswordCancel();s=""+i.stringFormatterCsharpStyle(this.changeADBPasswordModuleUILabelText.changePasswordCancelMsg,this.databaseDisplayName()),this.changeAdminPasswordCancel(s)},this.enableChangePasswordButton=e.pureComputed(()=>{var s=!1;return this.validPswd(this.newPassword())&&this.passwordMatches(this.newPassword(),this.confirmPassword())&&(s=!0),s},this),r=this,r.handlers=new Map,r.handlers.set(n.MessageName.themeChanged,this.onThemeChanged),r.handlers.set(n.MessageName.adbChangePswdResponse,r.changePswdResponse),r.handlers.set(n.MessageName.ociLaunchChangeadminPswdDialogResponseMessage,r.onLaunchChangeadminPasswordDialogResponse),a.DataAccessService.instance.subscribe(s=>{if(s&&this.handlers.get(s.type)){const e=this.handlers.get(s.type);e&&e(s)}else a.DataAccessService.instance.logError("Could not find handler for message "+s.type)}),a.DataAccessService.instance.logInfo("Fetching Localized resources "),a.DataAccessService.instance.getLocalizedData().done(s=>{a.DataAccessService.instance.logInfo("Fetched localized resources."),t.LocalizedConstants.Instance.Configure(s)}).fail(s=>{a.DataAccessService.instance.logError("Localized resources "+JSON.stringify(s))}),this.profileName(a.DataAccessService.instance.profileName),this.adbDatabaseID(a.DataAccessService.instance.adbDatabaseID),this.compartmentFullPath(a.DataAccessService.instance.compartmentFullPath),this.databaseDisplayName(a.DataAccessService.instance.adbDisplayName)}get handlers(){return this.handlersField}set handlers(s){this.handlersField=s}passwordMatches(s,e){return s===e}setPswdMismatchError(s,e){0==e.length?this.pswdMismatchError(""):this.pswdMismatchError(this.passwordMatches(s,e)?"":this.changeADBPasswordModuleUILabelText.pswdMismatch)}validPswd(s){let e=new RegExp('^(?=(.*[0-9]){1,})(?=(.*[a-z]){1,})(?=(.*[A-Z]){1,})(?!(.*["]))(?!(.*[aA][dD][mM][iI][nN])).{12,30}$');return null!=s.match(e)}}}));