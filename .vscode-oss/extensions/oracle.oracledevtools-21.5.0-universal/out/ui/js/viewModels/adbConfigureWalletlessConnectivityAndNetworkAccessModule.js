define(["require","exports","knockout","../common/autonomousDBModels","../common/scriptExecutionModels","../common/dataAccessService","../common/localizedConstants","ojs/ojarraydataprovider","../common/adbUtils","ojs/ojknockout-keyset","../utilities","ojs/ojradioset","ojs/ojlabelvalue","ojs/ojlabel","ojs/ojselectcombobox","ojs/ojbutton","ojs/ojtable","ojs/ojknockout","ojs/ojgauge","ojs/ojinputtext","ojs/ojformlayout","ojs/ojdialog","ojs/ojprogress","ojs/ojlistview","ojs/ojbinddom","ojs/ojarraytreedataprovider","ojs/ojcheckboxset"],(function(require,e,s,t,a,n,i,c,o,l,r){"use strict";let d;class h{constructor(){this.ipAddress=i.LocalizedConstants.Instance.ipAddress,this.cidrBlock=i.LocalizedConstants.Instance.cidrBlock,this.virtualCloudNetwork=i.LocalizedConstants.Instance.virtualCloudNetwork,this.virtualCloudNetworkOCID=i.LocalizedConstants.Instance.virtualCloudNetworkOCID,this.addACLRule=i.LocalizedConstants.Instance.addACLRule,this.networkAccessTypeText=i.LocalizedConstants.Instance.networkAccessTypeText,this.requiredText=" *",this.ipAddresses=i.LocalizedConstants.Instance.ipAddresses,this.update=i.LocalizedConstants.Instance.update,this.mTLSConnection=i.LocalizedConstants.Instance.mTLSConnection,this.secureAccessFromEveryWhere=i.LocalizedConstants.Instance.secureAccessFromEveryWhere,this.secureAccessFromAllowedIPs=i.LocalizedConstants.Instance.secureAccessFromAllowedIPs,this.yes=i.LocalizedConstants.Instance.yes,this.no=i.LocalizedConstants.Instance.no,this.invalidValueError=i.LocalizedConstants.Instance.invalidValue,this.invalidCIDRValueError=i.LocalizedConstants.Instance.invalidCIDRValue,this.adbConfigureWalletlessConnectivityandNetworkAccess=i.LocalizedConstants.Instance.adbConfigureWalletlessConnectivityandNetworkAccess,this.adbConfigureDatabaseAccessControl=i.LocalizedConstants.Instance.adbConfigureDatabaseAccessControl,this.updateIPAddress=i.LocalizedConstants.Instance.updateIPAddress,this.add=i.LocalizedConstants.Instance.add,this.remove=i.LocalizedConstants.Instance.remove,this.addMyIPAddress=i.LocalizedConstants.Instance.addMyIPAddress,this.cancel=i.LocalizedConstants.Instance.cancel,this.applyChanges=i.LocalizedConstants.Instance.applyChanges,this.updateACLRule=i.LocalizedConstants.Instance.updateACLRule,this.updateACLRules=i.LocalizedConstants.Instance.updateACLRules,this.ok=i.LocalizedConstants.Instance.OK,this.selectCompartmentForVCN=i.LocalizedConstants.Instance.selectCompartmentForVCN,this.enableDBLevelAccess=i.LocalizedConstants.Instance.enableDBLevelAccess,this.requireMutualTLS=i.LocalizedConstants.Instance.requireMutualTLS,this.requireMutualTLSDescription=i.LocalizedConstants.Instance.requireMutualTLSDescription,this.requireMutualTLSDescription2=i.LocalizedConstants.Instance.requireMutualTLSDescription2,this.configureWalletLessDescription=i.LocalizedConstants.Instance.configureWalletLessDescription,this.ipNotationType=i.LocalizedConstants.Instance.ipNotationType,this.values=i.LocalizedConstants.Instance.values}}return class{constructor(e){this.networkAccessType=s.observable(t.ADBNetworkAccessType.SecureAccessFromEveryWhere),this.initialNetworkAccessType=s.observable(t.ADBNetworkAccessType.SecureAccessFromEveryWhere),this.adbUpdateNetworkAccessUILabels=new h,this.isUpdateInProgress=s.observable(!1),this.networkAccessTypes=s.observableArray([{value:t.ADBNetworkAccessType.SecureAccessFromEveryWhere,label:this.adbUpdateNetworkAccessUILabels.secureAccessFromEveryWhere},{value:t.ADBNetworkAccessType.SecureAccessFromAllowedIPs,label:this.adbUpdateNetworkAccessUILabels.secureAccessFromAllowedIPs}]),this.handlersField=new Map,this.currentCompartmentID=s.observable(""),this.currentCompartmentName=s.observable(""),this.currentCompartmentFullName=s.observable(),this.compartmentFullNameForDisplay=s.observable(""),this.profileName="",this.compartmentData=s.observable(),this.rootTenancy=s.observable(),this.selectedCompartmentID=s.observable(""),this.selectedCompartmentName="",this.selectedCompartmentFullName="",this.compartmentArrayTree=[],this.selected=new l.ObservableKeySet,this.expanded=new l.ObservableKeySet,this.data=s.observable(null),this.networkAccessLaunchSource=s.observable(t.updateNetworkAccessLaunchSource.UnknownValue),this.hasWhitelistedMapChanged=!1,this.isCreateADBInProgress=s.observable(!1),this.sendrequestToUpdateACL=()=>{let e=new t.ociUpdateNetworkAccessTypeRequest;this.isUpdateInProgress(!0),n.DataAccessService.instance.logInfo("onApplyNetworkAccessChanges request received.");var s=new a.MessageBase;s.type=a.MessageName.ociUpdateNetworkAccessTypeRequetMessage,e.windowUri=n.DataAccessService.instance.windowUri,e.executionId=n.DataAccessService.instance.currentExecutionId,e.adbDatabaseID=n.DataAccessService.instance.adbDatabaseID,this.networkAccessLaunchSource()==t.updateNetworkAccessLaunchSource.UpdateNetworkAccessContextmenuForDedicatedDB?"yes"==this.enableDBLevelAccessOption()?(e.whitelistedIps=this.currentWhiteListedIPs,e.isAccessControlEnabled=!0):(e.whitelistedIps=[""],e.isAccessControlEnabled=!1,this.networkAccessUIManager.whitelistedIpsInACLRuleModuleMap.clear(),this.networkAccessUIManager.whitelistedIpsMap.clear()):this.networkAccessLaunchSource()==t.updateNetworkAccessLaunchSource.UpdateNetworkAccessContextmenuForSharedDB&&(this.networkAccessType()==t.ADBNetworkAccessType.SecureAccessFromAllowedIPs?e.whitelistedIps=this.currentWhiteListedIPs:e.whitelistedIps=[""]),e.profileName=n.DataAccessService.instance.profileName,s.data=e;try{n.DataAccessService.instance.logInfo("Sending onApplyNetworkAccessChanges."),n.DataAccessService.instance.send(s),n.DataAccessService.instance.logInfo("Successfully placed onApplyNetworkAccessChanges")}catch(e){n.DataAccessService.instance.logError(e),this.isUpdateInProgress(!1)}},this.sendRequestToUpdateAuthentication=()=>{let e=new t.ociMTLSAuthenticationTypeRequest;this.isUpdateInProgress(!0),n.DataAccessService.instance.logInfo("onApplyMTLSAuthenticationChanges request received.");var s=new a.MessageBase;s.type=a.MessageName.ociEditMutualAuthenticationRequestMessage,e.windowUri=n.DataAccessService.instance.windowUri,e.executionId=n.DataAccessService.instance.currentExecutionId,e.adbDatabaseID=n.DataAccessService.instance.adbDatabaseID,e.profileName=n.DataAccessService.instance.profileName,e.isMtlsConnectionRequired=this.tlsValueToApply,s.data=e;try{n.DataAccessService.instance.logInfo("Sending onApplyMTLSAuthenticationChanges."),n.DataAccessService.instance.send(s),n.DataAccessService.instance.logInfo("Successfully placed onApplyMTLSAuthenticationChanges")}catch(e){n.DataAccessService.instance.logError(e),this.isUpdateInProgress(!1)}},this.adbACLNAuthenticationUpdateHandlerList=new Array,this.currentWhiteListedIPs=new Array,this.tlsValueToApply=!1,this.onApplyNetworkAccessChanges=()=>{this.adbACLNAuthenticationUpdateHandlerList.length=0,this.currentWhiteListedIPs.length=0;let e=this.hasWhitelistedMapChanged;this.networkAccessLaunchSource()==t.updateNetworkAccessLaunchSource.UpdateNetworkAccessContextmenuForDedicatedDB?("no"==this.enableDBLevelAccessOption()&&(e=this.networkAccessUIManager.whitelistedIpsMap.size>0,this.networkAccessUIManager.clearWhiteListedMap()),this.currentWhiteListedIPs=this.networkAccessUIManager.getWhitelistedIps(),e&&this.adbACLNAuthenticationUpdateHandlerList.push(this.sendrequestToUpdateACL)):(this.networkAccessType()==t.ADBNetworkAccessType.SecureAccessFromEveryWhere&&(e=this.networkAccessUIManager.whitelistedIpsMap.size>0,this.networkAccessUIManager.clearWhiteListedMap()),this.currentWhiteListedIPs=this.networkAccessUIManager.getWhitelistedIps(),this.tlsValueToApply=!(this.enableWalletlessConnectivityChkboxValue().length>0),this.authenticationChangedToWalletLessNACLAdded()?(this.adbACLNAuthenticationUpdateHandlerList.push(this.sendRequestToUpdateAuthentication),this.adbACLNAuthenticationUpdateHandlerList.push(this.sendrequestToUpdateACL)):(e&&this.adbACLNAuthenticationUpdateHandlerList.push(this.sendrequestToUpdateACL),this.enableWalletlessConnectivityChkboxValue().length!=this.initialEnableWalletlessConnectivityChkboxValue().length&&this.adbACLNAuthenticationUpdateHandlerList.push(this.sendRequestToUpdateAuthentication)));let s=this.adbACLNAuthenticationUpdateHandlerList.pop();s&&s()},this.onUpdateACL=e=>{if(document.getElementById("changeACLRuleDialogID").open(),this.networkAccessType()==t.ADBNetworkAccessType.SecureAccessFromAllowedIPs||this.networkAccessLaunchSource()===t.updateNetworkAccessLaunchSource.DedicatedInfrastructureDB||this.networkAccessLaunchSource()===t.updateNetworkAccessLaunchSource.UpdateNetworkAccessContextmenuForDedicatedDB){let e=document.querySelector("#aclRuleContainerID");for(var s=e.lastElementChild;s;)e.removeChild(s),s=e.lastElementChild;this.networkAccessUIManager.launchACLUpdateUI()}},this.YesNoOptions=s.observableArray([{value:"yes",label:this.adbUpdateNetworkAccessUILabels.yes},{value:"no",label:this.adbUpdateNetworkAccessUILabels.no}]),this.YesNoOption=s.observable("yes"),this.disableAuthenticationControl=s.observable(!0),this.enableDBLevelAccessOption=s.observable("no"),this.initialEnableDBLevelAccessOption=s.observable("no"),this.enableDBLevelAccess=s.observable(!1),this.enableDBAccessChangeHandler=e=>{e&&e.detail&&("yes"==e.detail.value?this.enableDBLevelAccess(!0):(this.enableDBLevelAccess(!1),this.YesNoOption("no")),this.enableDBLevelAccessControlHandler&&this.enableDBLevelAccessControlHandler(this.enableDBLevelAccess()),this.pageChanged(),this.noACLAndWalletLessConnectivityEnabled())},this.requireMTLSTypeChangedHandler=e=>{e&&e.detail&&(this.updateControlsForNetworkAccessType(e.detail.value,this.networkAccessType()),this.pageChanged(),this.noACLAndWalletLessConnectivityEnabled(),this.networkAccessType()==t.ADBNetworkAccessType.SecureAccessFromAllowedIPs&&(this.prevWalletlessConnectivityEnabledWhenRestrictedAccess=!!(e.detail.value&&e.detail.value.length>0)))},this.networkAccessTypeChangedHandler=e=>{e&&e.detail&&(e.detail.value==t.ADBNetworkAccessType.SecureAccessFromEveryWhere?(this.disableWalletlessConnectivityChkbox(!0),this.YesNoOption("no"),this.disableUpdateButton(!0),this.enableWalletlessConnectivityChkboxValue&&this.enableWalletlessConnectivityChkboxValue.removeAll(),this.updateControlsForNetworkAccessType(this.enableWalletlessConnectivityChkboxValue(),e.detail.value)):(this.disableWalletlessConnectivityChkbox(!1),this.enableWalletlessConnectivityChkboxValue.removeAll(),this.prevWalletlessConnectivityEnabledWhenRestrictedAccess&&this.enableWalletlessConnectivityChkboxValue.push("yes"),this.disableUpdateButton(!1),this.YesNoOption("yes"),this.updateControlsForNetworkAccessType(this.enableWalletlessConnectivityChkboxValue(),e.detail.value)),this.pageChanged(),this.noACLAndWalletLessConnectivityEnabled())},this.handleTransitionCompleted=()=>{this.networkAccessLaunchSource()!=t.updateNetworkAccessLaunchSource.SharedInfrastructureDB&&this.networkAccessLaunchSource()!=t.updateNetworkAccessLaunchSource.DedicatedInfrastructureDB||($("#updateNetworkAccessUIID").removeClass("connDlgBody"),this.createADBPageHandler&&this.createADBPageHandler(this.configureADBModuleCreateADBProgressHandler)),d.getNetworkAcessTypeInitializationData()},this.disableOkButton=s.observable(!0),this.disableAddRuleButton=s.observable(!1),this.fetchPublicIPInProgress=s.observable(!1),this.disableUpdateButton=s.observable(!0),this.invalidModules=new Set,this.configureADBModuleCreateADBProgressHandler=e=>{this.isCreateADBInProgress(e)},this.launchFromCreateADB=e=>e&&(e.networkAccessLaunchSource==t.updateNetworkAccessLaunchSource.SharedInfrastructureDB||e.networkAccessLaunchSource==t.updateNetworkAccessLaunchSource.DedicatedInfrastructureDB),this.prevWalletlessConnectivityEnabledWhenRestrictedAccess=!1,this.disableWalletlessConnectivityChkbox=s.observable(!0),this.initialWhitelistedIps=new Array,this.ipAddresses=s.observableArray(),this.ipAddressDataProvider=new c(this.ipAddresses,{keyAttributes:"id"}),this.getNetworkAcessTypeInitializationData=()=>{n.DataAccessService.instance.logInfo("get NetworkAcessTypeInitializationData request received.");var e=new a.MessageBase;e.type=a.MessageName.initializeNetworkAccessTypeRequestMessage;var s=new t.ociInitializeNetworkAccessTypeRequest;s.executionId=n.DataAccessService.instance.currentExecutionId,s.windowUri=n.DataAccessService.instance.windowUri,s.profileName=n.DataAccessService.instance.profileName,s.adbDatabaseID=n.DataAccessService.instance.adbDatabaseID,e.data=s;try{s.adbDatabaseID&&s.adbDatabaseID.length>0&&(n.DataAccessService.instance.send(e),n.DataAccessService.instance.logInfo("Successfully placed get NetworkAcessTypeInitializationData request"))}catch(e){n.DataAccessService.instance.logError(e)}},this.onPublicIPAddressReceived=e=>{let s=e.data;s.status==t.operationStatus.Success&&this.networkAccessUIManager.addPublicIPAddress(s.ipAddress),this.fetchPublicIPInProgress(!1)},this.onInitializeNetworkAcessTypeDataReceived=e=>{let s=e.data;this.networkAccessLaunchSource(s.networkAccessLaunchSource),this.refreshPage(s.isMtlsConnectionRequired,s.whitelistedIps,s.isAccessControlEnabled)},this.onUpdateMTLSAuthenticationResponse=e=>{let s=e.data;if(this.isUpdateInProgress(!1),s.status==t.operationStatus.Success){if(this.refreshPage(s.isMtlsConnectionRequired,s.whitelistedIps),this.adbACLNAuthenticationUpdateHandlerList.length>0){let e=this.adbACLNAuthenticationUpdateHandlerList.pop();e&&e()}}else this.adbACLNAuthenticationUpdateHandlerList.length=0},this.onUpdateNetworkAccessTypeResponse=e=>{let s=e.data;if(this.isUpdateInProgress(!1),s.status==t.operationStatus.Success&&this.refreshPage(s.isMtlsConnectionRequired,s.whitelistedIps),s.status==t.operationStatus.Success){if(this.adbACLNAuthenticationUpdateHandlerList.length>0){let e=this.adbACLNAuthenticationUpdateHandlerList.pop();e&&e()}}else this.adbACLNAuthenticationUpdateHandlerList.length=0},this.isIPAddressEmpty=s.observable(!0),this.isSelectionEmpty=s.observable(!1),this.isTextOrSelectionEmpty=s.computed(()=>this.isIPAddressEmpty()||this.isSelectionEmpty()),this.ipNotationType=s.observable(t.IPNotationTypes.IPAddress),this.onADDAccessControlRuleClick=e=>{e&&e.detail&&(this.networkAccessUIManager.addModuleEntryToMapAndACLUI(t.IPNotationTypes.IPAddress,null,!0,!0),this.networkAccessUIManager.showPublicIPAddressButtonToLastIPModule())},this.changeCompartmentUIHandler=(e,s,t)=>{document.getElementById("changeCompartmentACLDialogID").close(),e&&this.updateCompartmentHandler&&this.updateCompartmentHandler(s,e)},this.selectCompartmentListHandler=e=>{document.getElementById("changeCompartmentACLDialogID").open(),this.updateCompartmentHandler=e},this.onOKUpdateACLDialog=()=>{this.networkAccessUIManager.onOKUpdateACLDialog(),document.getElementById("changeACLRuleDialogID").close(),this.pageChanged(),this.noACLAndWalletLessConnectivityEnabled()},this.onCloseUpdateACLDialog=()=>{this.networkAccessUIManager.clearInvalidModulesOnClose(),$("#okButton").addClass("oj-default"),$("#okButton").addClass(".oj-default")},this.onCancelUpdateACLDialog=e=>{this.networkAccessUIManager.onCancelUpdateACLDialog(),document.getElementById("changeACLRuleDialogID").close()},this.onOpen=()=>{$("#addAccessControlRuleID").addClass("oj-default"),document.getElementById("addAccessControlRuleID").focus(),this.disableOkButton(!0)},this.onFocus=()=>{document.getElementById("addAccessControlRuleID").focus()},this.refreshPage=(e,s,a=!1)=>{e?(this.initialEnableWalletlessConnectivityChkboxValue.removeAll(),this.enableWalletlessConnectivityChkboxValue.removeAll(),this.prevWalletlessConnectivityEnabledWhenRestrictedAccess=!1):(this.initialEnableWalletlessConnectivityChkboxValue.removeAll(),this.enableWalletlessConnectivityChkboxValue.removeAll(),this.enableWalletlessConnectivityChkboxValue.push("yes"),this.initialEnableWalletlessConnectivityChkboxValue.push("yes"),this.prevWalletlessConnectivityEnabledWhenRestrictedAccess=!0),this.initialWhitelistedIps.length=0,this.hasWhitelistedMapChanged=!1,s&&s.length>0?(this.networkAccessUIManager.initializeACLWhiteListedMap(s),this.networkAccessType(t.ADBNetworkAccessType.SecureAccessFromAllowedIPs),this.initialNetworkAccessType(t.ADBNetworkAccessType.SecureAccessFromAllowedIPs),this.disableUpdateButton(!1),this.disableWalletlessConnectivityChkbox(!1),r.copyArray(s,this.initialWhitelistedIps)):(this.networkAccessType(t.ADBNetworkAccessType.SecureAccessFromEveryWhere),this.initialNetworkAccessType(t.ADBNetworkAccessType.SecureAccessFromEveryWhere),this.disableAuthenticationControl(!0),this.disableUpdateButton(!0),this.disableWalletlessConnectivityChkbox(!0),this.networkAccessUIManager.clearWhiteListedMap()),this.networkAccessLaunchSource()==t.updateNetworkAccessLaunchSource.UpdateNetworkAccessContextmenuForDedicatedDB&&a?(this.enableDBLevelAccessOption("yes"),this.initialEnableDBLevelAccessOption("yes")):(this.enableDBLevelAccessOption("no"),this.initialEnableDBLevelAccessOption("no")),this.disableApplyButton()},this.disableApplyButton=()=>{this.isPageChanged(!1),this.isNoACLAndWalletLessConnectivityEnabled(!0)},this.isPageChanged=s.observable(!1),this.pageChanged=()=>{this.isPageChanged(this.networkAccessUIManager.hasACLRuleChanged()||this.initialEnableWalletlessConnectivityChkboxValue().length!=this.enableWalletlessConnectivityChkboxValue().length||this.initialNetworkAccessType()!=this.networkAccessType()||this.initialEnableDBLevelAccessOption()!=this.enableDBLevelAccessOption())},this.isNoACLAndWalletLessConnectivityEnabled=s.observable(!1),this.noACLAndWalletLessConnectivityEnabled=()=>{this.isNoACLAndWalletLessConnectivityEnabled(this.enableWalletlessConnectivityChkboxValue&&this.enableWalletlessConnectivityChkboxValue().length>0&&this.networkAccessUIManager&&0==this.networkAccessUIManager.whitelistedIpsInACLRuleModuleMap.size)},this.authenticationChangedToWalletLessNACLAdded=()=>{let e=!1;return 0==this.initialEnableWalletlessConnectivityChkboxValue().length&&this.enableWalletlessConnectivityChkboxValue().length>0&&0==this.initialWhitelistedIps.length&&this.currentWhiteListedIPs.length>0&&(e=1!=this.currentWhiteListedIPs.length||""!=this.currentWhiteListedIPs[0].trim()),e},d=this,this.enableWalletlessConnectivityChkboxValue=s.observableArray(),this.initialEnableWalletlessConnectivityChkboxValue=s.observableArray(),this.profileName=n.DataAccessService.instance.profileName,d.launchFromCreateADB(e)&&(this.networkAccessLaunchSource(e.networkAccessLaunchSource),this.createADBPageHandler=e.createADBPageHandler,this.enableDBLevelAccessControlHandler=e.enableDBLevelAccessControlHandler),d.networkAccessUIManager=new o.updateNetworkAccessUIManager(this),d.networkAccessUIManager.selectCompartmentListHandler=this.selectCompartmentListHandler,d.launchFromCreateADB(e)&&(this.updateNetworkAccessControlsHandler=e.updateNetworkAccessControlsHandler,this.networkAccessUIManager.aclModuleCreateADBDataHandler=e.aclModuleDataHandler),d.handlers=new Map,d.handlers.set(a.MessageName.initializeNetworkAccessTypeResponseMessage,d.onInitializeNetworkAcessTypeDataReceived),d.handlers.set(a.MessageName.ociGetPublicIPAddressResponseMessage,d.onPublicIPAddressReceived),d.handlers.set(a.MessageName.ociUpdateNetworkAccessTypeResponseMessage,d.onUpdateNetworkAccessTypeResponse),d.handlers.set(a.MessageName.ociEditMutualAuthenticationResponseMessage,d.onUpdateMTLSAuthenticationResponse),n.DataAccessService.instance.subscribe(e=>{if(e&&this.handlers.get(e.type)){const s=this.handlers.get(e.type);s&&s(e)}else n.DataAccessService.instance.logError("Could not find handler for message "+e.type)}),n.DataAccessService.instance.logInfo("Fetching Localized resources "),n.DataAccessService.instance.getLocalizedData().done(e=>{n.DataAccessService.instance.logInfo("Fetched localized resources."),i.LocalizedConstants.Instance.Configure(e)}).fail(e=>{n.DataAccessService.instance.logError("Localized resources "+JSON.stringify(e))}),d.getNetworkAcessTypeInitializationData()}get handlers(){return this.handlersField}set handlers(e){this.handlersField=e}updateControlsForNetworkAccessType(e,s){let a=new t.NetworkAccessTypeData;e&&(a.isMtlsConnectionRequired=0==e.length),a.networkAccessType=s,this.updateNetworkAccessControlsHandler&&this.updateNetworkAccessControlsHandler(a)}setNetworkAcessType(e){e==t.ADBNetworkAccessType.SecureAccessFromEveryWhere&&this.networkAccessType(t.ADBNetworkAccessType.SecureAccessFromEveryWhere)}updateOKandAddRuleButtons(){this.invalidModules.size>0?(this.disableAddRuleButton(!0),this.disableOkButton(!0)):(this.disableAddRuleButton(!1),this.disableOkButton(!1))}}}));