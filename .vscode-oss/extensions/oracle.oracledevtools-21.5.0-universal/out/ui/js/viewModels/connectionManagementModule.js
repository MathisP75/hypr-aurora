define(["require","exports","knockout","../common/scriptExecutionModels","../common/autonomousDBModels","../common/dataAccessService","../common/messageService","../common/localizedConstants","../utilities","ojs/ojbutton","ojs/ojcheckboxset","ojs/ojknockout","ojs/ojinputtext","ojs/ojlabel","ojs/ojoption","ojs/ojprogress","ojs/ojformlayout","ojs/ojselectcombobox","ojs/ojmessage","ojs/ojmessages","ojs/ojnavigationlist","ojs/ojcollapsible","ojs/ojdialog","ojs/ojlabelvalue","ojs/ojprogress-circle"],(function(require,e,t,s,n,i,o,a,c){"use strict";let r;class h{constructor(e){this.connInfoRequred=new u,this.connInfoPlaceHodlerTexts=new p,this.connectionUILabelTexts=new m,this.existingProfiles=[],this.isCreate=!0,this.isConnectionInProgress=t.observable(!1),this.isFetchSchemasInProgress=t.observable(!1),this.creatingNewConnection=t.observable(this.isCreate),this.isFailedToParseDS=t.observable(!1),this.updateConnDataSource="",this.uiHeaderText=t.observable(""),this.createUpdateButtonText=t.observable(""),this.existingFiles=t.observable(),this.basicConnectionType=s.ConnectionType.DataSource,this.tnsConnectionType=s.ConnectionType.TNS,this.advancedConnectionType=s.ConnectionType.Advanced,this.odpConnectionType=s.ConnectionType.ODPConnectionString,this.connectionTypes=t.observableArray([{value:s.ConnectionType.DataSource,label:this.connectionUILabelTexts.connectionTypeEasyConnect},{value:s.ConnectionType.TNS,label:this.connectionUILabelTexts.connectionTypeTNS},{value:s.ConnectionType.Advanced,label:this.connectionUILabelTexts.connectionTypeEasyConnectPlus},{value:s.ConnectionType.ODPConnectionString,label:this.connectionUILabelTexts.connectionTypeODPConnectString}]),this.authenticationTypes=t.observableArray([{value:d.NonAdmin,label:this.connectionUILabelTexts.authTypeNonAdmin},{value:d.AdminSYSDBA,label:this.connectionUILabelTexts.authTypeAdminSysdba},{value:d.AdminSYSOPER,label:this.connectionUILabelTexts.authTypeAdminSysoper}]),this.currentSchemas=t.observableArray(),this.currentSchemasList=[],this.currentSchema=t.observable(""),this.tnsAliases=t.observableArray(),this.connectionType=t.observable(s.ConnectionType.DataSource),this.dbHostName=t.observable("localhost"),this.dbPortNum=t.observable("1521"),this.dbServiceName=t.observable("XEPDB1"),this.ezConnectString=t.computed(()=>{let e="";this.isFailedToParseDS()?e=this.updateConnDataSource:(this.dbHostName()&&(e=this.dbHostName()),this.dbPortNum()&&(e&&(e+=":"),e+=this.dbPortNum()),this.dbServiceName()&&(e&&(e+="/"),e+=this.dbServiceName()));let t=document.getElementById("ezConnectStringTextBox");return t&&(t.title=e),e},this),this.loginScript=t.observable(""),this.ezConnectPlusString=t.observable(""),this.tnsAdminLocation=t.observable(""),this.uiLaunchedFromADBInstace=!1,this.tnsAlias=t.observable(""),this.enableWalletFileOptions=t.observableArray(),this.walletFileLocation=t.observable(""),this.odpnetConnString=t.observable(""),this.authenticationType=t.observable(d.NonAdmin),this.userId=t.observable("ADMIN"),this.password=t.observable(""),this.proxyUserId=t.observable(""),this.proxyPassword=t.observable(""),this.savePasswordOptions=t.observableArray(),this.setasDefaultOptions=t.observableArray(),this.useProxyAuthentication=t.computed(()=>!!this.proxyUserId().trim(),this),this.osAuthentication=t.computed(()=>{let e=this.userId().trim();return!this.useProxyAuthentication()&&"/"===e&&(this.password(""),this.savePasswordOptions.removeAll(),!0)},this),this.osProxyAuthentication=t.computed(()=>{let e=!1;if(this.useProxyAuthentication()){"/"===this.proxyUserId().trim()&&(this.proxyPassword(""),e=!0)}return e},this),this.enableWalletFile=t.computed({owner:this,read:()=>-1!=this.enableWalletFileOptions.indexOf(h.strYes),write:e=>{e&&this.enableWalletFileOptions.push(h.strYes)}}),this.savePassword=t.computed({owner:this,read:()=>-1!=this.savePasswordOptions.indexOf(h.strYes),write:e=>{e&&this.savePasswordOptions.push(h.strYes)}}),this.setasDefault=t.computed({owner:this,read:()=>-1!=this.setasDefaultOptions.indexOf(h.strYes),write:e=>{e&&this.setasDefaultOptions.push(h.strYes)}}),this.morePropsVisible=!1,this.onShowMorePropsValueChanged=e=>{this.morePropsVisible=-1!=this.showMorePropsOptions.indexOf(h.strYes)},this.onHelp=()=>{const e=new s.MessageBase;e.type=s.MessageName.connectionHelpRequest;const t=new s.ConnectionHelpRequest;t.executionId=i.DataAccessService.instance.currentExecutionId,t.ownerUri=i.DataAccessService.instance.URI,t.windowUri=i.DataAccessService.instance.windowUri,e.data=t;try{i.DataAccessService.instance.send(e),i.DataAccessService.instance.logInfo("Successfully placed connectionHelpRequest")}catch(e){i.DataAccessService.instance.logError(e)}},this.showMorePropsOptions=t.observableArray(),this.showMoreProps=t.computed({owner:this,read:()=>-1!=this.showMorePropsOptions.indexOf(h.strYes),write:e=>{e&&this.showMorePropsOptions.push(h.strYes)}}),this.connectionNameParsed=t.observable(""),this.connectionNameComputed=t.computed(()=>this.computeConnectionName(),this),this.createUpdateButtonDisabled=t.computed(()=>{if(this.isConnectionInProgress()||this.isFetchSchemasInProgress())return!0;let e=!1,t=(this.connectionNameParsed(),this.areAllPropertiesToCreateConnectionAvailable());if(this.isCreate)e=t;else{let s=this.getConnectionProperties(),[n,i,o]=this.compareProfiles(this.profile,s),a=this.isDefaultConnection!==this.setasDefault();e=(n||a)&&!i&&!o||t&&(n||i||o||a)}return!e},this),this.updateCurrentSchemaOnUpdatingUserId=!0,this.lastCurrentSchemaUpdateUserId=void 0,this.currentSchemaNameComputed=t.computed(()=>{let e=this.userId().trim();if(this.morePropsVisible&&this.updateCurrentSchemaOnUpdatingUserId&&this.lastCurrentSchemaUpdateUserId!==e){this.lastCurrentSchemaUpdateUserId=e;let t=this.currentSchema();this.currentSchemasList.indexOf(t)<0&&this.currentSchemas.remove(e=>e.value===t),e&&(this.authenticationType()===d.AdminSYSDBA||this.authenticationType()===d.AdminSYSOPER?e=h.strSYS:this.osAuthentication()&&(e="")),this.currentSchemas.unshift({value:e,label:e}),this.currentSchema(e)}return""},this),this.connectionTypeChangedHandler=e=>{this.onConnectionTypeChanged()},this.tnsLocationChangeHandler=e=>{this.updatingUi||(this.isCreate&&this.tnsAlias(""),this.tnsAdminLocation()&&this.getTNSNames(this.tnsAdminLocation()))},this.onFetchSchemas=(e,t,s)=>{this.currentShcmeaFieldHasFocus=!0;try{if(this.isFetchSchemasInProgress())return;let e=this.areAllPropertiesToCreateConnectionAvailable();if(!e)return this.currentSchemas.removeAll(),void(this.lastSchemasFetchInfo=void 0);let t=this.getConnectionProperties();if(this.lastSchemasFetchInfo){let[s,n,i]=this.compareProfiles(this.lastSchemasFetchInfo[0],t);e=i}e&&(this.lastSchemasFetchInfo=[t,!1],this.getSchemas(t))}catch(e){i.DataAccessService.instance.logError(e)}},this.onBrowseTNSLocation=(e,t,s)=>{this.browseFrom="tns",this.onBrowse()},this.onBrowseWalletFileLocation=(e,t,s)=>{this.browseFrom="wallet",this.onBrowse()},this.onBrowseLoginScript=(e,t,s)=>{this.browseFrom="login",this.onBrowseLogin()},this.onRawValueChanged=e=>{e.currentTarget.value=e.detail.value},this.updateUserId=e=>{e.currentTarget.value=this.convertToOracleCase(e.currentTarget.value)},this.updateProxyUserId=e=>{e.currentTarget.value=this.convertToOracleCase(e.currentTarget.value)},this.updateCurrentSchemaToOracleCase=e=>{this.currentShcmeaFieldHasFocus=!1;let t=this.currentSchema();t&&this.currentSchemasList.indexOf(t)<0&&this.currentSchema(this.convertToOracleCase(t))},this.onCreateUpdateConnection=(e,t,s)=>{try{i.DataAccessService.instance.logInfo("Start creating or updating connection"),this.isConnectionInProgress(!0);let e=this.getConnectionProperties();this.saveProfile(e)}catch(e){i.DataAccessService.instance.logError(e)}},this.onCopyEasyConnectString=(e,t,s)=>{try{this.ezConnectString()&&this.copyToClipBoard(this.ezConnectString())}catch(e){i.DataAccessService.instance.logError(e)}},this.updatingUi=!1,this.connectionNameKeyPressHandler=()=>!1,this.themeFileId="ThemeCss",this.themeColorFileId="ThemeColor",this.customThemeTag="customTheme",this.messageHandlersField=new Map,this.databaseType=t.observable(n.DatabaseType.NormalDatabase),this.onThemeChanged=e=>{i.DataAccessService.instance.logInfo("Theme Changed"),c.setContrast()},this.currentShcmeaFieldHasFocus=!1,this.onCurrentSchemaValueChanged=e=>{this.updateCurrentSchemaOnUpdatingUserId&&this.currentShcmeaFieldHasFocus&&(this.updateCurrentSchemaOnUpdatingUserId=!1)},r=this,this.messageHandlers.set(s.MessageName.themeChanged,r.onThemeChanged),this.messageHandlers.set(s.MessageName.odtConfigChanged,r.onConfigChanged),this.messageHandlers.set(s.MessageName.getProfileResponse,e=>{this.handleGetProfileResponse(e)}),this.messageHandlers.set(s.MessageName.getConfigFileLocationsResponse,e=>{this.handleGetTNSNamesLocationResponse(e)}),this.messageHandlers.set(s.MessageName.getTNSNamesResponse,e=>{this.handleGetTNSNamesResponse(e)}),this.messageHandlers.set(s.MessageName.saveProfileResponse,e=>{this.handleSaveProfileResponse(e)}),this.messageHandlers.set(s.MessageName.browseReponse,e=>{this.handleBrowseResponse(e)}),this.messageHandlers.set(s.MessageName.getAllProfieNamesResponse,e=>{this.handleGetAllProfileNamesResponse(e)}),this.messageHandlers.set(s.MessageName.getSchemasResponse,e=>{this.handleGetSchemasResponse(e)}),this.messageHandlers.set(s.MessageName.getUserPreferencesRequest,e=>{this.handlegetUserPreferencesResponse(e)}),this.messageHandlers.set(s.MessageName.connectionHelpResponse,e=>{this.handleConnectionHelpResponse(e)}),i.DataAccessService.instance.subscribe(e=>{if(e&&this.messageHandlers.get(e.type)){const t=this.messageHandlers.get(e.type);t&&t(e)}else i.DataAccessService.instance.logError("Could not find handler for message "+e.type)}),i.DataAccessService.instance.logInfo("Fetching Localized resources "),i.DataAccessService.instance.getLocalizedData().done(e=>{i.DataAccessService.instance.logInfo("Fetched localized resources."),a.LocalizedConstants.Instance.Configure(e),this.connInfoPlaceHodlerTexts=new p,this.connectionUILabelTexts=new m}).fail(e=>{i.DataAccessService.instance.logError("Localized resources "+JSON.stringify(e))}),this.initialize(),c.setContrast(),e&&2==e.newConnectionUIToDisplay&&(this.uiLaunchedFromADBInstace=!0,this.tnsAdminLocation(e.path),this.walletFileLocation(e.path),this.enableWalletFile(!0),this.connectionType(e.connectionType),e.tnsName&&(this.tnsAliasFromTLSAuthentication=e.tnsName),e.connectionString&&e.connectionString.length>0&&this.ezConnectPlusString(e.connectionString),this.onConnectionTypeChanged(),this.uiHeaderText(a.LocalizedConstants.Instance.createADBConnectionCaption))}handleConnectionHelpResponse(e){i.DataAccessService.instance.logInfo("Received HelpResponse");try{const t=e.data;t.result||(o.MessagesService.getinstance().ClearAll(),o.MessagesService.getinstance().ShowMessage(t.resultMsg)),i.DataAccessService.instance.logInfo(t.resultMsg)}catch(e){i.DataAccessService.instance.logError(e)}}computeConnectionName(){let e="",t=!1;switch(this.connectionType()){case s.ConnectionType.DataSource:{let t=this.useProxyAuthentication()?this.proxyUserId():this.userId();e=this.getConnectionName(t,this.dbServiceName())}break;case s.ConnectionType.TNS:{let t=this.useProxyAuthentication()?this.proxyUserId():this.userId();e=this.getConnectionName(t,this.tnsAlias())}break;case s.ConnectionType.Advanced:e=this.useProxyAuthentication()?this.proxyUserId().trim():this.userId().trim(),t=!0;break;case s.ConnectionType.ODPConnectionString:e="Connection",t=!0}if(e){let s=e,n=1,i=!1;for(;!i;)this.existingProfiles.indexOf(e)>-1||t?(e=s+"."+n++,t=!1):i=!0}return this.isCreate&&this.connectionNameParsed(e),e}getConnectionName(e,t){let s="",n=e.trim(),i=t.trim();return this.osAuthentication()||this.osProxyAuthentication()?s=this.osUser:n&&(s=n),i&&(s&&(s+="."),s+=i),s}areAllPropertiesToCreateConnectionAvailable(){let e=!1;switch(this.connectionType()){case s.ConnectionType.DataSource:(this.dbHostName().trim()&&this.dbPortNum().trim()&&this.dbServiceName().trim()||this.isFailedToParseDS())&&this.isUserInfoEntered()&&this.connectionNameParsed().trim()&&(!this.useProxyAuthentication()||this.proxyUserId().trim())&&(e=!0);break;case s.ConnectionType.TNS:this.tnsAdminLocation().trim()&&this.tnsAlias().trim()&&this.isUserInfoEntered()&&(!this.enableWalletFile()||this.walletFileLocation().trim())&&this.connectionNameParsed().trim()&&(!this.useProxyAuthentication()||this.proxyUserId().trim())&&(e=!0);break;case s.ConnectionType.ODPConnectionString:this.odpnetConnString().trim()&&this.connectionNameParsed().trim()&&(e=!0);break;case s.ConnectionType.Advanced:this.ezConnectPlusString().trim()&&this.connectionNameParsed().trim()&&this.isUserInfoEntered()&&(e=!0)}return e}isUserInfoEntered(){return!(!this.userId().trim()||!(this.password()||this.osAuthentication()||this.useProxyAuthentication())||this.useProxyAuthentication()&&!this.proxyUserId().trim()||this.useProxyAuthentication()&&!this.proxyPassword()&&!this.osProxyAuthentication())}get messagesDataprovider(){return o.MessagesService.getinstance().messagesDataproviderField}onConnectionTypeChanged(){if(!this.updatingUi&&this.connectionType())switch(this.connectionType()){case s.ConnectionType.DataSource:break;case s.ConnectionType.TNS:this.tnsAdminLocation()?this.getTNSNames(this.tnsAdminLocation()):this.getTNSLocations();break;case s.ConnectionType.Advanced:case s.ConnectionType.ODPConnectionString:}}getTNSLocations(){const e=new s.MessageBase;e.type=s.MessageName.getConfigFileLocationsRequest;const t=new s.GetConfigFileLocationsRequest;t.executionId=i.DataAccessService.instance.currentExecutionId,t.ownerUri=i.DataAccessService.instance.URI,t.windowUri=i.DataAccessService.instance.windowUri,e.data=t;try{i.DataAccessService.instance.send(e),i.DataAccessService.instance.logInfo("Successfully placed GetConfigFileLocationsRequest")}catch(e){i.DataAccessService.instance.logError(e)}}handleGetTNSNamesLocationResponse(e){i.DataAccessService.instance.logInfo("Received GetConfigFileLocationsResponse"),this.tnsAdminLocation(""),this.tnsAliases.removeAll(),this.isCreate&&this.tnsAlias("");try{const t=e.data;t.tnsLocation?this.tnsAdminLocation(t.tnsLocation):this.isCreate&&this.userPreferences&&this.userPreferences.connectionProperties&&this.userPreferences.connectionProperties.tnsAdminLocation&&this.tnsAdminLocation(this.userPreferences.connectionProperties.tnsAdminLocation),t.walletLocation?this.walletFileLocation(t.walletLocation):this.isCreate&&this.userPreferences&&this.userPreferences.connectionProperties&&this.userPreferences.connectionProperties.walletFileLocation&&this.walletFileLocation(this.userPreferences.connectionProperties.walletFileLocation)}catch(e){i.DataAccessService.instance.logError(e)}}getTNSNames(e){if(e){const t=new s.MessageBase;t.type=s.MessageName.getTNSNamesRequest;const n=new s.GetTNSNamesRequest;n.executionId=i.DataAccessService.instance.currentExecutionId,n.ownerUri=i.DataAccessService.instance.URI,n.windowUri=i.DataAccessService.instance.windowUri,n.location=e,t.data=n;try{i.DataAccessService.instance.send(t),i.DataAccessService.instance.logInfo("Successfully placed getTNSNamesRequest ")}catch(e){i.DataAccessService.instance.logError(e)}}}handleGetTNSNamesResponse(e){i.DataAccessService.instance.logInfo("Received GetTNSNamesResponse"),this.tnsAliases.removeAll(),this.isCreate&&this.tnsAlias("");try{const t=e.data;if(t.tnsnames&&t.tnsnames.length>0){for(let e=0;e<t.tnsnames.length;e++)this.tnsAliases.push({value:t.tnsnames[e],label:t.tnsnames[e]});this.tnsAliasFromTLSAuthentication&&this.tnsAliasFromTLSAuthentication.length>0?this.tnsAlias(this.tnsAliasFromTLSAuthentication):!this.isCreate&&this.profile&&this.profile.dataSource&&this.connectionType()===this.profile.connectionType?this.tnsAlias(this.profile.dataSource):this.isCreate&&this.userPreferences&&this.userPreferences.connectionProperties&&this.userPreferences.connectionProperties.tnsAdminLocation&&this.userPreferences.connectionProperties.tnsAdminLocation===this.tnsAdminLocation()&&this.userPreferences.connectionProperties.tnsAlias&&-1!==t.tnsnames.indexOf(this.userPreferences.connectionProperties.tnsAlias)?this.tnsAlias(this.userPreferences.connectionProperties.tnsAlias):this.tnsAlias(t.tnsnames[0])}}catch(e){i.DataAccessService.instance.logError(e)}}compareProfiles(e,t){if(!e||!t)return[!1,!1,!1];let n=e.name!==t.name,i=e.currentSchema!==t.currentSchema,o=!1;switch(this.connectionType()){case s.ConnectionType.DataSource:o=e.databaseHostName!==t.databaseHostName||e.databasePortNumber!==t.databasePortNumber||e.databaseServiceName!==t.databaseServiceName||e.dataSource!==t.dataSource||e.loginScript!==t.loginScript||e.dBAPrivilege!==t.dBAPrivilege||e.proxyUserID!==t.proxyUserID||!this.isPasswordEqual(e.proxyPassword,t.proxyPassword)||e.passwordSaved!==t.passwordSaved||e.userID!==t.userID||!this.isPasswordEqual(e.password,t.password);break;case s.ConnectionType.TNS:o=e.tnsAdmin!==t.tnsAdmin||e.dataSource!==t.dataSource||e.walletLocation!==t.walletLocation||e.loginScript!==t.loginScript||e.dBAPrivilege!==t.dBAPrivilege||e.proxyUserID!==t.proxyUserID||!this.isPasswordEqual(e.proxyPassword,t.proxyPassword)||e.passwordSaved!==t.passwordSaved||e.userID!==t.userID||!this.isPasswordEqual(e.password,t.password);break;case s.ConnectionType.Advanced:o=e.dataSource!==t.dataSource||e.dBAPrivilege!==t.dBAPrivilege||e.proxyUserID!==t.proxyUserID||e.loginScript!==t.loginScript||!this.isPasswordEqual(e.proxyPassword,t.proxyPassword)||e.passwordSaved!==t.passwordSaved||e.userID!==t.userID||!this.isPasswordEqual(e.password,t.password);break;case s.ConnectionType.ODPConnectionString:o=e.connectionString!==t.connectionString}return[n,i,o]}isPasswordEqual(e,t){let s=!0;if(e&&t){for(let n=0;n<e.length;n++)if(e[n]!==t[n]){s=!1;break}e.length!=t.length&&(s=!1)}else(!t&&e||t&&!e)&&(s=!1);return s}getSchemas(e){this.currentSchemas.removeAll(),this.isFetchSchemasInProgress(!0);const t=new s.MessageBase;t.type=s.MessageName.getSchemasRequest;const n=new s.GetSchemasRequest;n.executionId=i.DataAccessService.instance.currentExecutionId,n.ownerUri=i.DataAccessService.instance.URI,n.windowUri=i.DataAccessService.instance.windowUri,n.profile=e,t.data=n;try{i.DataAccessService.instance.send(t),i.DataAccessService.instance.logInfo("Successfully placed getSchemas request ")}catch(e){this.isFetchSchemasInProgress(!1),i.DataAccessService.instance.logError(e)}}handleGetSchemasResponse(e){i.DataAccessService.instance.logInfo("Received GetSchemasResponse");try{const t=e.data;if(t.result&&this.lastSchemasFetchInfo&&(this.lastSchemasFetchInfo[1]=!0),t.schemas&&t.schemas.length>0){this.currentSchemasList=t.schemas;for(let e=0;e<t.schemas.length;e++)this.currentSchemas.push({value:t.schemas[e],label:t.schemas[e]});let e=this.lastSchemasFetchInfo?this.lastSchemasFetchInfo[0].currentSchema:void 0;!e&&t.schemas.length>0&&(this.authenticationType()!==d.AdminSYSDBA&&this.authenticationType()!==d.AdminSYSOPER||(e=h.strSYS),e||(e=this.lastSchemasFetchInfo[0].userID),!e&&t.userIdUsedToConnect&&(e=t.userIdUsedToConnect),e&&(e=this.convertToOracleCase(e),e.length>2&&e.startsWith('"')&&e.endsWith('"')&&(e=e.substring(1,e.length-1)))),e&&t.schemas&&-1!==t.schemas.indexOf(e)?this.currentSchema(e):t.schemas.length>0&&this.currentSchema(t.schemas[0])}}catch(e){i.DataAccessService.instance.logError(e)}finally{this.isFetchSchemasInProgress(!1)}}onBrowse(){const e=new s.MessageBase;e.type=s.MessageName.browseRequest;const t=new s.BrowseRequest;t.executionId=i.DataAccessService.instance.currentExecutionId,t.ownerUri=i.DataAccessService.instance.URI,t.windowUri=i.DataAccessService.instance.windowUri;let n="";switch(this.browseFrom){case"tns":n=this.tnsAdminLocation();break;case"wallet":n=this.walletFileLocation()}t.path=n,e.data=t;try{i.DataAccessService.instance.send(e),i.DataAccessService.instance.logInfo("Successfully placed BrowseRequest")}catch(e){i.DataAccessService.instance.logError(e)}}onBrowseLogin(){const e=new s.MessageBase;e.type=s.MessageName.browseLoginRequest;const t=new s.BrowseRequest;t.executionId=i.DataAccessService.instance.currentExecutionId,t.ownerUri=i.DataAccessService.instance.URI,t.windowUri=i.DataAccessService.instance.windowUri;let n=this.loginScript();t.path=n,e.data=t;try{i.DataAccessService.instance.send(e),i.DataAccessService.instance.logInfo("Successfully placed BrowseRequest for login script")}catch(e){i.DataAccessService.instance.logError(e)}}handleBrowseResponse(e){i.DataAccessService.instance.logInfo("Received BrowseResponse");try{const t=e.data;if(this.browseFrom&&t&&t.path)switch(this.browseFrom){case"tns":this.tnsAdminLocation(t.path);break;case"wallet":this.walletFileLocation(t.path);break;case"login":this.loginScript(t.path)}}catch(e){i.DataAccessService.instance.logError(e)}}getConnectionProperties(){let e={};if(this.connectionType()!==s.ConnectionType.ODPConnectionString){switch(this.authenticationType()){case d.NonAdmin:e.authenticationType=s.ConnectionAuthenticationType.NonAdmin,e.dBAPrivilege=h.strNone;break;case d.AdminSYSDBA:e.authenticationType=s.ConnectionAuthenticationType.Admin,e.dBAPrivilege=h.strSYSDBA;break;case d.AdminSYSOPER:e.authenticationType=s.ConnectionAuthenticationType.Admin,e.dBAPrivilege=h.strSYSOPER}e.userID=this.convertToOracleCase(this.userId().trim()),e.passwordSaved=this.savePassword(),"/"!==e.userID&&(e.password=c.toCodePointArray(this.password())),this.useProxyAuthentication()&&(e.password&&(e.proxyAuthByPassword=!0),e.password=c.toCodePointArray(this.password()),e.proxyUserID=this.convertToOracleCase(this.proxyUserId().trim()),"/"!==e.proxyUserID&&(e.proxyPassword=c.toCodePointArray(this.proxyPassword())))}switch(this.connectionType()){case s.ConnectionType.DataSource:e.dataSource=this.ezConnectString().trim(),e.connectionType=s.ConnectionType.DataSource,e.connectionType=s.ConnectionType.DataSource,e.databaseHostName=this.dbHostName().trim(),e.databasePortNumber=this.dbPortNum().trim(),e.databaseServiceName=this.dbServiceName().trim();break;case s.ConnectionType.TNS:e.dataSource=this.tnsAlias().trim(),e.connectionType=s.ConnectionType.TNS,e.connectionType=s.ConnectionType.TNS,e.tnsAdmin=this.tnsAdminLocation().trim(),this.enableWalletFile()&&(e.walletLocation=this.walletFileLocation().trim());break;case s.ConnectionType.Advanced:e.dataSource=this.ezConnectPlusString().trim(),e.connectionType=s.ConnectionType.DataSource,e.connectionType=s.ConnectionType.Advanced;break;case s.ConnectionType.ODPConnectionString:e.connectionString=this.odpnetConnString().trim(),e.connectionType=s.ConnectionType.DataSource,e.connectionType=s.ConnectionType.ODPConnectionString}return e.name=this.connectionNameParsed().trim(),this.loginScript()&&(e.loginScript=this.loginScript().trim()),e.currentSchema=this.currentSchema()?this.currentSchema().trim():"",e}saveProfile(e){const t=new s.MessageBase;t.type=s.MessageName.saveProfileRequest;const n=new s.SaveProfileRequest;if(n.ownerUri=i.DataAccessService.instance.URI,n.executionId=i.DataAccessService.instance.currentExecutionId,this.isCreate)n.saveProfileType=s.SaveProfileType.create,n.setDefaultConnection=this.setasDefault();else{let[t,i,o]=this.compareProfiles(this.profile,e);t?(n.oldConnectionName=this.oldConnectionName,n.saveProfileType=i||o?s.SaveProfileType.renameAndUpdate:s.SaveProfileType.rename):n.saveProfileType=i||o?s.SaveProfileType.update:s.SaveProfileType.setDefConnection,this.isDefaultConnection!==this.setasDefault()&&(this.setasDefault()?n.setDefaultConnection=!0:n.unsetDefaultConnection=!0)}n.windowUri=i.DataAccessService.instance.windowUri,n.documentUri=i.DataAccessService.instance.documentUri,n.profile=e,n.connectionUniqueId=this.updatingConnectionUniqueId,t.data=n;try{i.DataAccessService.instance.send(t),i.DataAccessService.instance.logInfo("Successfully placed SaveProfileRequest")}catch(e){i.DataAccessService.instance.logError(e)}}handleSaveProfileResponse(e){try{i.DataAccessService.instance.logInfo("Received SaveProfileResponse");const t=e.data;t&&t.result&&(this.isCreate?(this.userId(""),this.password(""),this.proxyUserId(""),this.proxyPassword(""),this.getAllProfileNames(),i.DataAccessService.instance.URI="",i.DataAccessService.instance.documentUri="",this.currentSchemas.removeAll(),this.currentSchema(""),this.lastSchemasFetchInfo=void 0,this.loginScript(""),this.isDefaultConnection=this.setasDefault()):(this.oldConnectionName=t.profile.name,this.connectionNameParsed(""),this.updateUiFromProfile(t.profile,this.setasDefault()),this.getAllProfileNames(),this.udpateUIHeaderText(),this.createUpdateButtonDisabled(!1)))}catch(e){i.DataAccessService.instance.logError(e)}finally{this.isConnectionInProgress(!1)}i.DataAccessService.instance.logInfo("End creating or updating connection")}handleGetAllProfileNamesResponse(e){i.DataAccessService.instance.logInfo("Received GetAllProfieNamesResponse");const t=e.data;if(this.existingProfiles=[],t){if(t.profiles&&t.profiles.length>0)for(let e=0;e<t.profiles.length;e++)this.existingProfiles.push(t.profiles[e]);this.osUser=t.osUser,this.computeConnectionName()}}getAllProfileNames(){const e=new s.MessageBase;e.type=s.MessageName.getAllProfieNamesRequest;const t=new s.GetAllProfieNamesRequest;t.executionId=i.DataAccessService.instance.currentExecutionId,t.ownerUri=i.DataAccessService.instance.URI,t.windowUri=i.DataAccessService.instance.windowUri,e.data=t;try{i.DataAccessService.instance.send(e),i.DataAccessService.instance.logInfo("Successfully placed get tns locationsrequest ")}catch(e){i.DataAccessService.instance.logError(e)}}copyToClipBoard(e){const t=document.createElement("textarea");t.value=e,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}initialize(){try{if(i.DataAccessService.instance.logInfo("Start initializing"),this.isCreate="true"===i.DataAccessService.instance.getElementValue("isCreate"),this.creatingNewConnection(this.isCreate),this.getAllProfileNames(),this.isCreate)this.createUpdateButtonText(this.connectionUILabelTexts.createButtonLabel),this.dbPortNum(h.defaultDBPortNo),this.getUserPreferences();else{const e=i.DataAccessService.instance.getElementValue("profileName");this.createUpdateButtonText(this.connectionUILabelTexts.UpdateButtonLabel),this.getProfile(e),this.oldConnectionName=e}this.udpateUIHeaderText(),i.DataAccessService.instance.logInfo("End initializing")}catch(e){i.DataAccessService.instance.logError(e)}}getProfile(e){const t=new s.MessageBase;t.type=s.MessageName.getProfileRequest;const n=new s.GetProfileRequest;n.executionId=i.DataAccessService.instance.currentExecutionId,n.ownerUri=i.DataAccessService.instance.URI,n.profileName=e,n.windowUri=i.DataAccessService.instance.windowUri,t.data=n;try{i.DataAccessService.instance.send(t),i.DataAccessService.instance.logInfo("Successfully placed GetProfileRequest")}catch(e){i.DataAccessService.instance.logError(e)}}handleGetProfileResponse(e){i.DataAccessService.instance.logInfo("Received GetProfileResponse");try{const t=e.data;let s=t.profile;s&&this.updateUiFromProfile(s,t.defaultConnection),this.updatingConnectionUniqueId=t.connectionUniqueId,this.isDefaultConnection=t.defaultConnection}catch(e){i.DataAccessService.instance.logError(e)}}updateUiFromProfile(e,t){try{switch(this.updatingUi=!0,this.isDefaultConnection=t,this.setasDefault(t),this.updateCurrentSchemaOnUpdatingUserId=this.isCreate||e.connectionType!==s.ConnectionType.ODPConnectionString&&e.userID===e.currentSchema,this.connectionType(e.connectionType),this.connectionNameParsed(e.name),e.currentSchema?this.currentSchemasList.indexOf(e.currentSchema)<0&&(this.currentSchemas.unshift({value:e.currentSchema,label:e.currentSchema}),this.currentSchema(e.currentSchema)):this.currentSchema(""),this.loginScript(e.loginScript),e.connectionType){case s.ConnectionType.DataSource:if(!e.dataSource||e.databaseHostName||e.databasePortNumber||e.databaseServiceName)this.dbHostName(e.databaseHostName),this.dbPortNum(e.databasePortNumber),this.dbServiceName(e.databaseServiceName);else{let t=e.dataSource,s=t.match("^([^:]+):([0-9]+)/(.*$)");s&&4===s.length?(i.DataAccessService.instance.logInfo("Datasource parsed successfully to 3 parts"),this.dbHostName(s[1]),this.dbPortNum(s[2]),this.dbServiceName(s[3])):(i.DataAccessService.instance.logInfo("Failed to parse Datasource to 3 parts"),this.updateConnDataSource=t,this.isFailedToParseDS(!0))}this.updateAuthenticationOptions(e);break;case s.ConnectionType.TNS:this.tnsAdminLocation(e.tnsAdmin),this.tnsAlias(e.dataSource),this.getTNSNames(this.tnsAdminLocation()),this.updateAuthenticationOptions(e),e.walletLocation&&e.walletLocation.length>0&&(this.enableWalletFile(!0),this.walletFileLocation(e.walletLocation));break;case s.ConnectionType.Advanced:this.ezConnectPlusString(e.dataSource),this.updateAuthenticationOptions(e);break;case s.ConnectionType.ODPConnectionString:this.odpnetConnString(e.connectionString)}this.useProxyAuthentication()||this.currentSchema()||this.loginScript()?this.showMoreProps(!0):this.showMoreProps(!1),this.profile=this.getConnectionProperties()}catch(e){i.DataAccessService.instance.logError(e)}finally{this.updatingUi=!1}}updateAuthenticationOptions(e){e.authenticationType===s.ConnectionAuthenticationType.NonAdmin||e.dBAPrivilege===h.strNone?this.authenticationType(d.NonAdmin):e.dBAPrivilege===h.strSYSDBA?this.authenticationType(d.AdminSYSDBA):e.dBAPrivilege===h.strSYSOPER&&this.authenticationType(d.AdminSYSOPER),this.userId(e.userID),this.savePassword(e.passwordSaved),e.proxyUserID?(this.proxyUserId(e.proxyUserID),"/"!==e.userID.trim()&&e.proxyPassword&&this.proxyPassword(String.fromCodePoint(...e.proxyPassword)),e.password&&this.password(String.fromCodePoint(...e.password))):"/"!==e.userID.trim()&&e.password&&this.password(String.fromCodePoint(...e.password))}udpateUIHeaderText(){this.isCreate?this.uiHeaderText(this.connectionUILabelTexts.headerCreate):this.uiHeaderText(this.connectionUILabelTexts.headerUpdate+" '"+this.oldConnectionName+"'")}getUserPreferences(){const e=new s.MessageBase;e.type=s.MessageName.getUserPreferencesRequest;const t=new s.GetUserPreferencesRequest;t.executionId=i.DataAccessService.instance.currentExecutionId,t.ownerUri=i.DataAccessService.instance.URI,t.windowUri=i.DataAccessService.instance.windowUri,e.data=t;try{i.DataAccessService.instance.send(e),i.DataAccessService.instance.logInfo("Successfully placed GetUserPreferencesRequest")}catch(e){i.DataAccessService.instance.logError(e)}}handlegetUserPreferencesResponse(e){i.DataAccessService.instance.logInfo("Received GetUserPreferencesResponse");try{const t=e.data;if(t.result){let e=t.userPreferences;e&&e.connectionProperties&&(this.userPreferences=e,e.connectionProperties.databaseHostName&&this.dbHostName(e.connectionProperties.databaseHostName),e.connectionProperties.databasePortNumber&&this.dbPortNum(e.connectionProperties.databasePortNumber),e.connectionProperties.databaseServiceName&&this.dbServiceName(e.connectionProperties.databaseServiceName),e.connectionProperties.tnsAlias&&this.tnsAlias(e.connectionProperties.tnsAlias),e.connectionProperties.useWalletFile&&!0===e.connectionProperties.useWalletFile&&this.enableWalletFile(!0),e.connectionProperties.loginScript&&this.loginScript(e.connectionProperties.loginScript),e.connectionProperties.advancedConnectionString&&e.connectionProperties.advancedConnectionString.length>0&&(this.uiLaunchedFromADBInstace&&this.ezConnectPlusString&&this.ezConnectPlusString().length>0||this.ezConnectPlusString(e.connectionProperties.advancedConnectionString)),e.connectionProperties.odpnetConnectionString&&e.connectionProperties.odpnetConnectionString.length>0&&this.odpnetConnString(e.connectionProperties.odpnetConnectionString),0==this.uiLaunchedFromADBInstace&&e.connectionProperties.connectionType&&this.connectionType(e.connectionProperties.connectionType))}}catch(e){i.DataAccessService.instance.logError(e)}}get messageHandlers(){return this.messageHandlersField}set messageHandlers(e){
this.messageHandlersField=e}onConfigChanged(e){const t=e.data;i.DataAccessService.instance.updatedConfig(t)}isDark(e){return!(e.themeName.toLowerCase().indexOf(l.customlightThemeFileName)>-1)}setStyleSheet(e,t){document.getElementById(e).setAttribute(l.href,t)}convertToOracleCase(e){let t=!1;return void 0!==e&&"string"==typeof e.valueOf()&&e.length>0&&(e.length>2&&e.startsWith('"')&&e.endsWith('"')&&(t=!0),!t)?e.toUpperCase():e}}h.defaultDBPortNo="1521",h.strYes="yes",h.strNone="None",h.strSYSDBA="SYSDBA",h.strSYSOPER="SYSOPER",h.strSYS="SYS";class l{}var d;l.themeWhite="white",l.customlightThemeFileName="light",l.themeNameDark="black",l.customDarkThemeFileName="dark",l.href="href",function(e){e[e.NonAdmin=1]="NonAdmin",e[e.AdminSYSDBA=2]="AdminSYSDBA",e[e.AdminSYSOPER=3]="AdminSYSOPER"}(d||(d={}));class u{constructor(){this.connectionType=!1,this.dbHostName=!0,this.dbPortNum=!0,this.dbServiceName=!0,this.ezConnectString=!1,this.ezConnectPlusString=!0,this.tnsAdminLocation=!0,this.tnsAlias=!0,this.walletFileLocation=!0,this.odpnetConnString=!0,this.authenticationType=!1,this.userId=!0,this.password=!0,this.proxyUserId=!1,this.proxyPassword=!0,this.savePassword=!0,this.connectionName=!0,this.currentSchema=!1,this.loginScript=!1}}class p{constructor(){this.dbHostName=a.LocalizedConstants.Instance.connUIPlaceHolderDbHostName,this.dbPortNum=a.LocalizedConstants.Instance.connUIPlaceHolderDbPortNum,this.dbServiceName=a.LocalizedConstants.Instance.connUIPlaceHolderDbServiceName,this.ezConnectString=a.LocalizedConstants.Instance.connUIPlaceHolderEzConnectString,this.ezConnectPlusString=a.LocalizedConstants.Instance.connUIPlaceHolderEzConnectPlusString,this.tnsAdminLocation=a.LocalizedConstants.Instance.connUIPlaceHolderTnsAdminLocation,this.walletFileLocation=a.LocalizedConstants.Instance.connUIPlaceHolderWalletFileLocation,this.tnsAlias=a.LocalizedConstants.Instance.connUIPlaceHolderTnsAlias,this.odpnetConnString=a.LocalizedConstants.Instance.connUIPlaceHolderOdpnetConnString,this.userId=a.LocalizedConstants.Instance.connUIPlaceHolderUserId,this.connectionName=a.LocalizedConstants.Instance.connUIPlaceHolderConnectionName,this.proxyUserId=a.LocalizedConstants.Instance.connUIPlaceHolderProxyUserId,this.loginScript=a.LocalizedConstants.Instance.connUIPlaceHolderLoginScript}}class m{constructor(){this.headerCreate=a.LocalizedConstants.Instance.connUITextHeaderCreate,this.headerUpdate=a.LocalizedConstants.Instance.connUITextHeaderUpdate,this.connectionTypeEasyConnect=a.LocalizedConstants.Instance.connUITextConnectionTypeEasyConnect,this.connectionTypeTNS=a.LocalizedConstants.Instance.connUITextConnectionTypeTNS,this.connectionTypeEasyConnectPlus=a.LocalizedConstants.Instance.connUITextConnectionTypeEasyConnectPlus,this.connectionTypeODPConnectString=a.LocalizedConstants.Instance.connUITextConnectionTypeODPConnectString,this.connectionTypeLabel=a.LocalizedConstants.Instance.connUITextConnectionTypeLabel,this.dbHostNameLabel=a.LocalizedConstants.Instance.connUITextDbHostNameLabel,this.dbPortNumLabel=a.LocalizedConstants.Instance.connUITextDbPortNumLabel,this.dbServiceNameLabel=a.LocalizedConstants.Instance.connUITextDbServiceNameLabel,this.ezConnectStringLabel=a.LocalizedConstants.Instance.connUITextEzConnectStringLabel,this.ezConnectPlusStringLabel=a.LocalizedConstants.Instance.connUITextEzConnectPlusStringLabel,this.copyConnectionString=a.LocalizedConstants.Instance.connUITextCopyConnectionString,this.tnsAdminLocationLabel=a.LocalizedConstants.Instance.connUITextTnsAdminLocationLabel,this.browse=a.LocalizedConstants.Instance.connUITextBrowse,this.tnsAliasLabel=a.LocalizedConstants.Instance.connUITextTnsAliasLabel,this.enableWalletFileLocationLabel=a.LocalizedConstants.Instance.connUITextEnableWalletFileLocationLabel,this.walletFileLocationLabel=a.LocalizedConstants.Instance.connUITextWalletFileLocationLabel,this.odpnetConnStringLabel=a.LocalizedConstants.Instance.connUITextOdpnetConnStringLabel,this.authenticationTypeLabel=a.LocalizedConstants.Instance.connUITextAuthenticationTypeLabel,this.authTypeNonAdmin=a.LocalizedConstants.Instance.connUITextAuthTypeNonAdmin,this.authTypeAdminSysdba=a.LocalizedConstants.Instance.connUITextAuthTypeAdminSysdba,this.authTypeAdminSysoper=a.LocalizedConstants.Instance.connUITextAuthTypeAdminSysoper,this.userIdLabel=a.LocalizedConstants.Instance.connUITextUserIdLabel,this.proxyUserIdLabel=a.LocalizedConstants.Instance.connUITextProxyUserIdLabel,this.passwordLabel=a.LocalizedConstants.Instance.connUITextServerNameLabel,this.proxyPasswordLabel=a.LocalizedConstants.Instance.connUITextProxyServerNameLabel,this.savePasswordLabel=a.LocalizedConstants.Instance.connUITextSaveServerNameLabel,this.connectionNameLabel=a.LocalizedConstants.Instance.connUITextConnectionNameLabel,this.createButtonLabel=a.LocalizedConstants.Instance.connUITextCreateButtonLabel,this.UpdateButtonLabel=a.LocalizedConstants.Instance.connUITextUpdateButtonLabel,this.osAuthenticationLabel=a.LocalizedConstants.Instance.osAuthenticationLabel,this.currentSchemaLabel=a.LocalizedConstants.Instance.currentSchemaLabel,this.userLabel=a.LocalizedConstants.Instance.userLabel,this.proxyUserLabel=a.LocalizedConstants.Instance.proxyUserLabel,this.showMoreOptionsLabel=a.LocalizedConstants.Instance.showMoreOptionsLabel,this.requiredText=" *",this.loginScriptLabel=a.LocalizedConstants.Instance.connUITextLoginScriptLabel,this.helpLabel=a.LocalizedConstants.Instance.connUIHelpLabel,this.setasDefaultLabel=a.LocalizedConstants.Instance.setasDefaultConnection}}return h}));