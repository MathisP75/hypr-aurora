define(["require","exports","knockout","../common/scriptExecutionModels","../common/dataAccessService","../utilities","../common/localizedConstants","../common/messageService","ojs/ojbutton","ojs/ojknockout","ojs/ojinputtext","ojs/ojformlayout","ojs/ojlabel","ojs/ojselectcombobox","ojs/ojmessage","ojs/ojmessages","ojs/ojprogress","ojs/ojprogress-circle","ojs/ojinputnumber"],(function(require,e,s,t,n,a,i,r){"use strict";class c{constructor(){this.debuggerSettingsTitle=i.LocalizedConstants.Instance.debuggerSettingsTitle,this.debuggerSettingsSubTitle=i.LocalizedConstants.Instance.compilerDebuggerSettingsSubTitle,this.hostIPAddress=i.LocalizedConstants.Instance.hostIPAddress,this.startPortNumber=i.LocalizedConstants.Instance.startPortNumber,this.endPortNumber=i.LocalizedConstants.Instance.endPortNumber,this.save=i.LocalizedConstants.Instance.saveBtnLabel,this.copy=i.LocalizedConstants.Instance.connUITextCopyConnectionString,this.sampleCodeDescription=i.LocalizedConstants.Instance.grantDebugPrivsSampleDescription,this.sampleCode="-- Connect as SYSDBA\nconnect sys/<password>@<datasource> as sysdba\n\n-- Grant debug privileges to user\nGRANT DEBUG CONNECT SESSION TO <username>;\nGRANT DEBUG ANY PROCEDURE TO <username>;\n\n-- Set up ACL to allow the database to connect back to Visual Studio Code\n-- IP address and ports are those used for debugging on local VS Code machine\n-- This needs to be done once for the machine.\nBEGIN\n  DBMS_NETWORK_ACL_ADMIN.APPEND_HOST_ACE(\n  HOST => '<ip address>',\n  LOWER_PORT => <starting port number>,\n  UPPER_PORT => <ending port number>,\n  ACE => XS$ACE_TYPE(PRIVILEGE_LIST => XS$NAME_LIST('jdwp'),\n    PRINCIPAL_NAME =>'<username>',\n    PRINCIPAL_TYPE => XS_ACL.PTYPE_DB));\nEND;\n/"}}return class{constructor(e){this.labelTexts=new c,this.ipAddresses=s.observableArray(),this.ipAddress=s.observable(),this.startPort=s.observable(),this.endPort=s.observable(),this.isSaving=s.observable(!1),this.messageHandlersField=new Map,this.onRawValueChanged=e=>{e.currentTarget.value=e.detail.value},this.onThemeChanged=()=>{n.DataAccessService.instance.logInfo("Theme Changed"),a.setContrast()},this.saveButtonDisabled=s.computed(()=>{let e=!1;try{let s=this.isSaving(),t=this.ipAddress(),n=+this.startPort(),a=+this.endPort();if(s)return!0;this.debugSettings&&t&&n&&a&&(this.debugSettings.ipAddress!==t||this.debugSettings.startPort!==n||this.debugSettings.endPort!==a)&&(e=!0)}catch(e){n.DataAccessService.instance.logInfo("Error in saveButtonDisabled processing"),n.DataAccessService.instance.logError(e)}return!e},this),this.onSaveSettings=()=>{n.DataAccessService.instance.logInfo("Saving debugger settings ...");try{if(!this.validateSettings())return void n.DataAccessService.instance.logInfo("Validationg of settings failed");this.isSaving(!0);const e=new t.SaveDebuggerSettingsRequest,s=new t.MessageBase;s.type=t.MessageName.saveDebuggerSettingsRequest,e.executionId=n.DataAccessService.instance.currentExecutionId,e.ownerUri=n.DataAccessService.instance.URI,e.windowUri=n.DataAccessService.instance.windowUri;let a=new t.DebugSettings;a.ipAddress=this.ipAddress(),a.startPort=+this.startPort(),a.endPort=+this.endPort(),e.debugSettings=a,s.data=e,n.DataAccessService.instance.send(s),n.DataAccessService.instance.logInfo("Successfully placed save debugger settings request ")}catch(e){n.DataAccessService.instance.logInfo("Error in saving settings"),n.DataAccessService.instance.logError(e)}},this.validatePortNumInput=e=>{/^[0-9]$/i.test(e.key)||e.preventDefault()},this.onCopySampleCode=(e,s,t)=>{try{a.copyToClipBoard(this.labelTexts.sampleCode)}catch(e){n.DataAccessService.instance.logError(e)}},this.moduleName=e.moduleName,this.messageHandlers.set(t.MessageName.themeChanged,this.onThemeChanged),this.messageHandlers.set(t.MessageName.odtConfigChanged,this.onConfigChanged),this.messageHandlers.set(t.MessageName.getDebuggerSettingsResponse,e=>{this.handleGetDebuggerSettingsResponse(e)}),this.messageHandlers.set(t.MessageName.saveDebuggerSettingsResponse,e=>{this.handleSaveDebuggerSettingsResponse(e)}),n.DataAccessService.instance.subscribe(e=>{if(e&&this.messageHandlers.get(e.type)){const s=this.messageHandlers.get(e.type);s&&s(e)}else n.DataAccessService.instance.logError("Could not find handler for message "+e.type)}),n.DataAccessService.instance.logInfo("Fetching Localized resources "),n.DataAccessService.instance.getLocalizedData().done(e=>{n.DataAccessService.instance.logInfo("Fetched localized resources."),i.LocalizedConstants.Instance.Configure(e)}).fail(e=>{n.DataAccessService.instance.logError("Localized resources "+JSON.stringify(e))}),this.initialize(),a.setContrast()}get messageHandlers(){return this.messageHandlersField}set messageHandlers(e){this.messageHandlersField=e}initialize(){n.DataAccessService.instance.logInfo("Start initializing debuggerSettingsModule"),r.MessagesService.getinstance().ClearAll();const e=new t.MessageBase;e.type=t.MessageName.getDebuggerSettingsRequest;const s=new t.GetDebuggerSettingsRequest;s.executionId=n.DataAccessService.instance.currentExecutionId,s.ownerUri=n.DataAccessService.instance.URI,s.windowUri=n.DataAccessService.instance.windowUri,e.data=s;try{n.DataAccessService.instance.send(e),n.DataAccessService.instance.logInfo("Successfully placed get debugger settings request ")}catch(e){n.DataAccessService.instance.logError(e)}n.DataAccessService.instance.logInfo("End initializing debuggerSettingsModule")}onConfigChanged(e){const s=e.data;n.DataAccessService.instance.updatedConfig(s)}handleGetDebuggerSettingsResponse(e){n.DataAccessService.instance.logInfo("Received GetDebuggerSettingsResponse");try{const s=e.data;if(this.ipAddresses.removeAll(),s.ipAddresses&&s.ipAddresses.length>0)for(let e=0;e<s.ipAddresses.length;e++)this.ipAddresses.push({value:s.ipAddresses[e],label:s.ipAddresses[e]});this.ipAddress(s.debugSettings.ipAddress),this.startPort(s.debugSettings.startPort),this.endPort(s.debugSettings.endPort),this.debugSettings=s.debugSettings}catch(e){n.DataAccessService.instance.logInfo("Error on processing GetDebuggerSettingsResponse"),n.DataAccessService.instance.logError(e)}n.DataAccessService.instance.logInfo("Processed GetDebuggerSettingsResponse")}validateSettings(){n.DataAccessService.instance.logInfo("validateSettings- Start");let e=!1;try{let s=this.ipAddress(),t=+this.startPort(),n=+this.endPort();s&&t&&n&&(t>n?(r.MessagesService.getinstance().ClearAll(),r.MessagesService.getinstance().ShowMessage(i.LocalizedConstants.Instance.portValidationError)):t<1||n<1||t>65535||n>65535?(r.MessagesService.getinstance().ClearAll(),r.MessagesService.getinstance().ShowMessage(i.LocalizedConstants.Instance.portNumberRangeError)):e=!0)}catch(e){n.DataAccessService.instance.logInfo("Error in validating settings"),n.DataAccessService.instance.logError(e)}return n.DataAccessService.instance.logInfo("validateSettings- End"),e}handleSaveDebuggerSettingsResponse(e){n.DataAccessService.instance.logInfo("Received SaveDebuggerSettingsResponse");try{const s=e.data;r.MessagesService.getinstance().ClearAll(),r.MessagesService.getinstance().ShowMessage(s.message),s.saved&&(this.debugSettings=s.debugSettings)}catch(e){n.DataAccessService.instance.logInfo("Error in processing SaveDebuggerSettingsResponse"),n.DataAccessService.instance.logError(e)}finally{this.isSaving(!1)}}}}));