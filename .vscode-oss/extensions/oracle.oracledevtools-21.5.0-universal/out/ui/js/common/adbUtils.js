define(["require","exports","../utilities","knockout","./autonomousDBModels","./localizedConstants"],(function(require,e,t,s,i,d){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.changeCompartmentUIData=e.updateNetworkAccessUIManager=e.aclModuleData=e.aclArrayFormatData=e.adbUtils=void 0;class l{}e.adbUtils=l,l.findNode=(e,t)=>{const i=s.isObservable(e)?e():e;for(let e=0;e<i.length;e+=1){if(i[e].id==t)return i[e];if(i[e].children){const s=l.findNode(i[e].children,t);if(s)return s}}};class a{constructor(){this.ipAddressList=new Array,this.cidrList=new Array,this.vcnOCIDList=new Array,this.vcnList=new Array}populateData(e){for(let s=0;s<e.length;s++){let d=e[s].trim();d.startsWith("ocid")?this.vcnOCIDList.push(new i.vcnOCIDOrVCNData(i.IPNotationTypes.virtualCloudNetworkOCID,d,d)):d.indexOf("/")>=0?this.cidrList.push(d):t.validIPAddress(d)?this.ipAddressList.push(d):this.vcnList.push(new i.vcnOCIDOrVCNData(i.IPNotationTypes.virtualCloudNetwork,d,d))}}}e.aclArrayFormatData=a;class o{constructor(){this.ipAddressList=null,this.cidrList=null,this.vcnOCIDInfo=null,this.vcnDisplayNameInfo=null,this.ipNotationType=i.IPNotationTypes.IPAddress,this.moduleIndex=0,this.moduleId=null,this.errorInModule=!1,this.displayPublicIPAddressButtonHandler=null,this.publicIPAddressHandler=null,this.networkAccessLaunchSource=i.updateNetworkAccessLaunchSource.UnknownValue,this.clickedAddAccessControlButton=!1,this.uniqueIpAddressErrorValueHandler=null}populateData(e,t,s,d){switch(this.ipNotationType=s,this.moduleIndex=e,this.moduleId=t,s){case i.IPNotationTypes.IPAddress:this.ipAddressList=d;break;case i.IPNotationTypes.CIDRBlock:this.cidrList=d;break;case i.IPNotationTypes.virtualCloudNetworkOCID:this.vcnOCIDInfo=d;break;case i.IPNotationTypes.virtualCloudNetwork:this.vcnDisplayNameInfo=d}}}e.aclModuleData=o;e.updateNetworkAccessUIManager=class{constructor(e){this.networkAccess=e,this.initialWhitelistedIpsMap=new Map,this.whitelistedIpsMap=new Map,this.whitelistedIpsInACLRuleModuleMap=new Map,this.getLastIPAddressACLModule=()=>{let e,t;for(let[t,s]of this.whitelistedIpsInACLRuleModuleMap)e=s;return e&&e.ipNotationType==i.IPNotationTypes.IPAddress&&e.publicIPAddressHandler&&(t=e),t},this.addPublicIPAddress=e=>{let t=this.getLastIPAddressACLModule();t&&t.publicIPAddressHandler(e)},this.showPublicIPAddressButtonToLastIPModule=()=>{let e=this.getLastIPAddressACLModule();for(let[e,t]of this.whitelistedIpsInACLRuleModuleMap)t.ipNotationType==i.IPNotationTypes.IPAddress&&t.displayPublicIPAddressButtonHandler&&t.displayPublicIPAddressButtonHandler(!1);e&&e.displayPublicIPAddressButtonHandler&&e.displayPublicIPAddressButtonHandler(!0)},this.index=0,this.ipNotationType=s.observable(i.IPNotationTypes.IPAddress),this.IPNotationChangeHandler=e=>{e.ipNotationType===i.IPNotationTypes.IPAddress&&!t.validIPAddress(e.ipAddressList)||e.ipNotationType===i.IPNotationTypes.CIDRBlock&&!t.validCIDRAddress(e.cidrList)?(e.errorInModule=!0,this.networkAccess.invalidModules.has(e.moduleId)||this.networkAccess.invalidModules.add(e.moduleId)):this.networkAccess.invalidModules.has(e.moduleId)&&this.networkAccess.invalidModules.delete(e.moduleId),this.updateWhitelistedIpsMap(e,this.whitelistedIpsInACLRuleModuleMap),this.networkAccess.updateOKandAddRuleButtons(),this.showPublicIPAddressButtonToLastIPModule(),this.hasWhitelistedMapChanged()||this.networkAccess.disableOkButton(!0)},this.updateACLRuleHandler=(e,t)=>{if(e.errorInModule)e.moduleId&&!this.networkAccess.invalidModules.has(e.moduleId)&&this.networkAccess.invalidModules.add(e.moduleId);else{this.networkAccess.invalidModules.has(e.moduleId)&&this.networkAccess.invalidModules.delete(e.moduleId);let s=this.updateWhitelistedIpsMap(e,this.whitelistedIpsInACLRuleModuleMap);t(e.ipNotationType,s?d.LocalizedConstants.Instance.uniqueIPAddress:"")}this.networkAccess.updateOKandAddRuleButtons(),this.showPublicIPAddressButtonToLastIPModule(),this.hasWhitelistedMapChanged()||this.networkAccess.disableOkButton(!0)},this.updatePublicIPAddressHandler=(e,t)=>{if(this.whitelistedIpsInACLRuleModuleMap.has(e)){let s=this.whitelistedIpsInACLRuleModuleMap.get(e);s.publicIPAddressHandler=t,this.whitelistedIpsInACLRuleModuleMap.set(e,s)}},this.uniqueIpAddressErrorValueHandler=(e,t)=>{if(this.whitelistedIpsInACLRuleModuleMap.has(e)){let s=this.whitelistedIpsInACLRuleModuleMap.get(e);s.uniqueIpAddressErrorValueHandler=t,this.whitelistedIpsInACLRuleModuleMap.set(e,s)}},this.displayPublicIPAddressButtonHandler=(e,t)=>{if(this.whitelistedIpsInACLRuleModuleMap.has(e.moduleId)){let s=this.whitelistedIpsInACLRuleModuleMap.get(e.moduleId);s.publicIPAddressHandler=t,this.whitelistedIpsInACLRuleModuleMap.set(e.moduleId,s)}},this.removeACLRuleHandler=e=>{if(this.whitelistedIpsInACLRuleModuleMap&&1==this.whitelistedIpsInACLRuleModuleMap.size)return;let t=this.getAdjacentACLModule(e);this.removeModuleFromWhitelistedIpsMap(e,this.whitelistedIpsInACLRuleModuleMap);let s=document.getElementById("aclRuleContainerID"),i=document.getElementById(e);if(s.removeChild(i),this.networkAccess.invalidModules.has(e)&&this.networkAccess.invalidModules.delete(e),this.showPublicIPAddressButtonToLastIPModule(),this.updateUniqueIPAddressErrors(e),this.networkAccess.updateOKandAddRuleButtons(),this.hasWhitelistedMapChanged()||this.networkAccess.disableOkButton(!0),t){const e=document.getElementById("ipNotationTypeID"+t.moduleIndex);e&&e.focus()}},this.isIPAddressUnique=e=>(this.updateWhitelistedIpsMap(e,this.whitelistedIpsInACLRuleModuleMap),this.updateUniqueIPAddressErrors(e.moduleId)),this.getAdjacentACLModule=e=>{let t=null,s=!1;for(let[i,d]of this.whitelistedIpsInACLRuleModuleMap)if(i!=e){if(t=d,s)break}else{if(t)break;s=!0}return t}}addIPAddressOrCIDRToList(e,s){let i=t.getListfromCommaSeparatedString(e);i&&i.forEach(e=>{s.push(e)})}getWhitelistedIps(){let e=new Array;for(const[t,s]of this.whitelistedIpsMap)switch(s.ipNotationType){case i.IPNotationTypes.IPAddress:this.addIPAddressOrCIDRToList(s.ipAddressList,e);break;case i.IPNotationTypes.CIDRBlock:this.addIPAddressOrCIDRToList(s.cidrList,e);break;case i.IPNotationTypes.virtualCloudNetwork:e.push(s.vcnDisplayNameInfo.getStringFormat());break;case i.IPNotationTypes.virtualCloudNetworkOCID:e.push(s.vcnOCIDInfo.getStringFormat())}return 0==e.length&&(e=[" "]),e}updateWhitelistedIps(){}addModuleEntryToMapAndACLUI(e,t,s,i=!1){let d,l,a=s?this.whitelistedIpsInACLRuleModuleMap:this.whitelistedIpsMap;d=++this.index;let n=new o;l="accessControlRuleModule"+d,n.clickedAddAccessControlButton=i,n.populateData(d,l,e,t),a.set(l,n),this.addACLModule(n),null==t?(this.networkAccess.invalidModules.add(l),this.networkAccess.updateOKandAddRuleButtons()):this.hasWhitelistedMapChanged()||this.networkAccess.disableOkButton(!0)}populateWhiteListedMap(e,s){if(e.ipAddressList.length>0&&this.addModuleEntryToMapAndACLUI(i.IPNotationTypes.IPAddress,t.getCommaSeparatedList(e.ipAddressList),s),e.cidrList.length>0&&this.addModuleEntryToMapAndACLUI(i.IPNotationTypes.CIDRBlock,t.getCommaSeparatedList(e.cidrList),s),e.vcnOCIDList.length>0)for(let t=0;t<e.vcnOCIDList.length;t++)this.addModuleEntryToMapAndACLUI(i.IPNotationTypes.virtualCloudNetworkOCID,e.vcnOCIDList[t],s);if(e.vcnList.length>0)for(let t=0;t<e.vcnList.length;t++)this.addModuleEntryToMapAndACLUI(i.IPNotationTypes.virtualCloudNetwork,e.vcnList[t],s)}launchACLUpdateUI(){this.copyWhitelistedIpsMap(this.whitelistedIpsMap,this.whitelistedIpsInACLRuleModuleMap);for(let[e,t]of this.whitelistedIpsMap)this.addACLModule(t);0==this.whitelistedIpsMap.size&&this.addModuleEntryToMapAndACLUI(i.IPNotationTypes.IPAddress,null,!0,!0),this.showPublicIPAddressButtonToLastIPModule()}initializeACLWhiteListedMap(e){this.whitelistedIpsMap.clear();let t=new a;t.populateData(e),this.whitelistedIpsMap.clear(),this.populateWhiteListedMap(t,!1),this.initialWhitelistedIpsMap.clear(),this.copyWhitelistedIpsMap(this.whitelistedIpsMap,this.initialWhitelistedIpsMap),this.copyWhitelistedIpsMap(this.whitelistedIpsMap,this.whitelistedIpsInACLRuleModuleMap)}IsLastModuleIPAddressNotation(e,t=null){let s,d=!1;for(let[e,t]of this.whitelistedIpsInACLRuleModuleMap)s=t;return t?s&&(d=s.moduleId==e?t==i.IPNotationTypes.IPAddress:s.ipNotationType==i.IPNotationTypes.IPAddress):s&&s.ipNotationType==i.IPNotationTypes.IPAddress&&(null!=e?s.moduleId==e&&(d=!0):d=!0),d}addACLModule(e){let t=document.querySelector("#aclRuleContainerID");if(t){const i=document.querySelector("#addACLRuleModuleTemplate").content.cloneNode(!0).firstElementChild;i.setAttribute("id",e.moduleId),t.appendChild(i);let d={addModule:!0};d.updateACLRuleHandler=this.updateACLRuleHandler,d.removeACLRuleHandler=this.removeACLRuleHandler,d.IPNotationChangeHandler=this.IPNotationChangeHandler,d.updatePublicIPAddressHandler=this.updatePublicIPAddressHandler,d.isIPAddressUnique=this.isIPAddressUnique,d.displayPublicIPAddressButtonHandler=this.displayPublicIPAddressButtonHandler,d.index=e.moduleIndex,d.moduleID=e.moduleId,d.ipNotationType=e.ipNotationType,d.uniqueIpAddressErrorValueHandler=this.uniqueIpAddressErrorValueHandler,e.ipAddressList&&(d.ipAddressListOrCIDRList=e.ipAddressList),e.cidrList&&(d.ipAddressListOrCIDRList=e.cidrList),e.vcnOCIDInfo&&(d.vcnOCIDInfo=e.vcnOCIDInfo),e.vcnDisplayNameInfo&&(d.vcnDisplayNameInfo=e.vcnDisplayNameInfo),d.selectCompartmentListHandler=this.selectCompartmentListHandler,d.networkAccessLaunchSource=this.networkAccess.networkAccessLaunchSource(),d.clickedAddAccessControlButton=e.clickedAddAccessControlButton;let l={data:d};s.applyBindings(l,i)}}updateWhitelistedIpsMap(e,t){return t.has(e.moduleId)&&t.set(e.moduleId,e),null}removeModuleFromWhitelistedIpsMap(e,t){t.has(e)&&t.delete(e)}copyWhitelistedIpsMap(e,t){t.clear();for(const[s,d]of e)(d.ipNotationType!=i.IPNotationTypes.IPAddress||null!=d.ipAddressList&&0!=d.ipAddressList.trim().length)&&t.set(s,d)}onOKUpdateACLDialog(){this.networkAccess.hasWhitelistedMapChanged=this.hasWhitelistedMapChanged(),this.copyWhitelistedIpsMap(this.whitelistedIpsInACLRuleModuleMap,this.whitelistedIpsMap),this.aclModuleCreateADBDataHandler&&this.aclModuleCreateADBDataHandler(this.getWhitelistedIps()),0==this.whitelistedIpsMap.size&&this.networkAccess.setNetworkAcessType(i.ADBNetworkAccessType.SecureAccessFromEveryWhere)}onCancelUpdateACLDialog(){this.copyWhitelistedIpsMap(this.whitelistedIpsMap,this.whitelistedIpsInACLRuleModuleMap)}clearInvalidModulesOnClose(){this.networkAccess.invalidModules.clear()}clearWhiteListedMap(){this.whitelistedIpsInACLRuleModuleMap.clear(),this.whitelistedIpsMap.clear(),this.initialWhitelistedIpsMap.clear()}hasWhitelistedMapChanged(){return this.whiteListedIPsMapDifferent(this.whitelistedIpsMap,this.whitelistedIpsInACLRuleModuleMap)}addIPAddressOrCIDRToSet(e,s){let i=t.getListfromCommaSeparatedString(e);i&&i.forEach(e=>{s.add(e)})}getWhitelistedIPsSet(e){let t=new Set;for(const[s,d]of e)switch(d.ipNotationType){case i.IPNotationTypes.IPAddress:this.addIPAddressOrCIDRToSet(d.ipAddressList,t);break;case i.IPNotationTypes.CIDRBlock:this.addIPAddressOrCIDRToSet(d.cidrList,t);break;case i.IPNotationTypes.virtualCloudNetwork:d.vcnDisplayNameInfo&&t.add(d.vcnDisplayNameInfo.getStringFormat());break;case i.IPNotationTypes.virtualCloudNetworkOCID:d.vcnOCIDInfo&&t.add(d.vcnOCIDInfo.getStringFormat())}return t}updateUniqueIPAddressErrors(e){let s,d,l,a=new Set;for(const[o,n]of this.whitelistedIpsInACLRuleModuleMap)n.ipNotationType===i.IPNotationTypes.IPAddress&&(s=t.getListfromCommaSeparatedString(n.ipAddressList),d=!0,s&&s.forEach(e=>{a.has(e)?d=!1:a.add(e)}),n.errorInModule=!d||n.errorInModule,o==e?l=d:n.uniqueIpAddressErrorValueHandler&&(n.uniqueIpAddressErrorValueHandler(d),d||this.networkAccess.invalidModules.has(n.moduleId)||(this.networkAccess.invalidModules.add(n.moduleId),this.networkAccess.updateOKandAddRuleButtons())));return l}hasWhitelistedMapChangedInTheDialog(){const e=this.getWhitelistedIPsSet(this.whitelistedIpsMap),t=this.getWhitelistedIPsSet(this.whitelistedIpsInACLRuleModuleMap);if(e&&e.size>0&&t&&t.size>0){if(e.size!==t.size)return!0;for(const s of e)if(!t.has(s))return!0;return!1}return!0}whiteListedIPsMapDifferent(e,t){const s=this.getWhitelistedIPsSet(e),i=this.getWhitelistedIPsSet(t);if(s&&0==s.size&&i&&0==i.size)return!1;if(s&&s.size>0&&i&&i.size>0){if(s.size!==i.size)return!0;for(const e of s)if(!i.has(e))return!0;return!1}return!0}hasACLRuleChanged(){return this.whiteListedIPsMapDifferent(this.initialWhitelistedIpsMap,this.whitelistedIpsMap)}};e.changeCompartmentUIData=class{constructor(){this.compartmentArrayTree=[]}}}));