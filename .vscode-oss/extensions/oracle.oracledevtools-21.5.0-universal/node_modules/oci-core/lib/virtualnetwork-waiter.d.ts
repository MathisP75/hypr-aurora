/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { VirtualNetworkClient } from "./client";
import { WorkRequestClient, responses } from "oci-workrequests";
export declare class VirtualNetworkWaiter {
    private client;
    private workRequestClient;
    private readonly config?;
    constructor(client: VirtualNetworkClient, workRequestClient: WorkRequestClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAddIpv6SubnetCidr
     *
     * @param request the request to send
     * @return response returns AddIpv6SubnetCidrResponse, GetWorkRequestResponse tuple
     */
    forAddIpv6SubnetCidr(request: serviceRequests.AddIpv6SubnetCidrRequest): Promise<{
        response: serviceResponses.AddIpv6SubnetCidrResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forAddIpv6VcnCidr
     *
     * @param request the request to send
     * @return response returns AddIpv6VcnCidrResponse, GetWorkRequestResponse tuple
     */
    forAddIpv6VcnCidr(request: serviceRequests.AddIpv6VcnCidrRequest): Promise<{
        response: serviceResponses.AddIpv6VcnCidrResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forAddVcnCidr
     *
     * @param request the request to send
     * @return response returns AddVcnCidrResponse, GetWorkRequestResponse tuple
     */
    forAddVcnCidr(request: serviceRequests.AddVcnCidrRequest): Promise<{
        response: serviceResponses.AddVcnCidrResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeCaptureFilterCompartment
     *
     * @param request the request to send
     * @return response returns ChangeCaptureFilterCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeCaptureFilterCompartment(request: serviceRequests.ChangeCaptureFilterCompartmentRequest): Promise<{
        response: serviceResponses.ChangeCaptureFilterCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeDrgCompartment
     *
     * @param request the request to send
     * @return response returns ChangeDrgCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeDrgCompartment(request: serviceRequests.ChangeDrgCompartmentRequest): Promise<{
        response: serviceResponses.ChangeDrgCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeSubnetCompartment
     *
     * @param request the request to send
     * @return response returns ChangeSubnetCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeSubnetCompartment(request: serviceRequests.ChangeSubnetCompartmentRequest): Promise<{
        response: serviceResponses.ChangeSubnetCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeVcnCompartment
     *
     * @param request the request to send
     * @return response returns ChangeVcnCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeVcnCompartment(request: serviceRequests.ChangeVcnCompartmentRequest): Promise<{
        response: serviceResponses.ChangeVcnCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeVlanCompartment
     *
     * @param request the request to send
     * @return response returns ChangeVlanCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeVlanCompartment(request: serviceRequests.ChangeVlanCompartmentRequest): Promise<{
        response: serviceResponses.ChangeVlanCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeVtapCompartment
     *
     * @param request the request to send
     * @return response returns ChangeVtapCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeVtapCompartment(request: serviceRequests.ChangeVtapCompartmentRequest): Promise<{
        response: serviceResponses.ChangeVtapCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteByoipRange
     *
     * @param request the request to send
     * @return response returns DeleteByoipRangeResponse, GetWorkRequestResponse tuple
     */
    forDeleteByoipRange(request: serviceRequests.DeleteByoipRangeRequest): Promise<{
        response: serviceResponses.DeleteByoipRangeResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteVtap
     *
     * @param request the request to send
     * @return response returns DeleteVtapResponse, GetWorkRequestResponse tuple
     */
    forDeleteVtap(request: serviceRequests.DeleteVtapRequest): Promise<{
        response: serviceResponses.DeleteVtapResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forByoipRange till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetByoipRangeResponse | null (null in case of 404 response)
     */
    forByoipRange(request: serviceRequests.GetByoipRangeRequest, ...targetStates: models.ByoipRange.LifecycleState[]): Promise<serviceResponses.GetByoipRangeResponse | null>;
    /**
     * Waits forCaptureFilter till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCaptureFilterResponse | null (null in case of 404 response)
     */
    forCaptureFilter(request: serviceRequests.GetCaptureFilterRequest, ...targetStates: models.CaptureFilter.LifecycleState[]): Promise<serviceResponses.GetCaptureFilterResponse | null>;
    /**
     * Waits forCrossConnect till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCrossConnectResponse | null (null in case of 404 response)
     */
    forCrossConnect(request: serviceRequests.GetCrossConnectRequest, ...targetStates: models.CrossConnect.LifecycleState[]): Promise<serviceResponses.GetCrossConnectResponse | null>;
    /**
     * Waits forCrossConnectGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCrossConnectGroupResponse | null (null in case of 404 response)
     */
    forCrossConnectGroup(request: serviceRequests.GetCrossConnectGroupRequest, ...targetStates: models.CrossConnectGroup.LifecycleState[]): Promise<serviceResponses.GetCrossConnectGroupResponse | null>;
    /**
     * Waits forDhcpOptions till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDhcpOptionsResponse | null (null in case of 404 response)
     */
    forDhcpOptions(request: serviceRequests.GetDhcpOptionsRequest, ...targetStates: models.DhcpOptions.LifecycleState[]): Promise<serviceResponses.GetDhcpOptionsResponse | null>;
    /**
     * Waits forDrg till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDrgResponse | null (null in case of 404 response)
     */
    forDrg(request: serviceRequests.GetDrgRequest, ...targetStates: models.Drg.LifecycleState[]): Promise<serviceResponses.GetDrgResponse | null>;
    /**
     * Waits forDrgAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDrgAttachmentResponse
     */
    forDrgAttachment(request: serviceRequests.GetDrgAttachmentRequest, ...targetStates: models.DrgAttachment.LifecycleState[]): Promise<serviceResponses.GetDrgAttachmentResponse>;
    /**
     * Waits forDrgRouteDistribution till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDrgRouteDistributionResponse | null (null in case of 404 response)
     */
    forDrgRouteDistribution(request: serviceRequests.GetDrgRouteDistributionRequest, ...targetStates: models.DrgRouteDistribution.LifecycleState[]): Promise<serviceResponses.GetDrgRouteDistributionResponse | null>;
    /**
     * Waits forDrgRouteTable till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDrgRouteTableResponse | null (null in case of 404 response)
     */
    forDrgRouteTable(request: serviceRequests.GetDrgRouteTableRequest, ...targetStates: models.DrgRouteTable.LifecycleState[]): Promise<serviceResponses.GetDrgRouteTableResponse | null>;
    /**
     * Waits forIPSecConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIPSecConnectionResponse | null (null in case of 404 response)
     */
    forIPSecConnection(request: serviceRequests.GetIPSecConnectionRequest, ...targetStates: models.IPSecConnection.LifecycleState[]): Promise<serviceResponses.GetIPSecConnectionResponse | null>;
    /**
     * Waits forIPSecConnectionTunnel till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIPSecConnectionTunnelResponse | null (null in case of 404 response)
     */
    forIPSecConnectionTunnel(request: serviceRequests.GetIPSecConnectionTunnelRequest, ...targetStates: models.IPSecConnectionTunnel.LifecycleState[]): Promise<serviceResponses.GetIPSecConnectionTunnelResponse | null>;
    /**
     * Waits forInternetGateway till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInternetGatewayResponse | null (null in case of 404 response)
     */
    forInternetGateway(request: serviceRequests.GetInternetGatewayRequest, ...targetStates: models.InternetGateway.LifecycleState[]): Promise<serviceResponses.GetInternetGatewayResponse | null>;
    /**
     * Waits forIpv6 till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIpv6Response | null (null in case of 404 response)
     */
    forIpv6(request: serviceRequests.GetIpv6Request, ...targetStates: models.Ipv6.LifecycleState[]): Promise<serviceResponses.GetIpv6Response | null>;
    /**
     * Waits forLocalPeeringGatewayonPeeringStatus till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLocalPeeringGatewayResponse | null (null in case of 404 response)
     */
    forLocalPeeringGatewayonPeeringStatus(request: serviceRequests.GetLocalPeeringGatewayRequest, ...targetStates: models.LocalPeeringGateway.PeeringStatus[]): Promise<serviceResponses.GetLocalPeeringGatewayResponse | null>;
    /**
     * Waits forLocalPeeringGatewayonLifecycleState till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLocalPeeringGatewayResponse | null (null in case of 404 response)
     */
    forLocalPeeringGatewayonLifecycleState(request: serviceRequests.GetLocalPeeringGatewayRequest, ...targetStates: models.LocalPeeringGateway.LifecycleState[]): Promise<serviceResponses.GetLocalPeeringGatewayResponse | null>;
    /**
     * Waits forNatGateway till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNatGatewayResponse | null (null in case of 404 response)
     */
    forNatGateway(request: serviceRequests.GetNatGatewayRequest, ...targetStates: models.NatGateway.LifecycleState[]): Promise<serviceResponses.GetNatGatewayResponse | null>;
    /**
     * Waits forNetworkSecurityGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNetworkSecurityGroupResponse | null (null in case of 404 response)
     */
    forNetworkSecurityGroup(request: serviceRequests.GetNetworkSecurityGroupRequest, ...targetStates: models.NetworkSecurityGroup.LifecycleState[]): Promise<serviceResponses.GetNetworkSecurityGroupResponse | null>;
    /**
     * Waits forPublicIp till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPublicIpResponse | null (null in case of 404 response)
     */
    forPublicIp(request: serviceRequests.GetPublicIpRequest, ...targetStates: models.PublicIp.LifecycleState[]): Promise<serviceResponses.GetPublicIpResponse | null>;
    /**
     * Waits forPublicIpPool till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPublicIpPoolResponse | null (null in case of 404 response)
     */
    forPublicIpPool(request: serviceRequests.GetPublicIpPoolRequest, ...targetStates: models.PublicIpPool.LifecycleState[]): Promise<serviceResponses.GetPublicIpPoolResponse | null>;
    /**
     * Waits forRemotePeeringConnectiononLifecycleState till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRemotePeeringConnectionResponse | null (null in case of 404 response)
     */
    forRemotePeeringConnectiononLifecycleState(request: serviceRequests.GetRemotePeeringConnectionRequest, ...targetStates: models.RemotePeeringConnection.LifecycleState[]): Promise<serviceResponses.GetRemotePeeringConnectionResponse | null>;
    /**
     * Waits forRemotePeeringConnectiononPeeringStatus till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRemotePeeringConnectionResponse | null (null in case of 404 response)
     */
    forRemotePeeringConnectiononPeeringStatus(request: serviceRequests.GetRemotePeeringConnectionRequest, ...targetStates: models.RemotePeeringConnection.PeeringStatus[]): Promise<serviceResponses.GetRemotePeeringConnectionResponse | null>;
    /**
     * Waits forRouteTable till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRouteTableResponse | null (null in case of 404 response)
     */
    forRouteTable(request: serviceRequests.GetRouteTableRequest, ...targetStates: models.RouteTable.LifecycleState[]): Promise<serviceResponses.GetRouteTableResponse | null>;
    /**
     * Waits forSecurityList till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSecurityListResponse | null (null in case of 404 response)
     */
    forSecurityList(request: serviceRequests.GetSecurityListRequest, ...targetStates: models.SecurityList.LifecycleState[]): Promise<serviceResponses.GetSecurityListResponse | null>;
    /**
     * Waits forServiceGateway till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetServiceGatewayResponse | null (null in case of 404 response)
     */
    forServiceGateway(request: serviceRequests.GetServiceGatewayRequest, ...targetStates: models.ServiceGateway.LifecycleState[]): Promise<serviceResponses.GetServiceGatewayResponse | null>;
    /**
     * Waits forSubnet till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSubnetResponse | null (null in case of 404 response)
     */
    forSubnet(request: serviceRequests.GetSubnetRequest, ...targetStates: models.Subnet.LifecycleState[]): Promise<serviceResponses.GetSubnetResponse | null>;
    /**
     * Waits forVcn till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVcnResponse | null (null in case of 404 response)
     */
    forVcn(request: serviceRequests.GetVcnRequest, ...targetStates: models.Vcn.LifecycleState[]): Promise<serviceResponses.GetVcnResponse | null>;
    /**
     * Waits forVcnDnsResolverAssociation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVcnDnsResolverAssociationResponse | null (null in case of 404 response)
     */
    forVcnDnsResolverAssociation(request: serviceRequests.GetVcnDnsResolverAssociationRequest, ...targetStates: models.VcnDnsResolverAssociation.LifecycleState[]): Promise<serviceResponses.GetVcnDnsResolverAssociationResponse | null>;
    /**
     * Waits forVirtualCircuit till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVirtualCircuitResponse | null (null in case of 404 response)
     */
    forVirtualCircuit(request: serviceRequests.GetVirtualCircuitRequest, ...targetStates: models.VirtualCircuit.LifecycleState[]): Promise<serviceResponses.GetVirtualCircuitResponse | null>;
    /**
     * Waits forVlan till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVlanResponse | null (null in case of 404 response)
     */
    forVlan(request: serviceRequests.GetVlanRequest, ...targetStates: models.Vlan.LifecycleState[]): Promise<serviceResponses.GetVlanResponse | null>;
    /**
     * Waits forVnic till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVnicResponse | null (null in case of 404 response)
     */
    forVnic(request: serviceRequests.GetVnicRequest, ...targetStates: models.Vnic.LifecycleState[]): Promise<serviceResponses.GetVnicResponse | null>;
    /**
     * Waits forVtap till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVtapResponse | null (null in case of 404 response)
     */
    forVtap(request: serviceRequests.GetVtapRequest, ...targetStates: models.Vtap.LifecycleState[]): Promise<serviceResponses.GetVtapResponse | null>;
    /**
     * Waits forModifyVcnCidr
     *
     * @param request the request to send
     * @return response returns ModifyVcnCidrResponse, GetWorkRequestResponse tuple
     */
    forModifyVcnCidr(request: serviceRequests.ModifyVcnCidrRequest): Promise<{
        response: serviceResponses.ModifyVcnCidrResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRemoveIpv6SubnetCidr
     *
     * @param request the request to send
     * @return response returns RemoveIpv6SubnetCidrResponse, GetWorkRequestResponse tuple
     */
    forRemoveIpv6SubnetCidr(request: serviceRequests.RemoveIpv6SubnetCidrRequest): Promise<{
        response: serviceResponses.RemoveIpv6SubnetCidrResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRemoveIpv6VcnCidr
     *
     * @param request the request to send
     * @return response returns RemoveIpv6VcnCidrResponse, GetWorkRequestResponse tuple
     */
    forRemoveIpv6VcnCidr(request: serviceRequests.RemoveIpv6VcnCidrRequest): Promise<{
        response: serviceResponses.RemoveIpv6VcnCidrResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRemoveVcnCidr
     *
     * @param request the request to send
     * @return response returns RemoveVcnCidrResponse, GetWorkRequestResponse tuple
     */
    forRemoveVcnCidr(request: serviceRequests.RemoveVcnCidrRequest): Promise<{
        response: serviceResponses.RemoveVcnCidrResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateVtap
     *
     * @param request the request to send
     * @return response returns UpdateVtapResponse, GetWorkRequestResponse tuple
     */
    forUpdateVtap(request: serviceRequests.UpdateVtapRequest): Promise<{
        response: serviceResponses.UpdateVtapResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpgradeDrg
     *
     * @param request the request to send
     * @return response returns UpgradeDrgResponse, GetWorkRequestResponse tuple
     */
    forUpgradeDrg(request: serviceRequests.UpgradeDrgRequest): Promise<{
        response: serviceResponses.UpgradeDrgResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forValidateByoipRange
     *
     * @param request the request to send
     * @return response returns ValidateByoipRangeResponse, GetWorkRequestResponse tuple
     */
    forValidateByoipRange(request: serviceRequests.ValidateByoipRangeRequest): Promise<{
        response: serviceResponses.ValidateByoipRangeResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
}
