"use strict";
/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualNetworkWaiter = void 0;
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const oci_workrequests_1 = require("oci-workrequests");
class VirtualNetworkWaiter {
    constructor(client, workRequestClient, config) {
        this.client = client;
        this.workRequestClient = workRequestClient;
        this.config = config;
    }
    /**
     * Waits forAddIpv6SubnetCidr
     *
     * @param request the request to send
     * @return response returns AddIpv6SubnetCidrResponse, GetWorkRequestResponse tuple
     */
    forAddIpv6SubnetCidr(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const addIpv6SubnetCidrResponse = yield this.client.addIpv6SubnetCidr(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, addIpv6SubnetCidrResponse.opcWorkRequestId);
            return { response: addIpv6SubnetCidrResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forAddIpv6VcnCidr
     *
     * @param request the request to send
     * @return response returns AddIpv6VcnCidrResponse, GetWorkRequestResponse tuple
     */
    forAddIpv6VcnCidr(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const addIpv6VcnCidrResponse = yield this.client.addIpv6VcnCidr(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, addIpv6VcnCidrResponse.opcWorkRequestId);
            return { response: addIpv6VcnCidrResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forAddVcnCidr
     *
     * @param request the request to send
     * @return response returns AddVcnCidrResponse, GetWorkRequestResponse tuple
     */
    forAddVcnCidr(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const addVcnCidrResponse = yield this.client.addVcnCidr(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, addVcnCidrResponse.opcWorkRequestId);
            return { response: addVcnCidrResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forChangeCaptureFilterCompartment
     *
     * @param request the request to send
     * @return response returns ChangeCaptureFilterCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeCaptureFilterCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeCaptureFilterCompartmentResponse = yield this.client.changeCaptureFilterCompartment(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeCaptureFilterCompartmentResponse.opcWorkRequestId);
            return {
                response: changeCaptureFilterCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeDrgCompartment
     *
     * @param request the request to send
     * @return response returns ChangeDrgCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeDrgCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeDrgCompartmentResponse = yield this.client.changeDrgCompartment(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeDrgCompartmentResponse.opcWorkRequestId);
            return { response: changeDrgCompartmentResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forChangeSubnetCompartment
     *
     * @param request the request to send
     * @return response returns ChangeSubnetCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeSubnetCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeSubnetCompartmentResponse = yield this.client.changeSubnetCompartment(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeSubnetCompartmentResponse.opcWorkRequestId);
            return {
                response: changeSubnetCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeVcnCompartment
     *
     * @param request the request to send
     * @return response returns ChangeVcnCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeVcnCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeVcnCompartmentResponse = yield this.client.changeVcnCompartment(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeVcnCompartmentResponse.opcWorkRequestId);
            return { response: changeVcnCompartmentResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forChangeVlanCompartment
     *
     * @param request the request to send
     * @return response returns ChangeVlanCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeVlanCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeVlanCompartmentResponse = yield this.client.changeVlanCompartment(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeVlanCompartmentResponse.opcWorkRequestId);
            return { response: changeVlanCompartmentResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forChangeVtapCompartment
     *
     * @param request the request to send
     * @return response returns ChangeVtapCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeVtapCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeVtapCompartmentResponse = yield this.client.changeVtapCompartment(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeVtapCompartmentResponse.opcWorkRequestId);
            return { response: changeVtapCompartmentResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteByoipRange
     *
     * @param request the request to send
     * @return response returns DeleteByoipRangeResponse, GetWorkRequestResponse tuple
     */
    forDeleteByoipRange(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteByoipRangeResponse = yield this.client.deleteByoipRange(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteByoipRangeResponse.opcWorkRequestId);
            return { response: deleteByoipRangeResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteVtap
     *
     * @param request the request to send
     * @return response returns DeleteVtapResponse, GetWorkRequestResponse tuple
     */
    forDeleteVtap(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteVtapResponse = yield this.client.deleteVtap(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteVtapResponse.opcWorkRequestId);
            return { response: deleteVtapResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forByoipRange till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetByoipRangeResponse | null (null in case of 404 response)
     */
    forByoipRange(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getByoipRange(request), response => targetStates.includes(response.byoipRange.lifecycleState), targetStates.includes(models.ByoipRange.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forCaptureFilter till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCaptureFilterResponse | null (null in case of 404 response)
     */
    forCaptureFilter(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getCaptureFilter(request), response => targetStates.includes(response.captureFilter.lifecycleState), targetStates.includes(models.CaptureFilter.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forCrossConnect till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCrossConnectResponse | null (null in case of 404 response)
     */
    forCrossConnect(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getCrossConnect(request), response => targetStates.includes(response.crossConnect.lifecycleState), targetStates.includes(models.CrossConnect.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forCrossConnectGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCrossConnectGroupResponse | null (null in case of 404 response)
     */
    forCrossConnectGroup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getCrossConnectGroup(request), response => targetStates.includes(response.crossConnectGroup.lifecycleState), targetStates.includes(models.CrossConnectGroup.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forDhcpOptions till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDhcpOptionsResponse | null (null in case of 404 response)
     */
    forDhcpOptions(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDhcpOptions(request), response => targetStates.includes(response.dhcpOptions.lifecycleState), targetStates.includes(models.DhcpOptions.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forDrg till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDrgResponse | null (null in case of 404 response)
     */
    forDrg(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDrg(request), response => targetStates.includes(response.drg.lifecycleState), targetStates.includes(models.Drg.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forDrgAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDrgAttachmentResponse
     */
    forDrgAttachment(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getDrgAttachment(request), response => targetStates.includes(response.drgAttachment.lifecycleState));
        });
    }
    /**
     * Waits forDrgRouteDistribution till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDrgRouteDistributionResponse | null (null in case of 404 response)
     */
    forDrgRouteDistribution(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDrgRouteDistribution(request), response => targetStates.includes(response.drgRouteDistribution.lifecycleState), targetStates.includes(models.DrgRouteDistribution.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forDrgRouteTable till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDrgRouteTableResponse | null (null in case of 404 response)
     */
    forDrgRouteTable(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDrgRouteTable(request), response => targetStates.includes(response.drgRouteTable.lifecycleState), targetStates.includes(models.DrgRouteTable.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forIPSecConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIPSecConnectionResponse | null (null in case of 404 response)
     */
    forIPSecConnection(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getIPSecConnection(request), response => targetStates.includes(response.iPSecConnection.lifecycleState), targetStates.includes(models.IPSecConnection.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forIPSecConnectionTunnel till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIPSecConnectionTunnelResponse | null (null in case of 404 response)
     */
    forIPSecConnectionTunnel(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getIPSecConnectionTunnel(request), response => targetStates.includes(response.iPSecConnectionTunnel.lifecycleState), targetStates.includes(models.IPSecConnectionTunnel.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forInternetGateway till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInternetGatewayResponse | null (null in case of 404 response)
     */
    forInternetGateway(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getInternetGateway(request), response => targetStates.includes(response.internetGateway.lifecycleState), targetStates.includes(models.InternetGateway.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forIpv6 till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIpv6Response | null (null in case of 404 response)
     */
    forIpv6(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getIpv6(request), response => targetStates.includes(response.ipv6.lifecycleState), targetStates.includes(models.Ipv6.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forLocalPeeringGatewayonPeeringStatus till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLocalPeeringGatewayResponse | null (null in case of 404 response)
     */
    forLocalPeeringGatewayonPeeringStatus(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getLocalPeeringGateway(request), response => targetStates.includes(response.localPeeringGateway.peeringStatus), targetStates.includes(models.LocalPeeringGateway.PeeringStatus.Revoked));
        });
    }
    /**
     * Waits forLocalPeeringGatewayonLifecycleState till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLocalPeeringGatewayResponse | null (null in case of 404 response)
     */
    forLocalPeeringGatewayonLifecycleState(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getLocalPeeringGateway(request), response => targetStates.includes(response.localPeeringGateway.lifecycleState), targetStates.includes(models.LocalPeeringGateway.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forNatGateway till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNatGatewayResponse | null (null in case of 404 response)
     */
    forNatGateway(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getNatGateway(request), response => targetStates.includes(response.natGateway.lifecycleState), targetStates.includes(models.NatGateway.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forNetworkSecurityGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNetworkSecurityGroupResponse | null (null in case of 404 response)
     */
    forNetworkSecurityGroup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getNetworkSecurityGroup(request), response => targetStates.includes(response.networkSecurityGroup.lifecycleState), targetStates.includes(models.NetworkSecurityGroup.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forPublicIp till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPublicIpResponse | null (null in case of 404 response)
     */
    forPublicIp(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getPublicIp(request), response => targetStates.includes(response.publicIp.lifecycleState), targetStates.includes(models.PublicIp.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forPublicIpPool till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPublicIpPoolResponse | null (null in case of 404 response)
     */
    forPublicIpPool(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getPublicIpPool(request), response => targetStates.includes(response.publicIpPool.lifecycleState), targetStates.includes(models.PublicIpPool.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forRemotePeeringConnectiononLifecycleState till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRemotePeeringConnectionResponse | null (null in case of 404 response)
     */
    forRemotePeeringConnectiononLifecycleState(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getRemotePeeringConnection(request), response => targetStates.includes(response.remotePeeringConnection.lifecycleState), targetStates.includes(models.RemotePeeringConnection.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forRemotePeeringConnectiononPeeringStatus till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRemotePeeringConnectionResponse | null (null in case of 404 response)
     */
    forRemotePeeringConnectiononPeeringStatus(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getRemotePeeringConnection(request), response => targetStates.includes(response.remotePeeringConnection.peeringStatus), targetStates.includes(models.RemotePeeringConnection.PeeringStatus.Revoked));
        });
    }
    /**
     * Waits forRouteTable till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRouteTableResponse | null (null in case of 404 response)
     */
    forRouteTable(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getRouteTable(request), response => targetStates.includes(response.routeTable.lifecycleState), targetStates.includes(models.RouteTable.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forSecurityList till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSecurityListResponse | null (null in case of 404 response)
     */
    forSecurityList(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getSecurityList(request), response => targetStates.includes(response.securityList.lifecycleState), targetStates.includes(models.SecurityList.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forServiceGateway till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetServiceGatewayResponse | null (null in case of 404 response)
     */
    forServiceGateway(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getServiceGateway(request), response => targetStates.includes(response.serviceGateway.lifecycleState), targetStates.includes(models.ServiceGateway.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forSubnet till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSubnetResponse | null (null in case of 404 response)
     */
    forSubnet(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getSubnet(request), response => targetStates.includes(response.subnet.lifecycleState), targetStates.includes(models.Subnet.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVcn till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVcnResponse | null (null in case of 404 response)
     */
    forVcn(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVcn(request), response => targetStates.includes(response.vcn.lifecycleState), targetStates.includes(models.Vcn.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVcnDnsResolverAssociation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVcnDnsResolverAssociationResponse | null (null in case of 404 response)
     */
    forVcnDnsResolverAssociation(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVcnDnsResolverAssociation(request), response => targetStates.includes(response.vcnDnsResolverAssociation.lifecycleState), targetStates.includes(models.VcnDnsResolverAssociation.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVirtualCircuit till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVirtualCircuitResponse | null (null in case of 404 response)
     */
    forVirtualCircuit(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVirtualCircuit(request), response => targetStates.includes(response.virtualCircuit.lifecycleState), targetStates.includes(models.VirtualCircuit.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVlan till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVlanResponse | null (null in case of 404 response)
     */
    forVlan(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVlan(request), response => targetStates.includes(response.vlan.lifecycleState), targetStates.includes(models.Vlan.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVnic till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVnicResponse | null (null in case of 404 response)
     */
    forVnic(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVnic(request), response => targetStates.includes(response.vnic.lifecycleState), targetStates.includes(models.Vnic.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVtap till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVtapResponse | null (null in case of 404 response)
     */
    forVtap(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVtap(request), response => targetStates.includes(response.vtap.lifecycleState), targetStates.includes(models.Vtap.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forModifyVcnCidr
     *
     * @param request the request to send
     * @return response returns ModifyVcnCidrResponse, GetWorkRequestResponse tuple
     */
    forModifyVcnCidr(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const modifyVcnCidrResponse = yield this.client.modifyVcnCidr(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, modifyVcnCidrResponse.opcWorkRequestId);
            return { response: modifyVcnCidrResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forRemoveIpv6SubnetCidr
     *
     * @param request the request to send
     * @return response returns RemoveIpv6SubnetCidrResponse, GetWorkRequestResponse tuple
     */
    forRemoveIpv6SubnetCidr(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeIpv6SubnetCidrResponse = yield this.client.removeIpv6SubnetCidr(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, removeIpv6SubnetCidrResponse.opcWorkRequestId);
            return { response: removeIpv6SubnetCidrResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forRemoveIpv6VcnCidr
     *
     * @param request the request to send
     * @return response returns RemoveIpv6VcnCidrResponse, GetWorkRequestResponse tuple
     */
    forRemoveIpv6VcnCidr(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeIpv6VcnCidrResponse = yield this.client.removeIpv6VcnCidr(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, removeIpv6VcnCidrResponse.opcWorkRequestId);
            return { response: removeIpv6VcnCidrResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forRemoveVcnCidr
     *
     * @param request the request to send
     * @return response returns RemoveVcnCidrResponse, GetWorkRequestResponse tuple
     */
    forRemoveVcnCidr(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeVcnCidrResponse = yield this.client.removeVcnCidr(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, removeVcnCidrResponse.opcWorkRequestId);
            return { response: removeVcnCidrResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateVtap
     *
     * @param request the request to send
     * @return response returns UpdateVtapResponse, GetWorkRequestResponse tuple
     */
    forUpdateVtap(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateVtapResponse = yield this.client.updateVtap(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateVtapResponse.opcWorkRequestId);
            return { response: updateVtapResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpgradeDrg
     *
     * @param request the request to send
     * @return response returns UpgradeDrgResponse, GetWorkRequestResponse tuple
     */
    forUpgradeDrg(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const upgradeDrgResponse = yield this.client.upgradeDrg(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, upgradeDrgResponse.opcWorkRequestId);
            return { response: upgradeDrgResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forValidateByoipRange
     *
     * @param request the request to send
     * @return response returns ValidateByoipRangeResponse, GetWorkRequestResponse tuple
     */
    forValidateByoipRange(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const validateByoipRangeResponse = yield this.client.validateByoipRange(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, validateByoipRangeResponse.opcWorkRequestId);
            return { response: validateByoipRangeResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
}
exports.VirtualNetworkWaiter = VirtualNetworkWaiter;
//# sourceMappingURL=virtualnetwork-waiter.js.map