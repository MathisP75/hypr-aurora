"use strict";
/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockstorageWaiter = void 0;
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const oci_workrequests_1 = require("oci-workrequests");
class BlockstorageWaiter {
    constructor(client, workRequestClient, config) {
        this.client = client;
        this.workRequestClient = workRequestClient;
        this.config = config;
    }
    /**
     * Waits forCopyBootVolumeBackup
     *
     * @param request the request to send
     * @return response returns CopyBootVolumeBackupResponse, GetWorkRequestResponse tuple
     */
    forCopyBootVolumeBackup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const copyBootVolumeBackupResponse = yield this.client.copyBootVolumeBackup(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, copyBootVolumeBackupResponse.opcWorkRequestId);
            return { response: copyBootVolumeBackupResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCopyVolumeBackup
     *
     * @param request the request to send
     * @return response returns CopyVolumeBackupResponse, GetWorkRequestResponse tuple
     */
    forCopyVolumeBackup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const copyVolumeBackupResponse = yield this.client.copyVolumeBackup(request);
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, copyVolumeBackupResponse.opcWorkRequestId);
            return { response: copyVolumeBackupResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forBlockVolumeReplica till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBlockVolumeReplicaResponse | null (null in case of 404 response)
     */
    forBlockVolumeReplica(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBlockVolumeReplica(request), response => targetStates.includes(response.blockVolumeReplica.lifecycleState), targetStates.includes(models.BlockVolumeReplica.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forBootVolume till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBootVolumeResponse | null (null in case of 404 response)
     */
    forBootVolume(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBootVolume(request), response => targetStates.includes(response.bootVolume.lifecycleState), targetStates.includes(models.BootVolume.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forBootVolumeBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBootVolumeBackupResponse | null (null in case of 404 response)
     */
    forBootVolumeBackup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBootVolumeBackup(request), response => targetStates.includes(response.bootVolumeBackup.lifecycleState), targetStates.includes(models.BootVolumeBackup.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forBootVolumeReplica till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBootVolumeReplicaResponse | null (null in case of 404 response)
     */
    forBootVolumeReplica(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBootVolumeReplica(request), response => targetStates.includes(response.bootVolumeReplica.lifecycleState), targetStates.includes(models.BootVolumeReplica.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVolume till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeResponse | null (null in case of 404 response)
     */
    forVolume(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVolume(request), response => targetStates.includes(response.volume.lifecycleState), targetStates.includes(models.Volume.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVolumeBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeBackupResponse | null (null in case of 404 response)
     */
    forVolumeBackup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVolumeBackup(request), response => targetStates.includes(response.volumeBackup.lifecycleState), targetStates.includes(models.VolumeBackup.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVolumeGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeGroupResponse | null (null in case of 404 response)
     */
    forVolumeGroup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVolumeGroup(request), response => targetStates.includes(response.volumeGroup.lifecycleState), targetStates.includes(models.VolumeGroup.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVolumeGroupBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeGroupBackupResponse | null (null in case of 404 response)
     */
    forVolumeGroupBackup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVolumeGroupBackup(request), response => targetStates.includes(response.volumeGroupBackup.lifecycleState), targetStates.includes(models.VolumeGroupBackup.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVolumeGroupReplica till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeGroupReplicaResponse | null (null in case of 404 response)
     */
    forVolumeGroupReplica(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVolumeGroupReplica(request), response => targetStates.includes(response.volumeGroupReplica.lifecycleState), targetStates.includes(models.VolumeGroupReplica.LifecycleState.Terminated));
        });
    }
}
exports.BlockstorageWaiter = BlockstorageWaiter;
//# sourceMappingURL=blockstorage-waiter.js.map