/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ComputeClient } from "./client";
import { WorkRequestClient, responses } from "oci-workrequests";
export declare class ComputeWaiter {
    private client;
    private workRequestClient;
    private readonly config?;
    constructor(client: ComputeClient, workRequestClient: WorkRequestClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forChangeComputeCapacityReservationCompartment
     *
     * @param request the request to send
     * @return response returns ChangeComputeCapacityReservationCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeComputeCapacityReservationCompartment(request: serviceRequests.ChangeComputeCapacityReservationCompartmentRequest): Promise<{
        response: serviceResponses.ChangeComputeCapacityReservationCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeDedicatedVmHostCompartment
     *
     * @param request the request to send
     * @return response returns ChangeDedicatedVmHostCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeDedicatedVmHostCompartment(request: serviceRequests.ChangeDedicatedVmHostCompartmentRequest): Promise<{
        response: serviceResponses.ChangeDedicatedVmHostCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeInstanceCompartment
     *
     * @param request the request to send
     * @return response returns ChangeInstanceCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeInstanceCompartment(request: serviceRequests.ChangeInstanceCompartmentRequest): Promise<{
        response: serviceResponses.ChangeInstanceCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateComputeCapacityReservation
     *
     * @param request the request to send
     * @return response returns CreateComputeCapacityReservationResponse, GetWorkRequestResponse tuple
     */
    forCreateComputeCapacityReservation(request: serviceRequests.CreateComputeCapacityReservationRequest): Promise<{
        response: serviceResponses.CreateComputeCapacityReservationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateDedicatedVmHost
     *
     * @param request the request to send
     * @return response returns CreateDedicatedVmHostResponse, GetWorkRequestResponse tuple
     */
    forCreateDedicatedVmHost(request: serviceRequests.CreateDedicatedVmHostRequest): Promise<{
        response: serviceResponses.CreateDedicatedVmHostResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateImage
     *
     * @param request the request to send
     * @return response returns CreateImageResponse, GetWorkRequestResponse tuple
     */
    forCreateImage(request: serviceRequests.CreateImageRequest): Promise<{
        response: serviceResponses.CreateImageResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteComputeCapacityReservation
     *
     * @param request the request to send
     * @return response returns DeleteComputeCapacityReservationResponse, GetWorkRequestResponse tuple
     */
    forDeleteComputeCapacityReservation(request: serviceRequests.DeleteComputeCapacityReservationRequest): Promise<{
        response: serviceResponses.DeleteComputeCapacityReservationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteDedicatedVmHost
     *
     * @param request the request to send
     * @return response returns DeleteDedicatedVmHostResponse, GetWorkRequestResponse tuple
     */
    forDeleteDedicatedVmHost(request: serviceRequests.DeleteDedicatedVmHostRequest): Promise<{
        response: serviceResponses.DeleteDedicatedVmHostResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forExportImage
     *
     * @param request the request to send
     * @return response returns ExportImageResponse, GetWorkRequestResponse tuple
     */
    forExportImage(request: serviceRequests.ExportImageRequest): Promise<{
        response: serviceResponses.ExportImageResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forBootVolumeAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBootVolumeAttachmentResponse
     */
    forBootVolumeAttachment(request: serviceRequests.GetBootVolumeAttachmentRequest, ...targetStates: models.BootVolumeAttachment.LifecycleState[]): Promise<serviceResponses.GetBootVolumeAttachmentResponse>;
    /**
     * Waits forComputeCapacityReservation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeCapacityReservationResponse | null (null in case of 404 response)
     */
    forComputeCapacityReservation(request: serviceRequests.GetComputeCapacityReservationRequest, ...targetStates: models.ComputeCapacityReservation.LifecycleState[]): Promise<serviceResponses.GetComputeCapacityReservationResponse | null>;
    /**
     * Waits forConsoleHistory till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConsoleHistoryResponse
     */
    forConsoleHistory(request: serviceRequests.GetConsoleHistoryRequest, ...targetStates: models.ConsoleHistory.LifecycleState[]): Promise<serviceResponses.GetConsoleHistoryResponse>;
    /**
     * Waits forDedicatedVmHost till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDedicatedVmHostResponse | null (null in case of 404 response)
     */
    forDedicatedVmHost(request: serviceRequests.GetDedicatedVmHostRequest, ...targetStates: models.DedicatedVmHost.LifecycleState[]): Promise<serviceResponses.GetDedicatedVmHostResponse | null>;
    /**
     * Waits forImage till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetImageResponse | null (null in case of 404 response)
     */
    forImage(request: serviceRequests.GetImageRequest, ...targetStates: models.Image.LifecycleState[]): Promise<serviceResponses.GetImageResponse | null>;
    /**
     * Waits forInstance till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstanceResponse | null (null in case of 404 response)
     */
    forInstance(request: serviceRequests.GetInstanceRequest, ...targetStates: models.Instance.LifecycleState[]): Promise<serviceResponses.GetInstanceResponse | null>;
    /**
     * Waits forInstanceConsoleConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstanceConsoleConnectionResponse | null (null in case of 404 response)
     */
    forInstanceConsoleConnection(request: serviceRequests.GetInstanceConsoleConnectionRequest, ...targetStates: models.InstanceConsoleConnection.LifecycleState[]): Promise<serviceResponses.GetInstanceConsoleConnectionResponse | null>;
    /**
     * Waits forVnicAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVnicAttachmentResponse
     */
    forVnicAttachment(request: serviceRequests.GetVnicAttachmentRequest, ...targetStates: models.VnicAttachment.LifecycleState[]): Promise<serviceResponses.GetVnicAttachmentResponse>;
    /**
     * Waits forVolumeAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeAttachmentResponse
     */
    forVolumeAttachment(request: serviceRequests.GetVolumeAttachmentRequest, ...targetStates: models.VolumeAttachment.LifecycleState[]): Promise<serviceResponses.GetVolumeAttachmentResponse>;
    /**
     * Waits forLaunchInstance
     *
     * @param request the request to send
     * @return response returns LaunchInstanceResponse, GetWorkRequestResponse tuple
     */
    forLaunchInstance(request: serviceRequests.LaunchInstanceRequest): Promise<{
        response: serviceResponses.LaunchInstanceResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateComputeCapacityReservation
     *
     * @param request the request to send
     * @return response returns UpdateComputeCapacityReservationResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeCapacityReservation(request: serviceRequests.UpdateComputeCapacityReservationRequest): Promise<{
        response: serviceResponses.UpdateComputeCapacityReservationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateInstance
     *
     * @param request the request to send
     * @return response returns UpdateInstanceResponse, GetWorkRequestResponse tuple
     */
    forUpdateInstance(request: serviceRequests.UpdateInstanceRequest): Promise<{
        response: serviceResponses.UpdateInstanceResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
}
