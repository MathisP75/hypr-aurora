/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ComputeManagementClient } from "./client";
import { WorkRequestClient, responses } from "oci-workrequests";
export declare class ComputeManagementWaiter {
    private client;
    private workRequestClient;
    private readonly config?;
    constructor(client: ComputeManagementClient, workRequestClient: WorkRequestClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAttachInstancePoolInstance
     *
     * @param request the request to send
     * @return response returns AttachInstancePoolInstanceResponse, GetWorkRequestResponse tuple
     */
    forAttachInstancePoolInstance(request: serviceRequests.AttachInstancePoolInstanceRequest): Promise<{
        response: serviceResponses.AttachInstancePoolInstanceResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateClusterNetwork
     *
     * @param request the request to send
     * @return response returns CreateClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forCreateClusterNetwork(request: serviceRequests.CreateClusterNetworkRequest): Promise<{
        response: serviceResponses.CreateClusterNetworkResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDetachInstancePoolInstance
     *
     * @param request the request to send
     * @return response returns DetachInstancePoolInstanceResponse, GetWorkRequestResponse tuple
     */
    forDetachInstancePoolInstance(request: serviceRequests.DetachInstancePoolInstanceRequest): Promise<{
        response: serviceResponses.DetachInstancePoolInstanceResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forClusterNetwork till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetClusterNetworkResponse | null (null in case of 404 response)
     */
    forClusterNetwork(request: serviceRequests.GetClusterNetworkRequest, ...targetStates: models.ClusterNetwork.LifecycleState[]): Promise<serviceResponses.GetClusterNetworkResponse | null>;
    /**
     * Waits forInstancePool till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstancePoolResponse | null (null in case of 404 response)
     */
    forInstancePool(request: serviceRequests.GetInstancePoolRequest, ...targetStates: models.InstancePool.LifecycleState[]): Promise<serviceResponses.GetInstancePoolResponse | null>;
    /**
     * Waits forInstancePoolInstance till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstancePoolInstanceResponse
     */
    forInstancePoolInstance(request: serviceRequests.GetInstancePoolInstanceRequest, ...targetStates: models.InstancePoolInstance.LifecycleState[]): Promise<serviceResponses.GetInstancePoolInstanceResponse>;
    /**
     * Waits forInstancePoolLoadBalancerAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstancePoolLoadBalancerAttachmentResponse
     */
    forInstancePoolLoadBalancerAttachment(request: serviceRequests.GetInstancePoolLoadBalancerAttachmentRequest, ...targetStates: models.InstancePoolLoadBalancerAttachment.LifecycleState[]): Promise<serviceResponses.GetInstancePoolLoadBalancerAttachmentResponse>;
    /**
     * Waits forLaunchInstanceConfiguration
     *
     * @param request the request to send
     * @return response returns LaunchInstanceConfigurationResponse, GetWorkRequestResponse tuple
     */
    forLaunchInstanceConfiguration(request: serviceRequests.LaunchInstanceConfigurationRequest): Promise<{
        response: serviceResponses.LaunchInstanceConfigurationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forTerminateClusterNetwork
     *
     * @param request the request to send
     * @return response returns TerminateClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forTerminateClusterNetwork(request: serviceRequests.TerminateClusterNetworkRequest): Promise<{
        response: serviceResponses.TerminateClusterNetworkResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
}
