"use strict";
/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrgRedundancyStatus = void 0;
var DrgRedundancyStatus;
(function (DrgRedundancyStatus) {
    let Status;
    (function (Status) {
        Status["NotAvailable"] = "NOT_AVAILABLE";
        Status["Redundant"] = "REDUNDANT";
        Status["NotRedundantSingleIpsec"] = "NOT_REDUNDANT_SINGLE_IPSEC";
        Status["NotRedundantSingleVirtualcircuit"] = "NOT_REDUNDANT_SINGLE_VIRTUALCIRCUIT";
        Status["NotRedundantMultipleIpsecs"] = "NOT_REDUNDANT_MULTIPLE_IPSECS";
        Status["NotRedundantMultipleVirtualcircuits"] = "NOT_REDUNDANT_MULTIPLE_VIRTUALCIRCUITS";
        Status["NotRedundantMixConnections"] = "NOT_REDUNDANT_MIX_CONNECTIONS";
        Status["NotRedundantNoConnection"] = "NOT_REDUNDANT_NO_CONNECTION";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Status["UnknownValue"] = "UNKNOWN_VALUE";
    })(Status = DrgRedundancyStatus.Status || (DrgRedundancyStatus.Status = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    DrgRedundancyStatus.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    DrgRedundancyStatus.getDeserializedJsonObj = getDeserializedJsonObj;
})(DrgRedundancyStatus = exports.DrgRedundancyStatus || (exports.DrgRedundancyStatus = {}));
//# sourceMappingURL=drg-redundancy-status.js.map