/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
* A boot disk image for launching an instance. For more information, see
* [Overview of the Compute Service](https://docs.cloud.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm).
* <p>
To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
* talk to an administrator. If you're an administrator who needs to write policies to give users access, see
* [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
* <p>
**Warning:** Oracle recommends that you avoid using any confidential information when you
* supply string values using the API.
*
*/
export interface Image {
    /**
     * The OCID of the image originally used to launch the instance.
     */
    "baseImageId"?: string;
    /**
     * The OCID of the compartment containing the instance you want to use as the basis for the image.
     *
     */
    "compartmentId": string;
    /**
      * Whether instances launched with this image can be used to create new images.
  * For example, you cannot create an image of an Oracle Database instance.
  * <p>
  Example: `true`
  *
      */
    "createImageAllowed": boolean;
    /**
      * Defined tags for this resource. Each key is predefined and scoped to a
  * namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
  * <p>
  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
  *
      */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
      * A user-friendly name for the image. It does not have to be unique, and it's changeable.
  * Avoid entering confidential information.
  * <p>
  You cannot use a platform image name as a custom image name.
  * <p>
  Example: `My custom Oracle Linux image`
  *
      */
    "displayName"?: string;
    /**
      * Free-form tags for this resource. Each tag is a simple key-value pair with no
  * predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
  * <p>
  Example: `{\"Department\": \"Finance\"}`
  *
      */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * The OCID of the image.
     */
    "id": string;
    /**
     * Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
     * * `NATIVE` - VM instances launch with iSCSI boot and VFIO devices. The default value for platform images.
     * * `EMULATED` - VM instances launch with emulated devices, such as the E1000 network driver and emulated SCSI disk controller.
     * * `PARAVIRTUALIZED` - VM instances launch with paravirtualized devices using VirtIO drivers.
     * * `CUSTOM` - VM instances launch with custom configuration settings specified in the `LaunchOptions` parameter.
     *
     */
    "launchMode"?: Image.LaunchMode;
    "launchOptions"?: model.LaunchOptions;
    "lifecycleState": Image.LifecycleState;
    /**
      * The image's operating system.
  * <p>
  Example: `Oracle Linux`
  *
      */
    "operatingSystem": string;
    /**
      * The image's operating system version.
  * <p>
  Example: `7.2`
  *
      */
    "operatingSystemVersion": string;
    "agentFeatures"?: model.InstanceAgentFeatures;
    /**
     * The listing type of the image. The default value is \"NONE\".
     */
    "listingType"?: Image.ListingType;
    /**
      * The boot volume size for an instance launched from this image (1 MB = 1,048,576 bytes).
  * Note this is not the same as the size of the image when it was exported or the actual size of the image.
  * <p>
  Example: `47694`
  *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
      */
    "sizeInMBs"?: number;
    /**
      * The size of the internal storage for this image that is subject to billing (1 GB = 1,073,741,824 bytes).
  * <p>
  Example: `100`
  *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
      */
    "billableSizeInGBs"?: number;
    /**
      * The date and time the image was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
  * <p>
  Example: `2016-08-25T21:10:29.600Z`
  *
      */
    "timeCreated": Date;
}
export declare namespace Image {
    enum LaunchMode {
        Native = "NATIVE",
        Emulated = "EMULATED",
        Paravirtualized = "PARAVIRTUALIZED",
        Custom = "CUSTOM",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum LifecycleState {
        Provisioning = "PROVISIONING",
        Importing = "IMPORTING",
        Available = "AVAILABLE",
        Exporting = "EXPORTING",
        Disabled = "DISABLED",
        Deleted = "DELETED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum ListingType {
        Community = "COMMUNITY",
        None = "NONE",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: Image): object;
    function getDeserializedJsonObj(obj: Image): object;
}
