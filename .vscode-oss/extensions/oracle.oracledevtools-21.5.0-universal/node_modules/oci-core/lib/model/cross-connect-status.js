"use strict";
/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossConnectStatus = void 0;
var CrossConnectStatus;
(function (CrossConnectStatus) {
    let InterfaceState;
    (function (InterfaceState) {
        InterfaceState["Up"] = "UP";
        InterfaceState["Down"] = "DOWN";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        InterfaceState["UnknownValue"] = "UNKNOWN_VALUE";
    })(InterfaceState = CrossConnectStatus.InterfaceState || (CrossConnectStatus.InterfaceState = {}));
    let LightLevelIndicator;
    (function (LightLevelIndicator) {
        LightLevelIndicator["NoLight"] = "NO_LIGHT";
        LightLevelIndicator["LowWarn"] = "LOW_WARN";
        LightLevelIndicator["HighWarn"] = "HIGH_WARN";
        LightLevelIndicator["Bad"] = "BAD";
        LightLevelIndicator["Good"] = "GOOD";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LightLevelIndicator["UnknownValue"] = "UNKNOWN_VALUE";
    })(LightLevelIndicator = CrossConnectStatus.LightLevelIndicator || (CrossConnectStatus.LightLevelIndicator = {}));
    let EncryptionStatus;
    (function (EncryptionStatus) {
        EncryptionStatus["Up"] = "UP";
        EncryptionStatus["Down"] = "DOWN";
        EncryptionStatus["CipherMismatch"] = "CIPHER_MISMATCH";
        EncryptionStatus["CknMismatch"] = "CKN_MISMATCH";
        EncryptionStatus["CakMismatch"] = "CAK_MISMATCH";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        EncryptionStatus["UnknownValue"] = "UNKNOWN_VALUE";
    })(EncryptionStatus = CrossConnectStatus.EncryptionStatus || (CrossConnectStatus.EncryptionStatus = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    CrossConnectStatus.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    CrossConnectStatus.getDeserializedJsonObj = getDeserializedJsonObj;
})(CrossConnectStatus = exports.CrossConnectStatus || (exports.CrossConnectStatus = {}));
//# sourceMappingURL=cross-connect-status.js.map