"use strict";
/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LaunchOptions = void 0;
var LaunchOptions;
(function (LaunchOptions) {
    let BootVolumeType;
    (function (BootVolumeType) {
        BootVolumeType["Iscsi"] = "ISCSI";
        BootVolumeType["Scsi"] = "SCSI";
        BootVolumeType["Ide"] = "IDE";
        BootVolumeType["Vfio"] = "VFIO";
        BootVolumeType["Paravirtualized"] = "PARAVIRTUALIZED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        BootVolumeType["UnknownValue"] = "UNKNOWN_VALUE";
    })(BootVolumeType = LaunchOptions.BootVolumeType || (LaunchOptions.BootVolumeType = {}));
    let Firmware;
    (function (Firmware) {
        Firmware["Bios"] = "BIOS";
        Firmware["Uefi64"] = "UEFI_64";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Firmware["UnknownValue"] = "UNKNOWN_VALUE";
    })(Firmware = LaunchOptions.Firmware || (LaunchOptions.Firmware = {}));
    let NetworkType;
    (function (NetworkType) {
        NetworkType["E1000"] = "E1000";
        NetworkType["Vfio"] = "VFIO";
        NetworkType["Paravirtualized"] = "PARAVIRTUALIZED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        NetworkType["UnknownValue"] = "UNKNOWN_VALUE";
    })(NetworkType = LaunchOptions.NetworkType || (LaunchOptions.NetworkType = {}));
    let RemoteDataVolumeType;
    (function (RemoteDataVolumeType) {
        RemoteDataVolumeType["Iscsi"] = "ISCSI";
        RemoteDataVolumeType["Scsi"] = "SCSI";
        RemoteDataVolumeType["Ide"] = "IDE";
        RemoteDataVolumeType["Vfio"] = "VFIO";
        RemoteDataVolumeType["Paravirtualized"] = "PARAVIRTUALIZED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        RemoteDataVolumeType["UnknownValue"] = "UNKNOWN_VALUE";
    })(RemoteDataVolumeType = LaunchOptions.RemoteDataVolumeType || (LaunchOptions.RemoteDataVolumeType = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    LaunchOptions.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    LaunchOptions.getDeserializedJsonObj = getDeserializedJsonObj;
})(LaunchOptions = exports.LaunchOptions || (exports.LaunchOptions = {}));
//# sourceMappingURL=launch-options.js.map