"use strict";
/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualCircuit = void 0;
const model = __importStar(require("../model"));
var VirtualCircuit;
(function (VirtualCircuit) {
    let BgpManagement;
    (function (BgpManagement) {
        BgpManagement["CustomerManaged"] = "CUSTOMER_MANAGED";
        BgpManagement["ProviderManaged"] = "PROVIDER_MANAGED";
        BgpManagement["OracleManaged"] = "ORACLE_MANAGED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        BgpManagement["UnknownValue"] = "UNKNOWN_VALUE";
    })(BgpManagement = VirtualCircuit.BgpManagement || (VirtualCircuit.BgpManagement = {}));
    let BgpSessionState;
    (function (BgpSessionState) {
        BgpSessionState["Up"] = "UP";
        BgpSessionState["Down"] = "DOWN";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        BgpSessionState["UnknownValue"] = "UNKNOWN_VALUE";
    })(BgpSessionState = VirtualCircuit.BgpSessionState || (VirtualCircuit.BgpSessionState = {}));
    let BgpIpv6SessionState;
    (function (BgpIpv6SessionState) {
        BgpIpv6SessionState["Up"] = "UP";
        BgpIpv6SessionState["Down"] = "DOWN";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        BgpIpv6SessionState["UnknownValue"] = "UNKNOWN_VALUE";
    })(BgpIpv6SessionState = VirtualCircuit.BgpIpv6SessionState || (VirtualCircuit.BgpIpv6SessionState = {}));
    let RoutingPolicy;
    (function (RoutingPolicy) {
        RoutingPolicy["OracleServiceNetwork"] = "ORACLE_SERVICE_NETWORK";
        RoutingPolicy["Regional"] = "REGIONAL";
        RoutingPolicy["MarketLevel"] = "MARKET_LEVEL";
        RoutingPolicy["Global"] = "GLOBAL";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        RoutingPolicy["UnknownValue"] = "UNKNOWN_VALUE";
    })(RoutingPolicy = VirtualCircuit.RoutingPolicy || (VirtualCircuit.RoutingPolicy = {}));
    let BgpAdminState;
    (function (BgpAdminState) {
        BgpAdminState["Enabled"] = "ENABLED";
        BgpAdminState["Disabled"] = "DISABLED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        BgpAdminState["UnknownValue"] = "UNKNOWN_VALUE";
    })(BgpAdminState = VirtualCircuit.BgpAdminState || (VirtualCircuit.BgpAdminState = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["PendingProvider"] = "PENDING_PROVIDER";
        LifecycleState["Verifying"] = "VERIFYING";
        LifecycleState["Provisioning"] = "PROVISIONING";
        LifecycleState["Provisioned"] = "PROVISIONED";
        LifecycleState["Failed"] = "FAILED";
        LifecycleState["Inactive"] = "INACTIVE";
        LifecycleState["Terminating"] = "TERMINATING";
        LifecycleState["Terminated"] = "TERMINATED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = VirtualCircuit.LifecycleState || (VirtualCircuit.LifecycleState = {}));
    let ProviderState;
    (function (ProviderState) {
        ProviderState["Active"] = "ACTIVE";
        ProviderState["Inactive"] = "INACTIVE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ProviderState["UnknownValue"] = "UNKNOWN_VALUE";
    })(ProviderState = VirtualCircuit.ProviderState || (VirtualCircuit.ProviderState = {}));
    let ServiceType;
    (function (ServiceType) {
        ServiceType["Colocated"] = "COLOCATED";
        ServiceType["Layer2"] = "LAYER2";
        ServiceType["Layer3"] = "LAYER3";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ServiceType["UnknownValue"] = "UNKNOWN_VALUE";
    })(ServiceType = VirtualCircuit.ServiceType || (VirtualCircuit.ServiceType = {}));
    let Type;
    (function (Type) {
        Type["Public"] = "PUBLIC";
        Type["Private"] = "PRIVATE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Type["UnknownValue"] = "UNKNOWN_VALUE";
    })(Type = VirtualCircuit.Type || (VirtualCircuit.Type = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "crossConnectMappings": obj.crossConnectMappings
                ? obj.crossConnectMappings.map(item => {
                    return model.CrossConnectMapping.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    VirtualCircuit.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "crossConnectMappings": obj.crossConnectMappings
                ? obj.crossConnectMappings.map(item => {
                    return model.CrossConnectMapping.getDeserializedJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    VirtualCircuit.getDeserializedJsonObj = getDeserializedJsonObj;
})(VirtualCircuit = exports.VirtualCircuit || (exports.VirtualCircuit = {}));
//# sourceMappingURL=virtual-circuit.js.map