"use strict";
/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeAttachment = void 0;
const model = __importStar(require("../model"));
var VolumeAttachment;
(function (VolumeAttachment) {
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Attaching"] = "ATTACHING";
        LifecycleState["Attached"] = "ATTACHED";
        LifecycleState["Detaching"] = "DETACHING";
        LifecycleState["Detached"] = "DETACHED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = VolumeAttachment.LifecycleState || (VolumeAttachment.LifecycleState = {}));
    let IscsiLoginState;
    (function (IscsiLoginState) {
        IscsiLoginState["Unknown"] = "UNKNOWN";
        IscsiLoginState["LoggingIn"] = "LOGGING_IN";
        IscsiLoginState["LoginSucceeded"] = "LOGIN_SUCCEEDED";
        IscsiLoginState["LoginFailed"] = "LOGIN_FAILED";
        IscsiLoginState["LoggingOut"] = "LOGGING_OUT";
        IscsiLoginState["LogoutSucceeded"] = "LOGOUT_SUCCEEDED";
        IscsiLoginState["LogoutFailed"] = "LOGOUT_FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        IscsiLoginState["UnknownValue"] = "UNKNOWN_VALUE";
    })(IscsiLoginState = VolumeAttachment.IscsiLoginState || (VolumeAttachment.IscsiLoginState = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "attachmentType" in obj && obj.attachmentType) {
            switch (obj.attachmentType) {
                case "iscsi":
                    return model.IScsiVolumeAttachment.getJsonObj(jsonObj, true);
                case "emulated":
                    return model.EmulatedVolumeAttachment.getJsonObj(jsonObj, true);
                case "paravirtualized":
                    return model.ParavirtualizedVolumeAttachment.getJsonObj(jsonObj, true);
                default:
                    throw Error("Unknown value for: " + obj.attachmentType);
            }
        }
        return jsonObj;
    }
    VolumeAttachment.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "attachmentType" in obj && obj.attachmentType) {
            switch (obj.attachmentType) {
                case "iscsi":
                    return model.IScsiVolumeAttachment.getDeserializedJsonObj(jsonObj, true);
                case "emulated":
                    return model.EmulatedVolumeAttachment.getDeserializedJsonObj(jsonObj, true);
                case "paravirtualized":
                    return model.ParavirtualizedVolumeAttachment.getDeserializedJsonObj(jsonObj, true);
                default:
                    throw Error("Unknown value for: " + obj.attachmentType);
            }
        }
        return jsonObj;
    }
    VolumeAttachment.getDeserializedJsonObj = getDeserializedJsonObj;
})(VolumeAttachment = exports.VolumeAttachment || (exports.VolumeAttachment = {}));
//# sourceMappingURL=volume-attachment.js.map