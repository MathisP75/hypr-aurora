/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Information about a single IPSec tunnel in an IPSec connection. This object does not include the tunnel's
 * shared secret (pre-shared key), which is found in the
 * {@link IPSecConnectionTunnelSharedSecret} object.
 *
 */
export interface IPSecConnectionTunnel {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the tunnel.
     *
     */
    "compartmentId": string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tunnel.
     */
    "id": string;
    /**
      * The IP address of the Oracle VPN headend for the connection.
  * <p>
  Example: `203.0.113.21`
  *
      */
    "vpnIp"?: string;
    /**
      * The IP address of the CPE device's VPN headend.
  * <p>
  Example: `203.0.113.22`
  *
      */
    "cpeIp"?: string;
    /**
     * The status of the tunnel based on IPSec protocol characteristics.
     */
    "status"?: IPSecConnectionTunnel.Status;
    /**
     * Internet Key Exchange protocol version.
     *
     */
    "ikeVersion"?: IPSecConnectionTunnel.IkeVersion;
    /**
     * The tunnel's lifecycle state.
     */
    "lifecycleState": IPSecConnectionTunnel.LifecycleState;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable.
     * Avoid entering confidential information.
     *
     */
    "displayName"?: string;
    "bgpSessionInfo"?: model.BgpSessionInfo;
    "encryptionDomainConfig"?: model.EncryptionDomainConfig;
    /**
     * The type of routing used for this tunnel (BGP dynamic routing, static routing, or policy-based routing).
     *
     */
    "routing"?: IPSecConnectionTunnel.Routing;
    /**
      * The date and time the IPSec tunnel was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
  * <p>
  Example: `2016-08-25T21:10:29.600Z`
  *
      */
    "timeCreated"?: Date;
    /**
      * When the status of the IPSec tunnel last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
  * <p>
  Example: `2016-08-25T21:10:29.600Z`
  *
      */
    "timeStatusUpdated"?: Date;
    /**
     * Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device, or both respond to and initiate requests.
     *
     */
    "oracleCanInitiate"?: IPSecConnectionTunnel.OracleCanInitiate;
    /**
      * By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500,
  * and when it detects that the port used to forward packets has changed (most likely because a NAT device
  * is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
  * <p>
  The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
  * <p>
  The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T
  * even if it senses there may be a NAT device in use.
  * <p>
  
  * .
  *
      */
    "natTranslationEnabled"?: IPSecConnectionTunnel.NatTranslationEnabled;
    /**
     * Dead peer detection (DPD) mode set on the Oracle side of the connection.
     * This mode sets whether Oracle can only respond to a request from the CPE device to start DPD,
     * or both respond to and initiate requests.
     *
     */
    "dpdMode"?: IPSecConnectionTunnel.DpdMode;
    /**
     * DPD timeout in seconds. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "dpdTimeoutInSec"?: number;
    "phaseOneDetails"?: model.TunnelPhaseOneDetails;
    "phaseTwoDetails"?: model.TunnelPhaseTwoDetails;
}
export declare namespace IPSecConnectionTunnel {
    enum Status {
        Up = "UP",
        Down = "DOWN",
        DownForMaintenance = "DOWN_FOR_MAINTENANCE",
        PartialUp = "PARTIAL_UP",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum IkeVersion {
        V1 = "V1",
        V2 = "V2",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum LifecycleState {
        Provisioning = "PROVISIONING",
        Available = "AVAILABLE",
        Terminating = "TERMINATING",
        Terminated = "TERMINATED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum Routing {
        Bgp = "BGP",
        Static = "STATIC",
        Policy = "POLICY",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum OracleCanInitiate {
        InitiatorOrResponder = "INITIATOR_OR_RESPONDER",
        ResponderOnly = "RESPONDER_ONLY",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum NatTranslationEnabled {
        Enabled = "ENABLED",
        Disabled = "DISABLED",
        Auto = "AUTO",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum DpdMode {
        InitiateAndRespond = "INITIATE_AND_RESPOND",
        RespondOnly = "RESPOND_ONLY",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: IPSecConnectionTunnel): object;
    function getDeserializedJsonObj(obj: IPSecConnectionTunnel): object;
}
