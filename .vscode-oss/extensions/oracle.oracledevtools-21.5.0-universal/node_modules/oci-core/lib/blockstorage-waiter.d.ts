/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { BlockstorageClient } from "./client";
import { WorkRequestClient, responses } from "oci-workrequests";
export declare class BlockstorageWaiter {
    private client;
    private workRequestClient;
    private readonly config?;
    constructor(client: BlockstorageClient, workRequestClient: WorkRequestClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forCopyBootVolumeBackup
     *
     * @param request the request to send
     * @return response returns CopyBootVolumeBackupResponse, GetWorkRequestResponse tuple
     */
    forCopyBootVolumeBackup(request: serviceRequests.CopyBootVolumeBackupRequest): Promise<{
        response: serviceResponses.CopyBootVolumeBackupResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCopyVolumeBackup
     *
     * @param request the request to send
     * @return response returns CopyVolumeBackupResponse, GetWorkRequestResponse tuple
     */
    forCopyVolumeBackup(request: serviceRequests.CopyVolumeBackupRequest): Promise<{
        response: serviceResponses.CopyVolumeBackupResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forBlockVolumeReplica till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBlockVolumeReplicaResponse | null (null in case of 404 response)
     */
    forBlockVolumeReplica(request: serviceRequests.GetBlockVolumeReplicaRequest, ...targetStates: models.BlockVolumeReplica.LifecycleState[]): Promise<serviceResponses.GetBlockVolumeReplicaResponse | null>;
    /**
     * Waits forBootVolume till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBootVolumeResponse | null (null in case of 404 response)
     */
    forBootVolume(request: serviceRequests.GetBootVolumeRequest, ...targetStates: models.BootVolume.LifecycleState[]): Promise<serviceResponses.GetBootVolumeResponse | null>;
    /**
     * Waits forBootVolumeBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBootVolumeBackupResponse | null (null in case of 404 response)
     */
    forBootVolumeBackup(request: serviceRequests.GetBootVolumeBackupRequest, ...targetStates: models.BootVolumeBackup.LifecycleState[]): Promise<serviceResponses.GetBootVolumeBackupResponse | null>;
    /**
     * Waits forBootVolumeReplica till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBootVolumeReplicaResponse | null (null in case of 404 response)
     */
    forBootVolumeReplica(request: serviceRequests.GetBootVolumeReplicaRequest, ...targetStates: models.BootVolumeReplica.LifecycleState[]): Promise<serviceResponses.GetBootVolumeReplicaResponse | null>;
    /**
     * Waits forVolume till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeResponse | null (null in case of 404 response)
     */
    forVolume(request: serviceRequests.GetVolumeRequest, ...targetStates: models.Volume.LifecycleState[]): Promise<serviceResponses.GetVolumeResponse | null>;
    /**
     * Waits forVolumeBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeBackupResponse | null (null in case of 404 response)
     */
    forVolumeBackup(request: serviceRequests.GetVolumeBackupRequest, ...targetStates: models.VolumeBackup.LifecycleState[]): Promise<serviceResponses.GetVolumeBackupResponse | null>;
    /**
     * Waits forVolumeGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeGroupResponse | null (null in case of 404 response)
     */
    forVolumeGroup(request: serviceRequests.GetVolumeGroupRequest, ...targetStates: models.VolumeGroup.LifecycleState[]): Promise<serviceResponses.GetVolumeGroupResponse | null>;
    /**
     * Waits forVolumeGroupBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeGroupBackupResponse | null (null in case of 404 response)
     */
    forVolumeGroupBackup(request: serviceRequests.GetVolumeGroupBackupRequest, ...targetStates: models.VolumeGroupBackup.LifecycleState[]): Promise<serviceResponses.GetVolumeGroupBackupResponse | null>;
    /**
     * Waits forVolumeGroupReplica till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeGroupReplicaResponse | null (null in case of 404 response)
     */
    forVolumeGroupReplica(request: serviceRequests.GetVolumeGroupReplicaRequest, ...targetStates: models.VolumeGroupReplica.LifecycleState[]): Promise<serviceResponses.GetVolumeGroupReplicaResponse | null>;
}
