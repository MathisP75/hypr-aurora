"use strict";
/**
 * Identity and Access Management Service API
 * APIs for managing users, groups, compartments, policies, and identity domains.
 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityClient = exports.IdentityApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const identity_waiter_1 = require("./identity-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var IdentityApiKeys;
(function (IdentityApiKeys) {
})(IdentityApiKeys = exports.IdentityApiKeys || (exports.IdentityApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class IdentityClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this.targetService = "Identity";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20160918";
        if (this.logger)
            this.logger.info(`IdentityClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(IdentityClient.serviceEndpointTemplate, region, IdentityClient.endpointServiceName);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(IdentityClient.serviceEndpointTemplate, regionId, IdentityClient.endpointServiceName);
    }
    /**
     * Creates a new IdentityWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new identity_waiter_1.IdentityWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
       * (For tenancies that support identity domains) Activates a deactivated identity domain. You can only activate identity domains that your user account is not a part of.
  * <p>
  After you send the request, the `lifecycleDetails` of the identity domain is set to ACTIVATING. When the operation completes, the
  * `lifecycleDetails` is set to null and the `lifecycleState` of the identity domain is set to ACTIVE.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ActivateDomainRequest
       * @return ActivateDomainResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ActivateDomain.ts.html |here} to see how to use ActivateDomain API.
       */
    activateDomain(activateDomainRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#activateDomain.");
            const operationName = "activateDomain";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Domain/ActivateDomain";
            const pathParams = {
                "{domainId}": activateDomainRequest.domainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": activateDomainRequest.opcRequestId,
                "opc-retry-token": activateDomainRequest.opcRetryToken,
                "if-match": activateDomainRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, activateDomainRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/domains/{domainId}/actions/activate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Activates the specified MFA TOTP device for the user. Activation requires manual interaction with the Console.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ActivateMfaTotpDeviceRequest
     * @return ActivateMfaTotpDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ActivateMfaTotpDevice.ts.html |here} to see how to use ActivateMfaTotpDevice API.
     */
    activateMfaTotpDevice(activateMfaTotpDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#activateMfaTotpDevice.");
            const operationName = "activateMfaTotpDevice";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/MfaTotpDeviceSummary/ActivateMfaTotpDevice";
            const pathParams = {
                "{userId}": activateMfaTotpDeviceRequest.userId,
                "{mfaTotpDeviceId}": activateMfaTotpDeviceRequest.mfaTotpDeviceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": activateMfaTotpDeviceRequest.ifMatch,
                "opc-retry-token": activateMfaTotpDeviceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, activateMfaTotpDeviceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/mfaTotpDevices/{mfaTotpDeviceId}/actions/activate",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(activateMfaTotpDeviceRequest.mfaTotpToken, "MfaTotpToken", model.MfaTotpToken.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mfaTotpDeviceSummary",
                    bodyModel: model.MfaTotpDeviceSummary,
                    type: "model.MfaTotpDeviceSummary",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Adds the specified user to the specified group and returns a `UserGroupMembership` object with its own OCID.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param AddUserToGroupRequest
       * @return AddUserToGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/AddUserToGroup.ts.html |here} to see how to use AddUserToGroup API.
       */
    addUserToGroup(addUserToGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#addUserToGroup.");
            const operationName = "addUserToGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/UserGroupMembership/AddUserToGroup";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": addUserToGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addUserToGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userGroupMemberships",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addUserToGroupRequest.addUserToGroupDetails, "AddUserToGroupDetails", model.AddUserToGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userGroupMembership",
                    bodyModel: model.UserGroupMembership,
                    type: "model.UserGroupMembership",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Assembles tag defaults in the specified compartment and any parent compartments to determine
     * the tags to apply. Tag defaults from parent compartments do not override tag defaults
     * referencing the same tag in a compartment lower down the hierarchy. This set of tag defaults
     * includes all tag defaults from the current compartment back to the root compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AssembleEffectiveTagSetRequest
     * @return AssembleEffectiveTagSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/AssembleEffectiveTagSet.ts.html |here} to see how to use AssembleEffectiveTagSet API.
     */
    assembleEffectiveTagSet(assembleEffectiveTagSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#assembleEffectiveTagSet.");
            const operationName = "assembleEffectiveTagSet";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagDefault/AssembleEffectiveTagSet";
            const pathParams = {};
            const queryParams = {
                "compartmentId": assembleEffectiveTagSetRequest.compartmentId,
                "lifecycleState": assembleEffectiveTagSetRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, assembleEffectiveTagSetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagDefaults/actions/assembleEffectiveTagSet",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.TagDefaultSummary,
                    type: "Array<model.TagDefaultSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes multiple resources in the compartment. All resources must be in the same compartment. You must have the appropriate
     * permissions to delete the resources in the request. This API can only be invoked from the tenancy's
     * [home region](https://docs.cloud.oracle.com/Content/Identity/regions/managingregions.htm#Home). This operation creates a
     * {@link WorkRequest}. Use the {@link #getWorkRequest(GetWorkRequestRequest) getWorkRequest}
     * API to monitor the status of the bulk action.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkDeleteResourcesRequest
     * @return BulkDeleteResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/BulkDeleteResources.ts.html |here} to see how to use BulkDeleteResources API.
     */
    bulkDeleteResources(bulkDeleteResourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#bulkDeleteResources.");
            const operationName = "bulkDeleteResources";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Compartment/BulkDeleteResources";
            const pathParams = {
                "{compartmentId}": bulkDeleteResourcesRequest.compartmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": bulkDeleteResourcesRequest.opcRequestId,
                "opc-retry-token": bulkDeleteResourcesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, bulkDeleteResourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compartments/{compartmentId}/actions/bulkDeleteResources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(bulkDeleteResourcesRequest.bulkDeleteResourcesDetails, "BulkDeleteResourcesDetails", model.BulkDeleteResourcesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified tag key definitions. This operation triggers a process that removes the
  * tags from all resources in your tenancy. The tag key definitions must be within the same tag namespace.
  * <p>
  The following actions happen immediately:
  * \u00A0
  *   * If the tag is a cost-tracking tag, the tag no longer counts against your
  *   10 cost-tracking tags limit, even if you do not disable the tag before running this operation.
  *   * If the tag is used with dynamic groups, the rules that contain the tag are no longer
  *   evaluated against the tag.
  * <p>
  After you start this operation, the state of the tag changes to DELETING, and tag removal
  * from resources begins. This process can take up to 48 hours depending on the number of resources that
  * are tagged and the regions in which those resources reside.
  * <p>
  When all tags have been removed, the state changes to DELETED. You cannot restore a deleted tag. After the tag state
  * changes to DELETED, you can use the same tag name again.
  * <p>
  After you start this operation, you cannot start either the {@link #deleteTag(DeleteTagRequest) deleteTag} or the {@link #cascadeDeleteTagNamespace(CascadeDeleteTagNamespaceRequest) cascadeDeleteTagNamespace} operation until this process completes.
  * <p>
  In order to delete tags, you must first retire the tags. Use {@link #updateTag(UpdateTagRequest) updateTag}
  * to retire a tag.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param BulkDeleteTagsRequest
       * @return BulkDeleteTagsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/BulkDeleteTags.ts.html |here} to see how to use BulkDeleteTags API.
       */
    bulkDeleteTags(bulkDeleteTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#bulkDeleteTags.");
            const operationName = "bulkDeleteTags";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Tag/BulkDeleteTags";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": bulkDeleteTagsRequest.opcRequestId,
                "opc-retry-token": bulkDeleteTagsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, bulkDeleteTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tags/actions/bulkDelete",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(bulkDeleteTagsRequest.bulkDeleteTagsDetails, "BulkDeleteTagsDetails", model.BulkDeleteTagsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Edits the specified list of tag key definitions for the selected resources.
  * This operation triggers a process that edits the tags on all selected resources. The possible actions are:
  * <p>
    * Add a defined tag when the tag does not already exist on the resource.
  *   * Update the value for a defined tag when the tag is present on the resource.
  *   * Add a defined tag when it does not already exist on the resource or update the value for a defined tag when the tag is present on the resource.
  *   * Remove a defined tag from a resource. The tag is removed from the resource regardless of the tag value.
  * <p>
  See {@link #bulkEditOperationDetails(BulkEditOperationDetailsRequest) bulkEditOperationDetails} for more information.
  * <p>
  The edits can include a combination of operations and tag sets.
  * However, multiple operations cannot apply to one key definition in the same request.
  * For example, if one request adds `tag set-1` to a resource and sets a tag value to `tag set-2`,
  * `tag set-1` and `tag set-2` cannot have any common tag definitions.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param BulkEditTagsRequest
       * @return BulkEditTagsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/BulkEditTags.ts.html |here} to see how to use BulkEditTags API.
       */
    bulkEditTags(bulkEditTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#bulkEditTags.");
            const operationName = "bulkEditTags";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Tag/BulkEditTags";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": bulkEditTagsRequest.opcRequestId,
                "opc-retry-token": bulkEditTagsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, bulkEditTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tags/actions/bulkEdit",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(bulkEditTagsRequest.bulkEditTagsDetails, "BulkEditTagsDetails", model.BulkEditTagsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves multiple resources from one compartment to another. All resources must be in the same compartment.
     * This API can only be invoked from the tenancy's [home region](https://docs.cloud.oracle.com/Content/Identity/regions/managingregions.htm#Home).
     * To move resources, you must have the appropriate permissions to move the resource in both the source and target
     * compartments. This operation creates a {@link WorkRequest}.
     * Use the {@link #getWorkRequest(GetWorkRequestRequest) getWorkRequest} API to monitor the status of the bulk action.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkMoveResourcesRequest
     * @return BulkMoveResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/BulkMoveResources.ts.html |here} to see how to use BulkMoveResources API.
     */
    bulkMoveResources(bulkMoveResourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#bulkMoveResources.");
            const operationName = "bulkMoveResources";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Compartment/BulkMoveResources";
            const pathParams = {
                "{compartmentId}": bulkMoveResourcesRequest.compartmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": bulkMoveResourcesRequest.opcRequestId,
                "opc-retry-token": bulkMoveResourcesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, bulkMoveResourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compartments/{compartmentId}/actions/bulkMoveResources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(bulkMoveResourcesRequest.bulkMoveResourcesDetails, "BulkMoveResourcesDetails", model.BulkMoveResourcesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified tag namespace. This operation triggers a process that removes all of the tags
  * defined in the specified tag namespace from all resources in your tenancy and then deletes the tag namespace.
  * <p>
  After you start the delete operation:
  * <p>
    * New tag key definitions cannot be created under the namespace.
  *   * The state of the tag namespace changes to DELETING.
  *   * Tag removal from the resources begins.
  * <p>
  This process can take up to 48 hours depending on the number of tag definitions in the namespace, the number of resources
  * that are tagged, and the locations of the regions in which those resources reside.
  * <p>
  After all tags are removed, the state changes to DELETED. You cannot restore a deleted tag namespace. After the deleted tag namespace
  * changes its state to DELETED, you can use the name of the deleted tag namespace again.
  * <p>
  After you start this operation, you cannot start either the {@link #deleteTag(DeleteTagRequest) deleteTag} or the {@link #bulkDeleteTags(BulkDeleteTagsRequest) bulkDeleteTags} operation until this process completes.
  * <p>
  To delete a tag namespace, you must first retire it. Use {@link #updateTagNamespace(UpdateTagNamespaceRequest) updateTagNamespace}
  * to retire a tag namespace.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CascadeDeleteTagNamespaceRequest
       * @return CascadeDeleteTagNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CascadeDeleteTagNamespace.ts.html |here} to see how to use CascadeDeleteTagNamespace API.
       */
    cascadeDeleteTagNamespace(cascadeDeleteTagNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#cascadeDeleteTagNamespace.");
            const operationName = "cascadeDeleteTagNamespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagNamespace/CascadeDeleteTagNamespace";
            const pathParams = {
                "{tagNamespaceId}": cascadeDeleteTagNamespaceRequest.tagNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": cascadeDeleteTagNamespaceRequest.ifMatch,
                "opc-request-id": cascadeDeleteTagNamespaceRequest.opcRequestId,
                "opc-retry-token": cascadeDeleteTagNamespaceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cascadeDeleteTagNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/{tagNamespaceId}/actions/cascadeDelete",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * (For tenancies that support identity domains) Moves the identity domain to a different compartment in the tenancy.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeDomainCompartmentRequest
       * @return ChangeDomainCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ChangeDomainCompartment.ts.html |here} to see how to use ChangeDomainCompartment API.
       */
    changeDomainCompartment(changeDomainCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#changeDomainCompartment.");
            const operationName = "changeDomainCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Domain/ChangeDomainCompartment";
            const pathParams = {
                "{domainId}": changeDomainCompartmentRequest.domainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeDomainCompartmentRequest.opcRequestId,
                "opc-retry-token": changeDomainCompartmentRequest.opcRetryToken,
                "if-match": changeDomainCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDomainCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/domains/{domainId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDomainCompartmentRequest.changeDomainCompartmentDetails, "ChangeDomainCompartmentDetails", model.ChangeDomainCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * (For tenancies that support identity domains) Changes the license type of the given identity domain. The identity domain's
  * `lifecycleState` must be set to ACTIVE and the requested `licenseType` must be allowed. To retrieve the allowed `licenseType` for
  * the identity domain, use {@link #listAllowedDomainLicenseTypes(ListAllowedDomainLicenseTypesRequest) listAllowedDomainLicenseTypes}.
  * <p>
  After you send your request, the `lifecycleDetails` of this identity domain is set to UPDATING. When the update of the identity
  * domain completes, then the `lifecycleDetails` is set to null.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeDomainLicenseTypeRequest
       * @return ChangeDomainLicenseTypeResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ChangeDomainLicenseType.ts.html |here} to see how to use ChangeDomainLicenseType API.
       */
    changeDomainLicenseType(changeDomainLicenseTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#changeDomainLicenseType.");
            const operationName = "changeDomainLicenseType";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Domain/ChangeDomainLicenseType";
            const pathParams = {
                "{domainId}": changeDomainLicenseTypeRequest.domainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeDomainLicenseTypeRequest.opcRequestId,
                "opc-retry-token": changeDomainLicenseTypeRequest.opcRetryToken,
                "if-match": changeDomainLicenseTypeRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDomainLicenseTypeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/domains/{domainId}/actions/changeLicenseType",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDomainLicenseTypeRequest.changeDomainLicenseTypeDetails, "ChangeDomainLicenseTypeDetails", model.ChangeDomainLicenseTypeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves the specified tag namespace to the specified compartment within the same tenancy.
  * <p>
  To move the tag namespace, you must have the manage tag-namespaces permission on both compartments.
  * For more information about IAM policies, see [Details for IAM](https://docs.cloud.oracle.com/Content/Identity/policyreference/iampolicyreference.htm).
  * <p>
  Moving a tag namespace moves all the tag key definitions contained in the tag namespace.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeTagNamespaceCompartmentRequest
       * @return ChangeTagNamespaceCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ChangeTagNamespaceCompartment.ts.html |here} to see how to use ChangeTagNamespaceCompartment API.
       */
    changeTagNamespaceCompartment(changeTagNamespaceCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#changeTagNamespaceCompartment.");
            const operationName = "changeTagNamespaceCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagNamespace/ChangeTagNamespaceCompartment";
            const pathParams = {
                "{tagNamespaceId}": changeTagNamespaceCompartmentRequest.tagNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": changeTagNamespaceCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeTagNamespaceCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/{tagNamespaceId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeTagNamespaceCompartmentRequest.changeTagNamespaceCompartmentDetail, "ChangeTagNamespaceCompartmentDetail", model.ChangeTagNamespaceCompartmentDetail.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new auth token for the specified user. For information about what auth tokens are for, see
  * [Managing User Credentials](https://docs.cloud.oracle.com/Content/Identity/access/managing-user-credentials.htm).
  * <p>
  You must specify a *description* for the auth token (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with
  * {@link #updateAuthToken(UpdateAuthTokenRequest) updateAuthToken}.
  * <p>
  Every user has permission to create an auth token for *their own user ID*. An administrator in your organization
  * does not need to write a policy to give users this ability. To compare, administrators who have permission to the
  * tenancy can use this operation to create an auth token for any user, including themselves.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateAuthTokenRequest
       * @return CreateAuthTokenResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateAuthToken.ts.html |here} to see how to use CreateAuthToken API.
       */
    createAuthToken(createAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createAuthToken.");
            const operationName = "createAuthToken";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/AuthToken/CreateAuthToken";
            const pathParams = {
                "{userId}": createAuthTokenRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createAuthTokenRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/authTokens",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAuthTokenRequest.createAuthTokenDetails, "CreateAuthTokenDetails", model.CreateAuthTokenDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authToken",
                    bodyModel: model.AuthToken,
                    type: "model.AuthToken",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new compartment in the specified compartment.
  * <p>
  Specify the parent compartment's OCID as the compartment ID in the request object. Remember that the tenancy
  * is simply the root compartment. For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the compartment, which must be unique across all compartments in
  * your tenancy. You can use this name or the OCID when writing policies that apply
  * to the compartment. For more information about policies, see
  * [How Policies Work](https://docs.cloud.oracle.com/Content/Identity/policieshow/how-policies-work.htm).
  * <p>
  You must also specify a *description* for the compartment (although it can be an empty string). It does
  * not have to be unique, and you can change it anytime with
  * {@link #updateCompartment(UpdateCompartmentRequest) updateCompartment}.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateCompartmentRequest
       * @return CreateCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateCompartment.ts.html |here} to see how to use CreateCompartment API.
       */
    createCompartment(createCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createCompartment.");
            const operationName = "createCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Compartment/CreateCompartment";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compartments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCompartmentRequest.createCompartmentDetails, "CreateCompartmentDetails", model.CreateCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "compartment",
                    bodyModel: model.Compartment,
                    type: "model.Compartment",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new secret key for the specified user. Secret keys are used for authentication with the Object Storage Service's Amazon S3
  * compatible API. The secret key consists of an Access Key/Secret Key pair. For information, see
  * [Managing User Credentials](https://docs.cloud.oracle.com/Content/Identity/access/managing-user-credentials.htm).
  * <p>
  You must specify a *description* for the secret key (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with
  * {@link #updateCustomerSecretKey(UpdateCustomerSecretKeyRequest) updateCustomerSecretKey}.
  * <p>
  Every user has permission to create a secret key for *their own user ID*. An administrator in your organization
  * does not need to write a policy to give users this ability. To compare, administrators who have permission to the
  * tenancy can use this operation to create a secret key for any user, including themselves.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateCustomerSecretKeyRequest
       * @return CreateCustomerSecretKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateCustomerSecretKey.ts.html |here} to see how to use CreateCustomerSecretKey API.
       */
    createCustomerSecretKey(createCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createCustomerSecretKey.");
            const operationName = "createCustomerSecretKey";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/CustomerSecretKey/CreateCustomerSecretKey";
            const pathParams = {
                "{userId}": createCustomerSecretKeyRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createCustomerSecretKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/customerSecretKeys",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCustomerSecretKeyRequest.createCustomerSecretKeyDetails, "CreateCustomerSecretKeyDetails", model.CreateCustomerSecretKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customerSecretKey",
                    bodyModel: model.CustomerSecretKey,
                    type: "model.CustomerSecretKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new DB credential for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDbCredentialRequest
     * @return CreateDbCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateDbCredential.ts.html |here} to see how to use CreateDbCredential API.
     */
    createDbCredential(createDbCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createDbCredential.");
            const operationName = "createDbCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/CreateDbCredential";
            const pathParams = {
                "{userId}": createDbCredentialRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createDbCredentialRequest.opcRequestId,
                "opc-retry-token": createDbCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDbCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/dbCredentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDbCredentialRequest.createDbCredentialDetails, "CreateDbCredentialDetails", model.CreateDbCredentialDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dbCredential",
                    bodyModel: model.DbCredential,
                    type: "model.DbCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * (For tenancies that support identity domains) Creates a new identity domain in the tenancy with the identity domain home in `homeRegion`.
  * After you send your request, the temporary `lifecycleState` of this identity domain is set to CREATING and `lifecycleDetails` to UPDATING.
  * When creation of the identity domain completes, this identity domain's `lifecycleState` is set to ACTIVE and `lifecycleDetails` to null.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  * <p>
  After creating an `identity domain`, first make sure its `lifecycleState` changes from CREATING to ACTIVE before you use it.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateDomainRequest
       * @return CreateDomainResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateDomain.ts.html |here} to see how to use CreateDomain API.
       */
    createDomain(createDomainRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createDomain.");
            const operationName = "createDomain";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Domain/CreateDomain";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDomainRequest.opcRetryToken,
                "opc-request-id": createDomainRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDomainRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/domains",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDomainRequest.createDomainDetails, "CreateDomainDetails", model.CreateDomainDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new dynamic group in your tenancy.
  * <p>
  You must specify your tenancy's OCID as the compartment ID in the request object (remember that the tenancy
  * is simply the root compartment). Notice that IAM resources (users, groups, compartments, and some policies)
  * reside within the tenancy itself, unlike cloud resources such as compute instances, which typically
  * reside within compartments inside the tenancy. For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the dynamic group, which must be unique across all dynamic groups in your
  * tenancy, and cannot be changed. Note that this name has to be also unique across all groups in your tenancy.
  * You can use this name or the OCID when writing policies that apply to the dynamic group. For more information
  * about policies, see [How Policies Work](https://docs.cloud.oracle.com/Content/Identity/policieshow/how-policies-work.htm).
  * <p>
  You must also specify a *description* for the dynamic group (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with {@link #updateDynamicGroup(UpdateDynamicGroupRequest) updateDynamicGroup}.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateDynamicGroupRequest
       * @return CreateDynamicGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateDynamicGroup.ts.html |here} to see how to use CreateDynamicGroup API.
       */
    createDynamicGroup(createDynamicGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createDynamicGroup.");
            const operationName = "createDynamicGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/DynamicGroup/CreateDynamicGroup";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDynamicGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDynamicGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dynamicGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDynamicGroupRequest.createDynamicGroupDetails, "CreateDynamicGroupDetails", model.CreateDynamicGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dynamicGroup",
                    bodyModel: model.DynamicGroup,
                    type: "model.DynamicGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new group in your tenancy.
  * <p>
  You must specify your tenancy's OCID as the compartment ID in the request object (remember that the tenancy
  * is simply the root compartment). Notice that IAM resources (users, groups, compartments, and some policies)
  * reside within the tenancy itself, unlike cloud resources such as compute instances, which typically
  * reside within compartments inside the tenancy. For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the group, which must be unique across all groups in your tenancy and
  * cannot be changed. You can use this name or the OCID when writing policies that apply to the group. For more
  * information about policies, see [How Policies Work](https://docs.cloud.oracle.com/Content/Identity/policieshow/how-policies-work.htm).
  * <p>
  You must also specify a *description* for the group (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with {@link #updateGroup(UpdateGroupRequest) updateGroup}.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  * <p>
  After creating the group, you need to put users in it and write policies for it.
  * See {@link #addUserToGroup(AddUserToGroupRequest) addUserToGroup} and
  * {@link #createPolicy(CreatePolicyRequest) createPolicy}.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateGroupRequest
       * @return CreateGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateGroup.ts.html |here} to see how to use CreateGroup API.
       */
    createGroup(createGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createGroup.");
            const operationName = "createGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Group/CreateGroup";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/groups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createGroupRequest.createGroupDetails, "CreateGroupDetails", model.CreateGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "group",
                    bodyModel: model.Group,
                    type: "model.Group",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Creates a new identity provider in your tenancy. For more information, see
  * [Identity Providers and Federation](https://docs.cloud.oracle.com/Content/Identity/Concepts/federation.htm).
  * <p>
  You must specify your tenancy's OCID as the compartment ID in the request object.
  * Remember that the tenancy is simply the root compartment. For information about
  * OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the `IdentityProvider`, which must be unique
  * across all `IdentityProvider` objects in your tenancy and cannot be changed.
  * <p>
  You must also specify a *description* for the `IdentityProvider` (although
  * it can be an empty string). It does not have to be unique, and you can change
  * it anytime with
  * {@link #updateIdentityProvider(UpdateIdentityProviderRequest) updateIdentityProvider}.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily
  * be CREATING. Before using the object, first make sure its `lifecycleState` has
  * changed to ACTIVE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateIdentityProviderRequest
       * @return CreateIdentityProviderResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateIdentityProvider.ts.html |here} to see how to use CreateIdentityProvider API.
       */
    createIdentityProvider(createIdentityProviderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createIdentityProvider.");
            const operationName = "createIdentityProvider";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IdentityProvider/CreateIdentityProvider";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createIdentityProviderRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createIdentityProviderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createIdentityProviderRequest.createIdentityProviderDetails, "CreateIdentityProviderDetails", model.CreateIdentityProviderDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "identityProvider",
                    bodyModel: model.IdentityProvider,
                    type: "model.IdentityProvider",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Creates a single mapping between an IdP group and an IAM Service
  * {@link Group}.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateIdpGroupMappingRequest
       * @return CreateIdpGroupMappingResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateIdpGroupMapping.ts.html |here} to see how to use CreateIdpGroupMapping API.
       */
    createIdpGroupMapping(createIdpGroupMappingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createIdpGroupMapping.");
            const operationName = "createIdpGroupMapping";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IdpGroupMapping/CreateIdpGroupMapping";
            const pathParams = {
                "{identityProviderId}": createIdpGroupMappingRequest.identityProviderId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createIdpGroupMappingRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createIdpGroupMappingRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders/{identityProviderId}/groupMappings",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createIdpGroupMappingRequest.createIdpGroupMappingDetails, "CreateIdpGroupMappingDetails", model.CreateIdpGroupMappingDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "idpGroupMapping",
                    bodyModel: model.IdpGroupMapping,
                    type: "model.IdpGroupMapping",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new MFA TOTP device for the user. A user can have one MFA TOTP device.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMfaTotpDeviceRequest
     * @return CreateMfaTotpDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateMfaTotpDevice.ts.html |here} to see how to use CreateMfaTotpDevice API.
     */
    createMfaTotpDevice(createMfaTotpDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createMfaTotpDevice.");
            const operationName = "createMfaTotpDevice";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/MfaTotpDevice/CreateMfaTotpDevice";
            const pathParams = {
                "{userId}": createMfaTotpDeviceRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMfaTotpDeviceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMfaTotpDeviceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/mfaTotpDevices",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mfaTotpDevice",
                    bodyModel: model.MfaTotpDevice,
                    type: "model.MfaTotpDevice",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new network source in your tenancy.
  * <p>
  You must specify your tenancy's OCID as the compartment ID in the request object (remember that the tenancy
  * is simply the root compartment). Notice that IAM resources (users, groups, compartments, and some policies)
  * reside within the tenancy itself, unlike cloud resources such as compute instances, which typically
  * reside within compartments inside the tenancy. For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the network source, which must be unique across all network sources in your
  * tenancy, and cannot be changed.
  * You can use this name or the OCID when writing policies that apply to the network source. For more information
  * about policies, see [How Policies Work](https://docs.cloud.oracle.com/Content/Identity/policieshow/how-policies-work.htm).
  * <p>
  You must also specify a *description* for the network source (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with {@link #updateNetworkSource(UpdateNetworkSourceRequest) updateNetworkSource}.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  * <p>
  After your network resource is created, you can use it in policy to restrict access to only requests made from an allowed
  * IP address specified in your network source. For more information, see [Managing Network Sources](https://docs.cloud.oracle.com/Content/Identity/Tasks/managingnetworksources.htm).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateNetworkSourceRequest
       * @return CreateNetworkSourceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateNetworkSource.ts.html |here} to see how to use CreateNetworkSource API.
       */
    createNetworkSource(createNetworkSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createNetworkSource.");
            const operationName = "createNetworkSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/NetworkSources/CreateNetworkSource";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createNetworkSourceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createNetworkSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createNetworkSourceRequest.createNetworkSourceDetails, "CreateNetworkSourceDetails", model.CreateNetworkSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "networkSources",
                    bodyModel: model.NetworkSources,
                    type: "model.NetworkSources",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates Oauth token for the user
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOAuthClientCredentialRequest
     * @return CreateOAuthClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateOAuthClientCredential.ts.html |here} to see how to use CreateOAuthClientCredential API.
     */
    createOAuthClientCredential(createOAuthClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createOAuthClientCredential.");
            const operationName = "createOAuthClientCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/CreateOAuthClientCredential";
            const pathParams = {
                "{userId}": createOAuthClientCredentialRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOAuthClientCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOAuthClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/oauth2ClientCredentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOAuthClientCredentialRequest.createOAuth2ClientCredentialDetails, "CreateOAuth2ClientCredentialDetails", model.CreateOAuth2ClientCredentialDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "oAuth2ClientCredential",
                    bodyModel: model.OAuth2ClientCredential,
                    type: "model.OAuth2ClientCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new Console one-time password for the specified user. For more information about user
  * credentials, see [User Credentials](https://docs.cloud.oracle.com/Content/Identity/usercred/usercredentials.htm).
  * <p>
  Use this operation after creating a new user, or if a user forgets their password. The new one-time
  * password is returned to you in the response, and you must securely deliver it to the user. They'll
  * be prompted to change this password the next time they sign in to the Console. If they don't change
  * it within 7 days, the password will expire and you'll need to create a new one-time password for the
  * user.
  * <p>
  (For tenancies that support identity domains) Resetting a user's password generates a reset password email
  * with a link that the user must follow to reset their password. If the user does not reset their password before the
  * link expires, you'll need to reset the user's password again.
  * <p>
  **Note:** The user's Console login is the unique name you specified when you created the user
  * (see {@link #createUser(CreateUserRequest) createUser}).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateOrResetUIPasswordRequest
       * @return CreateOrResetUIPasswordResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateOrResetUIPassword.ts.html |here} to see how to use CreateOrResetUIPassword API.
       */
    createOrResetUIPassword(createOrResetUIPasswordRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createOrResetUIPassword.");
            const operationName = "createOrResetUIPassword";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/UIPassword/CreateOrResetUIPassword";
            const pathParams = {
                "{userId}": createOrResetUIPasswordRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOrResetUIPasswordRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOrResetUIPasswordRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/uiPassword",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "uIPassword",
                    bodyModel: model.UIPassword,
                    type: "model.UIPassword",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new policy in the specified compartment (either the tenancy or another of your compartments).
  * If you're new to policies, see [Get Started with Policies](https://docs.cloud.oracle.com/Content/Identity/policiesgs/get-started-with-policies.htm).
  * <p>
  You must specify a *name* for the policy, which must be unique across all policies in your tenancy
  * and cannot be changed.
  * <p>
  You must also specify a *description* for the policy (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with {@link #updatePolicy(UpdatePolicyRequest) updatePolicy}.
  * <p>
  You must specify one or more policy statements in the statements array. For information about writing
  * policies, see [How Policies Work](https://docs.cloud.oracle.com/Content/Identity/policieshow/how-policies-work.htm) and
  * [Common Policies](https://docs.cloud.oracle.com/Content/Identity/policiescommon/commonpolicies.htm).
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  * <p>
  New policies take effect typically within 10 seconds.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreatePolicyRequest
       * @return CreatePolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreatePolicy.ts.html |here} to see how to use CreatePolicy API.
       */
    createPolicy(createPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createPolicy.");
            const operationName = "createPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Policy/CreatePolicy";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createPolicyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/policies",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createPolicyRequest.createPolicyDetails, "CreatePolicyDetails", model.CreatePolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "policy",
                    bodyModel: model.Policy,
                    type: "model.Policy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a subscription to a region for a tenancy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateRegionSubscriptionRequest
     * @return CreateRegionSubscriptionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateRegionSubscription.ts.html |here} to see how to use CreateRegionSubscription API.
     */
    createRegionSubscription(createRegionSubscriptionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createRegionSubscription.");
            const operationName = "createRegionSubscription";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/RegionSubscription/CreateRegionSubscription";
            const pathParams = {
                "{tenancyId}": createRegionSubscriptionRequest.tenancyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createRegionSubscriptionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createRegionSubscriptionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tenancies/{tenancyId}/regionSubscriptions",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createRegionSubscriptionRequest.createRegionSubscriptionDetails, "CreateRegionSubscriptionDetails", model.CreateRegionSubscriptionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "regionSubscription",
                    bodyModel: model.RegionSubscription,
                    type: "model.RegionSubscription",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new SMTP credential for the specified user. An SMTP credential has an SMTP user name and an SMTP password.
     * You must specify a *description* for the SMTP credential (although it can be an empty string). It does not
     * have to be unique, and you can change it anytime with
     * {@link #updateSmtpCredential(UpdateSmtpCredentialRequest) updateSmtpCredential}.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSmtpCredentialRequest
     * @return CreateSmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateSmtpCredential.ts.html |here} to see how to use CreateSmtpCredential API.
     */
    createSmtpCredential(createSmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createSmtpCredential.");
            const operationName = "createSmtpCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/SmtpCredential/CreateSmtpCredential";
            const pathParams = {
                "{userId}": createSmtpCredentialRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSmtpCredentialRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/smtpCredentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSmtpCredentialRequest.createSmtpCredentialDetails, "CreateSmtpCredentialDetails", model.CreateSmtpCredentialDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "smtpCredential",
                    bodyModel: model.SmtpCredential,
                    type: "model.SmtpCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated. Use {@link #createAuthToken(CreateAuthTokenRequest) createAuthToken} instead.**
  * <p>
  Creates a new Swift password for the specified user. For information about what Swift passwords are for, see
  * [Managing User Credentials](https://docs.cloud.oracle.com/Content/Identity/Tasks/managingcredentials.htm).
  * <p>
  You must specify a *description* for the Swift password (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with
  * {@link #updateSwiftPassword(UpdateSwiftPasswordRequest) updateSwiftPassword}.
  * <p>
  Every user has permission to create a Swift password for *their own user ID*. An administrator in your organization
  * does not need to write a policy to give users this ability. To compare, administrators who have permission to the
  * tenancy can use this operation to create a Swift password for any user, including themselves.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateSwiftPasswordRequest
       * @return CreateSwiftPasswordResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateSwiftPassword.ts.html |here} to see how to use CreateSwiftPassword API.
       */
    createSwiftPassword(createSwiftPasswordRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createSwiftPassword.");
            const operationName = "createSwiftPassword";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/SwiftPassword/CreateSwiftPassword";
            const pathParams = {
                "{userId}": createSwiftPasswordRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSwiftPasswordRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSwiftPasswordRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/swiftPasswords",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSwiftPasswordRequest.createSwiftPasswordDetails, "CreateSwiftPasswordDetails", model.CreateSwiftPasswordDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "swiftPassword",
                    bodyModel: model.SwiftPassword,
                    type: "model.SwiftPassword",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new tag in the specified tag namespace.
  * <p>
  The tag requires either the OCID or the name of the tag namespace that will contain this
  * tag definition.
  * <p>
  You must specify a *name* for the tag, which must be unique across all tags in the tag namespace
  * and cannot be changed. The name can contain any ASCII character except the space (_) or period (.) characters.
  * Names are case insensitive. That means, for example, \"myTag\" and \"mytag\" are not allowed in the same namespace.
  * If you specify a name that's already in use in the tag namespace, a 409 error is returned.
  * <p>
  The tag must have a *description*. It does not have to be unique, and you can change it with
  * {@link #updateTag(UpdateTagRequest) updateTag}.
  * <p>
  The tag must have a value type, which is specified with a validator. Tags can use either a
  * static value or a list of possible values. Static values are entered by a user applying the tag
  * to a resource. Lists are created by you and the user must apply a value from the list. Lists
  * are validiated.
  * <p>
  * If no `validator` is set, the user applying the tag to a resource can type in a static
  * value or leave the tag value empty.
  * * If a `validator` is set, the user applying the tag to a resource must select from a list
  * of values that you supply with {@link #enumTagDefinitionValidator(EnumTagDefinitionValidatorRequest) enumTagDefinitionValidator}.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateTagRequest
       * @return CreateTagResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateTag.ts.html |here} to see how to use CreateTag API.
       */
    createTag(createTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createTag.");
            const operationName = "createTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Tag/CreateTag";
            const pathParams = {
                "{tagNamespaceId}": createTagRequest.tagNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTagRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/{tagNamespaceId}/tags",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTagRequest.createTagDetails, "CreateTagDetails", model.CreateTagDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tag",
                    bodyModel: model.Tag,
                    type: "model.Tag",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new tag default in the specified compartment for the specified tag definition.
  * <p>
  If you specify that a value is required, a value is set during resource creation (either by
  * the user creating the resource or another tag defualt). If no value is set, resource creation
  * is blocked.
  * <p>
  * If the `isRequired` flag is set to \"true\", the value is set during resource creation.
  * * If the `isRequired` flag is set to \"false\", the value you enter is set during resource creation.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateTagDefaultRequest
       * @return CreateTagDefaultResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateTagDefault.ts.html |here} to see how to use CreateTagDefault API.
       */
    createTagDefault(createTagDefaultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createTagDefault.");
            const operationName = "createTagDefault";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagDefault/CreateTagDefault";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTagDefaultRequest.opcRetryToken,
                "opc-request-id": createTagDefaultRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createTagDefaultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagDefaults",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTagDefaultRequest.createTagDefaultDetails, "CreateTagDefaultDetails", model.CreateTagDefaultDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tagDefault",
                    bodyModel: model.TagDefault,
                    type: "model.TagDefault",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new tag namespace in the specified compartment.
  * <p>
  You must specify the compartment ID in the request object (remember that the tenancy is simply the root
  * compartment).
  * <p>
  You must also specify a *name* for the namespace, which must be unique across all namespaces in your tenancy
  * and cannot be changed. The name can contain any ASCII character except the space (_) or period (.).
  * Names are case insensitive. That means, for example, \"myNamespace\" and \"mynamespace\" are not allowed
  * in the same tenancy. Once you created a namespace, you cannot change the name.
  * If you specify a name that's already in use in the tenancy, a 409 error is returned.
  * <p>
  You must also specify a *description* for the namespace.
  * It does not have to be unique, and you can change it with
  * {@link #updateTagNamespace(UpdateTagNamespaceRequest) updateTagNamespace}.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateTagNamespaceRequest
       * @return CreateTagNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateTagNamespace.ts.html |here} to see how to use CreateTagNamespace API.
       */
    createTagNamespace(createTagNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createTagNamespace.");
            const operationName = "createTagNamespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagNamespace/CreateTagNamespace";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTagNamespaceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createTagNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTagNamespaceRequest.createTagNamespaceDetails, "CreateTagNamespaceDetails", model.CreateTagNamespaceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tagNamespace",
                    bodyModel: model.TagNamespace,
                    type: "model.TagNamespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new user in your tenancy. For conceptual information about users, your tenancy, and other
  * IAM Service components, see [Overview of IAM](https://docs.cloud.oracle.com/Content/Identity/getstarted/identity-domains.htm).
  * <p>
  You must specify your tenancy's OCID as the compartment ID in the request object (remember that the
  * tenancy is simply the root compartment). Notice that IAM resources (users, groups, compartments, and
  * some policies) reside within the tenancy itself, unlike cloud resources such as compute instances,
  * which typically reside within compartments inside the tenancy. For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the user, which must be unique across all users in your tenancy
  * and cannot be changed. Allowed characters: No spaces. Only letters, numerals, hyphens, periods,
  * underscores, +, and @. If you specify a name that's already in use, you'll get a 409 error.
  * This name will be the user's login to the Console. You might want to pick a
  * name that your company's own identity system (e.g., Active Directory, LDAP, etc.) already uses.
  * If you delete a user and then create a new user with the same name, they'll be considered different
  * users because they have different OCIDs.
  * <p>
  You must also specify a *description* for the user (although it can be an empty string).
  * It does not have to be unique, and you can change it anytime with
  * {@link #updateUser(UpdateUserRequest) updateUser}. You can use the field to provide the user's
  * full name, a description, a nickname, or other information to generally identify the user.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before
  * using the object, first make sure its `lifecycleState` has changed to ACTIVE.
  * <p>
  A new user has no permissions until you place the user in one or more groups (see
  * {@link #addUserToGroup(AddUserToGroupRequest) addUserToGroup}). If the user needs to
  * access the Console, you need to provide the user a password (see
  * {@link #createOrResetUIPassword(CreateOrResetUIPasswordRequest) createOrResetUIPassword}).
  * If the user needs to access the Oracle Cloud Infrastructure REST API, you need to upload a
  * public API signing key for that user (see
  * [Required Keys and OCIDs](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm) and also
  * {@link #uploadApiKey(UploadApiKeyRequest) uploadApiKey}).
  * <p>
  **Important:** Make sure to inform the new user which compartment(s) they have access to.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateUserRequest
       * @return CreateUserResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateUser.ts.html |here} to see how to use CreateUser API.
       */
    createUser(createUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#createUser.");
            const operationName = "createUser";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/CreateUser";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createUserRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createUserRequest.createUserDetails, "CreateUserDetails", model.CreateUserDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "user",
                    bodyModel: model.User,
                    type: "model.User",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * (For tenancies that support identity domains) Deactivates the specified identity domain. Identity domains must be in an ACTIVE
  * `lifecycleState` and have no active apps present in the domain or underlying Identity Cloud Service stripe. You cannot deactivate
  * the default identity domain.
  * <p>
  After you send your request, the `lifecycleDetails` of this identity domain is set to DEACTIVATING. When the operation completes,
  * then the `lifecycleDetails` is set to null and the `lifecycleState` is set to INACTIVE.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeactivateDomainRequest
       * @return DeactivateDomainResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeactivateDomain.ts.html |here} to see how to use DeactivateDomain API.
       */
    deactivateDomain(deactivateDomainRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deactivateDomain.");
            const operationName = "deactivateDomain";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Domain/DeactivateDomain";
            const pathParams = {
                "{domainId}": deactivateDomainRequest.domainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deactivateDomainRequest.opcRequestId,
                "opc-retry-token": deactivateDomainRequest.opcRetryToken,
                "if-match": deactivateDomainRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deactivateDomainRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/domains/{domainId}/actions/deactivate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified API signing key for the specified user.
  * <p>
  Every user has permission to use this operation to delete a key for *their own user ID*. An
  * administrator in your organization does not need to write a policy to give users this ability.
  * To compare, administrators who have permission to the tenancy can use this operation to delete
  * a key for any user, including themselves.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteApiKeyRequest
       * @return DeleteApiKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteApiKey.ts.html |here} to see how to use DeleteApiKey API.
       */
    deleteApiKey(deleteApiKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteApiKey.");
            const operationName = "deleteApiKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{userId}": deleteApiKeyRequest.userId,
                "{fingerprint}": deleteApiKeyRequest.fingerprint
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteApiKeyRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteApiKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/apiKeys/{fingerprint}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified auth token for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAuthTokenRequest
     * @return DeleteAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteAuthToken.ts.html |here} to see how to use DeleteAuthToken API.
     */
    deleteAuthToken(deleteAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteAuthToken.");
            const operationName = "deleteAuthToken";
            const apiReferenceLink = "";
            const pathParams = {
                "{userId}": deleteAuthTokenRequest.userId,
                "{authTokenId}": deleteAuthTokenRequest.authTokenId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAuthTokenRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/authTokens/{authTokenId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified compartment. The compartment must be empty.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteCompartmentRequest
     * @return DeleteCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteCompartment.ts.html |here} to see how to use DeleteCompartment API.
     */
    deleteCompartment(deleteCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteCompartment.");
            const operationName = "deleteCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Compartment/DeleteCompartment";
            const pathParams = {
                "{compartmentId}": deleteCompartmentRequest.compartmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compartments/{compartmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified secret key for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteCustomerSecretKeyRequest
     * @return DeleteCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteCustomerSecretKey.ts.html |here} to see how to use DeleteCustomerSecretKey API.
     */
    deleteCustomerSecretKey(deleteCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteCustomerSecretKey.");
            const operationName = "deleteCustomerSecretKey";
            const apiReferenceLink = "";
            const pathParams = {
                "{userId}": deleteCustomerSecretKeyRequest.userId,
                "{customerSecretKeyId}": deleteCustomerSecretKeyRequest.customerSecretKeyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteCustomerSecretKeyRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/customerSecretKeys/{customerSecretKeyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified DB credential for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDbCredentialRequest
     * @return DeleteDbCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteDbCredential.ts.html |here} to see how to use DeleteDbCredential API.
     */
    deleteDbCredential(deleteDbCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteDbCredential.");
            const operationName = "deleteDbCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/DeleteDbCredential";
            const pathParams = {
                "{userId}": deleteDbCredentialRequest.userId,
                "{dbCredentialId}": deleteDbCredentialRequest.dbCredentialId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteDbCredentialRequest.opcRequestId,
                "if-match": deleteDbCredentialRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDbCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/dbCredentials/{dbCredentialId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * (For tenancies that support identity domains) Deletes an identity domain. The identity domain must have no active apps present in
     * the underlying IDCS stripe. You must also deactivate the identity domain, rendering the `lifecycleState` of the identity domain INACTIVE.
     * Furthermore, as the authenticated user performing the operation, you cannot be a member of the identity domain you are deleting.
     * Lastly, you cannot delete the default identity domain. A tenancy must always have at least the default identity domain.
     *
     * To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
     * the operation's status.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDomainRequest
     * @return DeleteDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteDomain.ts.html |here} to see how to use DeleteDomain API.
     */
    deleteDomain(deleteDomainRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteDomain.");
            const operationName = "deleteDomain";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Domain/DeleteDomain";
            const pathParams = {
                "{domainId}": deleteDomainRequest.domainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDomainRequest.ifMatch,
                "opc-request-id": deleteDomainRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDomainRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/domains/{domainId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified dynamic group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDynamicGroupRequest
     * @return DeleteDynamicGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteDynamicGroup.ts.html |here} to see how to use DeleteDynamicGroup API.
     */
    deleteDynamicGroup(deleteDynamicGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteDynamicGroup.");
            const operationName = "deleteDynamicGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{dynamicGroupId}": deleteDynamicGroupRequest.dynamicGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDynamicGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDynamicGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dynamicGroups/{dynamicGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified group. The group must be empty.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteGroupRequest
     * @return DeleteGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteGroup.ts.html |here} to see how to use DeleteGroup API.
     */
    deleteGroup(deleteGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteGroup.");
            const operationName = "deleteGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{groupId}": deleteGroupRequest.groupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/groups/{groupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Deletes the specified identity provider. The identity provider must not have
  * any group mappings (see {@link IdpGroupMapping}).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteIdentityProviderRequest
       * @return DeleteIdentityProviderResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteIdentityProvider.ts.html |here} to see how to use DeleteIdentityProvider API.
       */
    deleteIdentityProvider(deleteIdentityProviderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteIdentityProvider.");
            const operationName = "deleteIdentityProvider";
            const apiReferenceLink = "";
            const pathParams = {
                "{identityProviderId}": deleteIdentityProviderRequest.identityProviderId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteIdentityProviderRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteIdentityProviderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders/{identityProviderId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Deletes the specified group mapping.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteIdpGroupMappingRequest
       * @return DeleteIdpGroupMappingResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteIdpGroupMapping.ts.html |here} to see how to use DeleteIdpGroupMapping API.
       */
    deleteIdpGroupMapping(deleteIdpGroupMappingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteIdpGroupMapping.");
            const operationName = "deleteIdpGroupMapping";
            const apiReferenceLink = "";
            const pathParams = {
                "{identityProviderId}": deleteIdpGroupMappingRequest.identityProviderId,
                "{mappingId}": deleteIdpGroupMappingRequest.mappingId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteIdpGroupMappingRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteIdpGroupMappingRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders/{identityProviderId}/groupMappings/{mappingId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified MFA TOTP device for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMfaTotpDeviceRequest
     * @return DeleteMfaTotpDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteMfaTotpDevice.ts.html |here} to see how to use DeleteMfaTotpDevice API.
     */
    deleteMfaTotpDevice(deleteMfaTotpDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteMfaTotpDevice.");
            const operationName = "deleteMfaTotpDevice";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/MfaTotpDevice/DeleteMfaTotpDevice";
            const pathParams = {
                "{userId}": deleteMfaTotpDeviceRequest.userId,
                "{mfaTotpDeviceId}": deleteMfaTotpDeviceRequest.mfaTotpDeviceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMfaTotpDeviceRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMfaTotpDeviceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/mfaTotpDevices/{mfaTotpDeviceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified network source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteNetworkSourceRequest
     * @return DeleteNetworkSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteNetworkSource.ts.html |here} to see how to use DeleteNetworkSource API.
     */
    deleteNetworkSource(deleteNetworkSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteNetworkSource.");
            const operationName = "deleteNetworkSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/NetworkSources/DeleteNetworkSource";
            const pathParams = {
                "{networkSourceId}": deleteNetworkSourceRequest.networkSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteNetworkSourceRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteNetworkSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSources/{networkSourceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete Oauth token for the user
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOAuthClientCredentialRequest
     * @return DeleteOAuthClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteOAuthClientCredential.ts.html |here} to see how to use DeleteOAuthClientCredential API.
     */
    deleteOAuthClientCredential(deleteOAuthClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteOAuthClientCredential.");
            const operationName = "deleteOAuthClientCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/DeleteOAuthClientCredential";
            const pathParams = {
                "{userId}": deleteOAuthClientCredentialRequest.userId,
                "{oauth2ClientCredentialId}": deleteOAuthClientCredentialRequest.oauth2ClientCredentialId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOAuthClientCredentialRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOAuthClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/oauth2ClientCredentials/{oauth2ClientCredentialId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified policy. The deletion takes effect typically within 10 seconds.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeletePolicyRequest
     * @return DeletePolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeletePolicy.ts.html |here} to see how to use DeletePolicy API.
     */
    deletePolicy(deletePolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deletePolicy.");
            const operationName = "deletePolicy";
            const apiReferenceLink = "";
            const pathParams = {
                "{policyId}": deletePolicyRequest.policyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deletePolicyRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deletePolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/policies/{policyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified SMTP credential for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSmtpCredentialRequest
     * @return DeleteSmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteSmtpCredential.ts.html |here} to see how to use DeleteSmtpCredential API.
     */
    deleteSmtpCredential(deleteSmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteSmtpCredential.");
            const operationName = "deleteSmtpCredential";
            const apiReferenceLink = "";
            const pathParams = {
                "{userId}": deleteSmtpCredentialRequest.userId,
                "{smtpCredentialId}": deleteSmtpCredentialRequest.smtpCredentialId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSmtpCredentialRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/smtpCredentials/{smtpCredentialId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated. Use {@link #deleteAuthToken(DeleteAuthTokenRequest) deleteAuthToken} instead.**
  * <p>
  Deletes the specified Swift password for the specified user.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteSwiftPasswordRequest
       * @return DeleteSwiftPasswordResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteSwiftPassword.ts.html |here} to see how to use DeleteSwiftPassword API.
       */
    deleteSwiftPassword(deleteSwiftPasswordRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteSwiftPassword.");
            const operationName = "deleteSwiftPassword";
            const apiReferenceLink = "";
            const pathParams = {
                "{userId}": deleteSwiftPasswordRequest.userId,
                "{swiftPasswordId}": deleteSwiftPasswordRequest.swiftPasswordId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSwiftPasswordRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSwiftPasswordRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/swiftPasswords/{swiftPasswordId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified tag definition. This operation triggers a process that removes the
  * tag from all resources in your tenancy.
  * <p>
  These things happen immediately:
  * \u00A0
  *   * If the tag was a cost-tracking tag, it no longer counts against your 10 cost-tracking
  *   tags limit, whether you first disabled it or not.
  *   * If the tag was used with dynamic groups, none of the rules that contain the tag will
  *   be evaluated against the tag.
  * <p>
  When you start the delete operation, the state of the tag changes to DELETING and tag removal
  * from resources begins. This can take up to 48 hours depending on the number of resources that
  * were tagged as well as the regions in which those resources reside.
  * <p>
  When all tags have been removed, the state changes to DELETED. You cannot restore a deleted tag. Once the deleted tag
  * changes its state to DELETED, you can use the same tag name again.
  * <p>
  After you start this operation, you cannot start either the {@link #bulkDeleteTags(BulkDeleteTagsRequest) bulkDeleteTags} or the {@link #cascadeDeleteTagNamespace(CascadeDeleteTagNamespaceRequest) cascadeDeleteTagNamespace} operation until this process completes.
  * <p>
  To delete a tag, you must first retire it. Use {@link #updateTag(UpdateTagRequest) updateTag}
  * to retire a tag.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteTagRequest
       * @return DeleteTagResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteTag.ts.html |here} to see how to use DeleteTag API.
       */
    deleteTag(deleteTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteTag.");
            const operationName = "deleteTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Tag/DeleteTag";
            const pathParams = {
                "{tagNamespaceId}": deleteTagRequest.tagNamespaceId,
                "{tagName}": deleteTagRequest.tagName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteTagRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/{tagNamespaceId}/tags/{tagName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the the specified tag default.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteTagDefaultRequest
     * @return DeleteTagDefaultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteTagDefault.ts.html |here} to see how to use DeleteTagDefault API.
     */
    deleteTagDefault(deleteTagDefaultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteTagDefault.");
            const operationName = "deleteTagDefault";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagDefault/DeleteTagDefault";
            const pathParams = {
                "{tagDefaultId}": deleteTagDefaultRequest.tagDefaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteTagDefaultRequest.opcRequestId,
                "if-match": deleteTagDefaultRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteTagDefaultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagDefaults/{tagDefaultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified tag namespace. Only an empty tag namespace can be deleted with this operation. To use this operation
  * to delete a tag namespace that contains tag definitions, first delete all of its tag definitions.
  * <p>
  Use {@link #cascadeDeleteTagNamespace(CascadeDeleteTagNamespaceRequest) cascadeDeleteTagNamespace} to delete a tag namespace along with all of
  * the tag definitions contained within that namespace.
  * <p>
  Use {@link #deleteTag(DeleteTagRequest) deleteTag} to delete a tag definition.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteTagNamespaceRequest
       * @return DeleteTagNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteTagNamespace.ts.html |here} to see how to use DeleteTagNamespace API.
       */
    deleteTagNamespace(deleteTagNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteTagNamespace.");
            const operationName = "deleteTagNamespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagNamespace/DeleteTagNamespace";
            const pathParams = {
                "{tagNamespaceId}": deleteTagNamespaceRequest.tagNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteTagNamespaceRequest.ifMatch,
                "opc-request-id": deleteTagNamespaceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteTagNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/{tagNamespaceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified user. The user must not be in any groups.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteUserRequest
     * @return DeleteUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteUser.ts.html |here} to see how to use DeleteUser API.
     */
    deleteUser(deleteUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#deleteUser.");
            const operationName = "deleteUser";
            const apiReferenceLink = "";
            const pathParams = {
                "{userId}": deleteUserRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteUserRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * (For tenancies that support identity domains) Replicates the identity domain to a new region (provided that the region is the
  * tenancy home region or other region that the tenancy subscribes to). You can only replicate identity domains that are in an ACTIVE
  * `lifecycleState` and not currently updating or already replicating. You also can only trigger the replication of secondary identity domains.
  * The default identity domain is automatically replicated to all regions that the tenancy subscribes to.
  * <p>
  After you send the request, the `state` of the identity domain in the replica region is set to ENABLING_REPLICATION. When the operation
  * completes, the `state` is set to REPLICATION_ENABLED.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param EnableReplicationToRegionRequest
       * @return EnableReplicationToRegionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/EnableReplicationToRegion.ts.html |here} to see how to use EnableReplicationToRegion API.
       */
    enableReplicationToRegion(enableReplicationToRegionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#enableReplicationToRegion.");
            const operationName = "enableReplicationToRegion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Domain/EnableReplicationToRegion";
            const pathParams = {
                "{domainId}": enableReplicationToRegionRequest.domainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": enableReplicationToRegionRequest.opcRequestId,
                "opc-retry-token": enableReplicationToRegionRequest.opcRetryToken,
                "if-match": enableReplicationToRegionRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableReplicationToRegionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/domains/{domainId}/actions/enableReplicationToRegion",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableReplicationToRegionRequest.enableReplicationToRegionDetails, "EnableReplicationToRegionDetails", model.EnableReplicationToRegionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Generate seed for the MFA TOTP device.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateTotpSeedRequest
     * @return GenerateTotpSeedResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GenerateTotpSeed.ts.html |here} to see how to use GenerateTotpSeed API.
     */
    generateTotpSeed(generateTotpSeedRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#generateTotpSeed.");
            const operationName = "generateTotpSeed";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/MfaTotpDevice/GenerateTotpSeed";
            const pathParams = {
                "{userId}": generateTotpSeedRequest.userId,
                "{mfaTotpDeviceId}": generateTotpSeedRequest.mfaTotpDeviceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": generateTotpSeedRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateTotpSeedRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/mfaTotpDevices/{mfaTotpDeviceId}/actions/generateSeed",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mfaTotpDevice",
                    bodyModel: model.MfaTotpDevice,
                    type: "model.MfaTotpDevice",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the authentication policy for the given tenancy. You must specify your tenant\u2019s OCID as the value for
     * the compartment ID (remember that the tenancy is simply the root compartment).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuthenticationPolicyRequest
     * @return GetAuthenticationPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetAuthenticationPolicy.ts.html |here} to see how to use GetAuthenticationPolicy API.
     */
    getAuthenticationPolicy(getAuthenticationPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getAuthenticationPolicy.");
            const operationName = "getAuthenticationPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/AuthenticationPolicy/GetAuthenticationPolicy";
            const pathParams = {
                "{compartmentId}": getAuthenticationPolicyRequest.compartmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAuthenticationPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/authenticationPolicies/{compartmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authenticationPolicy",
                    bodyModel: model.AuthenticationPolicy,
                    type: "model.AuthenticationPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets the specified compartment's information.
  * <p>
  This operation does not return a list of all the resources inside the compartment. There is no single
  * API operation that does that. Compartments can contain multiple types of resources (instances, block
  * storage volumes, etc.). To find out what's in a compartment, you must call the \"List\" operation for
  * each resource type and specify the compartment's OCID as a query parameter in the request. For example,
  * call the {@link #listInstances(ListInstancesRequest) listInstances} operation in the Cloud Compute
  * Service or the {@link #listVolumes(ListVolumesRequest) listVolumes} operation in Cloud Block Storage.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetCompartmentRequest
       * @return GetCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetCompartment.ts.html |here} to see how to use GetCompartment API.
       */
    getCompartment(getCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getCompartment.");
            const operationName = "getCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Compartment/GetCompartment";
            const pathParams = {
                "{compartmentId}": getCompartmentRequest.compartmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compartments/{compartmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "compartment",
                    bodyModel: model.Compartment,
                    type: "model.Compartment",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * (For tenancies that support identity domains) Gets the specified identity domain's information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDomainRequest
     * @return GetDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetDomain.ts.html |here} to see how to use GetDomain API.
     */
    getDomain(getDomainRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getDomain.");
            const operationName = "getDomain";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Domain/GetDomain";
            const pathParams = {
                "{domainId}": getDomainRequest.domainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDomainRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDomainRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/domains/{domainId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "domain",
                    bodyModel: model.Domain,
                    type: "model.Domain",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified dynamic group's information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDynamicGroupRequest
     * @return GetDynamicGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetDynamicGroup.ts.html |here} to see how to use GetDynamicGroup API.
     */
    getDynamicGroup(getDynamicGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getDynamicGroup.");
            const operationName = "getDynamicGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/DynamicGroup/GetDynamicGroup";
            const pathParams = {
                "{dynamicGroupId}": getDynamicGroupRequest.dynamicGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDynamicGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dynamicGroups/{dynamicGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dynamicGroup",
                    bodyModel: model.DynamicGroup,
                    type: "model.DynamicGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets the specified group's information.
  * <p>
  This operation does not return a list of all the users in the group. To do that, use
  * {@link #listUserGroupMemberships(ListUserGroupMembershipsRequest) listUserGroupMemberships} and
  * provide the group's OCID as a query parameter in the request.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetGroupRequest
       * @return GetGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetGroup.ts.html |here} to see how to use GetGroup API.
       */
    getGroup(getGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getGroup.");
            const operationName = "getGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Group/GetGroup";
            const pathParams = {
                "{groupId}": getGroupRequest.groupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/groups/{groupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "group",
                    bodyModel: model.Group,
                    type: "model.Group",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of a specified IAM work request. The workRequestID is returned in the opc-workrequest-id header for any asynchronous operation in the Identity and Access Management service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetIamWorkRequestRequest
     * @return GetIamWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetIamWorkRequest.ts.html |here} to see how to use GetIamWorkRequest API.
     */
    getIamWorkRequest(getIamWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getIamWorkRequest.");
            const operationName = "getIamWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IamWorkRequest/GetIamWorkRequest";
            const pathParams = {
                "{iamWorkRequestId}": getIamWorkRequestRequest.iamWorkRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getIamWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getIamWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/iamWorkRequests/{iamWorkRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iamWorkRequest",
                    bodyModel: model.IamWorkRequest,
                    type: "model.IamWorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Gets the specified identity provider's information.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetIdentityProviderRequest
       * @return GetIdentityProviderResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetIdentityProvider.ts.html |here} to see how to use GetIdentityProvider API.
       */
    getIdentityProvider(getIdentityProviderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getIdentityProvider.");
            const operationName = "getIdentityProvider";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IdentityProvider/GetIdentityProvider";
            const pathParams = {
                "{identityProviderId}": getIdentityProviderRequest.identityProviderId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getIdentityProviderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders/{identityProviderId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "identityProvider",
                    bodyModel: model.IdentityProvider,
                    type: "model.IdentityProvider",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Gets the specified group mapping.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetIdpGroupMappingRequest
       * @return GetIdpGroupMappingResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetIdpGroupMapping.ts.html |here} to see how to use GetIdpGroupMapping API.
       */
    getIdpGroupMapping(getIdpGroupMappingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getIdpGroupMapping.");
            const operationName = "getIdpGroupMapping";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IdpGroupMapping/GetIdpGroupMapping";
            const pathParams = {
                "{identityProviderId}": getIdpGroupMappingRequest.identityProviderId,
                "{mappingId}": getIdpGroupMappingRequest.mappingId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getIdpGroupMappingRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders/{identityProviderId}/groupMappings/{mappingId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "idpGroupMapping",
                    bodyModel: model.IdpGroupMapping,
                    type: "model.IdpGroupMapping",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the specified MFA TOTP device for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMfaTotpDeviceRequest
     * @return GetMfaTotpDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetMfaTotpDevice.ts.html |here} to see how to use GetMfaTotpDevice API.
     */
    getMfaTotpDevice(getMfaTotpDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getMfaTotpDevice.");
            const operationName = "getMfaTotpDevice";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/MfaTotpDeviceSummary/GetMfaTotpDevice";
            const pathParams = {
                "{userId}": getMfaTotpDeviceRequest.userId,
                "{mfaTotpDeviceId}": getMfaTotpDeviceRequest.mfaTotpDeviceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMfaTotpDeviceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/mfaTotpDevices/{mfaTotpDeviceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mfaTotpDeviceSummary",
                    bodyModel: model.MfaTotpDeviceSummary,
                    type: "model.MfaTotpDeviceSummary",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified network source's information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetNetworkSourceRequest
     * @return GetNetworkSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetNetworkSource.ts.html |here} to see how to use GetNetworkSource API.
     */
    getNetworkSource(getNetworkSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getNetworkSource.");
            const operationName = "getNetworkSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/NetworkSources/GetNetworkSource";
            const pathParams = {
                "{networkSourceId}": getNetworkSourceRequest.networkSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getNetworkSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSources/{networkSourceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "networkSources",
                    bodyModel: model.NetworkSources,
                    type: "model.NetworkSources",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified policy's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPolicyRequest
     * @return GetPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetPolicy.ts.html |here} to see how to use GetPolicy API.
     */
    getPolicy(getPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getPolicy.");
            const operationName = "getPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Policy/GetPolicy";
            const pathParams = {
                "{policyId}": getPolicyRequest.policyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/policies/{policyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "policy",
                    bodyModel: model.Policy,
                    type: "model.Policy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieve the standard tag namespace template given the standard tag namespace name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetStandardTagTemplateRequest
     * @return GetStandardTagTemplateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetStandardTagTemplate.ts.html |here} to see how to use GetStandardTagTemplate API.
     */
    getStandardTagTemplate(getStandardTagTemplateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getStandardTagTemplate.");
            const operationName = "getStandardTagTemplate";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/StandardTagNamespaceTemplate/GetStandardTagTemplate";
            const pathParams = {
                "{standardTagNamespaceName}": getStandardTagTemplateRequest.standardTagNamespaceName
            };
            const queryParams = {
                "compartmentId": getStandardTagTemplateRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getStandardTagTemplateRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tags/standardTagNamespaceTemplates/{standardTagNamespaceName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "standardTagNamespaceTemplate",
                    bodyModel: model.StandardTagNamespaceTemplate,
                    type: "model.StandardTagNamespaceTemplate",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified tag's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTagRequest
     * @return GetTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetTag.ts.html |here} to see how to use GetTag API.
     */
    getTag(getTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getTag.");
            const operationName = "getTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Tag/GetTag";
            const pathParams = {
                "{tagNamespaceId}": getTagRequest.tagNamespaceId,
                "{tagName}": getTagRequest.tagName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/{tagNamespaceId}/tags/{tagName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tag",
                    bodyModel: model.Tag,
                    type: "model.Tag",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves the specified tag default.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTagDefaultRequest
     * @return GetTagDefaultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetTagDefault.ts.html |here} to see how to use GetTagDefault API.
     */
    getTagDefault(getTagDefaultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getTagDefault.");
            const operationName = "getTagDefault";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagDefault/GetTagDefault";
            const pathParams = {
                "{tagDefaultId}": getTagDefaultRequest.tagDefaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTagDefaultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagDefaults/{tagDefaultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tagDefault",
                    bodyModel: model.TagDefault,
                    type: "model.TagDefault",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified tag namespace's information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTagNamespaceRequest
     * @return GetTagNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetTagNamespace.ts.html |here} to see how to use GetTagNamespace API.
     */
    getTagNamespace(getTagNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getTagNamespace.");
            const operationName = "getTagNamespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagNamespace/GetTagNamespace";
            const pathParams = {
                "{tagNamespaceId}": getTagNamespaceRequest.tagNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTagNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/{tagNamespaceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tagNamespace",
                    bodyModel: model.TagNamespace,
                    type: "model.TagNamespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details on a specified work request. The workRequestID is returned in the opc-workrequest-id header
     * for any asynchronous operation in tagging service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTaggingWorkRequestRequest
     * @return GetTaggingWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetTaggingWorkRequest.ts.html |here} to see how to use GetTaggingWorkRequest API.
     */
    getTaggingWorkRequest(getTaggingWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getTaggingWorkRequest.");
            const operationName = "getTaggingWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TaggingWorkRequest/GetTaggingWorkRequest";
            const pathParams = {
                "{workRequestId}": getTaggingWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTaggingWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/taggingWorkRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "taggingWorkRequest",
                    bodyModel: model.TaggingWorkRequest,
                    type: "model.TaggingWorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the specified tenancy's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTenancyRequest
     * @return GetTenancyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetTenancy.ts.html |here} to see how to use GetTenancy API.
     */
    getTenancy(getTenancyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getTenancy.");
            const operationName = "getTenancy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Tenancy/GetTenancy";
            const pathParams = {
                "{tenancyId}": getTenancyRequest.tenancyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTenancyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tenancies/{tenancyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tenancy",
                    bodyModel: model.Tenancy,
                    type: "model.Tenancy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified user's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetUserRequest
     * @return GetUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetUser.ts.html |here} to see how to use GetUser API.
     */
    getUser(getUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getUser.");
            const operationName = "getUser";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/GetUser";
            const pathParams = {
                "{userId}": getUserRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "user",
                    bodyModel: model.User,
                    type: "model.User",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified UserGroupMembership's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetUserGroupMembershipRequest
     * @return GetUserGroupMembershipResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetUserGroupMembership.ts.html |here} to see how to use GetUserGroupMembership API.
     */
    getUserGroupMembership(getUserGroupMembershipRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getUserGroupMembership.");
            const operationName = "getUserGroupMembership";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/UserGroupMembership/GetUserGroupMembership";
            const pathParams = {
                "{userGroupMembershipId}": getUserGroupMembershipRequest.userGroupMembershipId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getUserGroupMembershipRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userGroupMemberships/{userGroupMembershipId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "userGroupMembership",
                    bodyModel: model.UserGroupMembership,
                    type: "model.UserGroupMembership",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified user's console password information. The returned object contains the user's OCID,
     * but not the password itself. The actual password is returned only when created or reset.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetUserUIPasswordInformationRequest
     * @return GetUserUIPasswordInformationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetUserUIPasswordInformation.ts.html |here} to see how to use GetUserUIPasswordInformation API.
     */
    getUserUIPasswordInformation(getUserUIPasswordInformationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getUserUIPasswordInformation.");
            const operationName = "getUserUIPasswordInformation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/UIPasswordInformation/GetUserUIPasswordInformation";
            const pathParams = {
                "{userId}": getUserUIPasswordInformationRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getUserUIPasswordInformationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/uiPassword",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "uIPasswordInformation",
                    bodyModel: model.UIPasswordInformation,
                    type: "model.UIPasswordInformation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details on a specified work request. The workRequestID is returned in the opc-workrequest-id header
     * for any asynchronous operation in the compartment service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * OCI will release Tag Namespaces that our customers can import.
     * These Tag Namespaces will provide Tags for our customers and Partners to provide consistency and enable data reporting.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ImportStandardTagsRequest
     * @return ImportStandardTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ImportStandardTags.ts.html |here} to see how to use ImportStandardTags API.
     */
    importStandardTags(importStandardTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#importStandardTags.");
            const operationName = "importStandardTags";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Tag/ImportStandardTags";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": importStandardTagsRequest.opcRequestId,
                "opc-retry-token": importStandardTagsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, importStandardTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tags/actions/importStandardTags",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(importStandardTagsRequest.importStandardTagsDetails, "ImportStandardTagsDetails", model.ImportStandardTagsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * (For tenancies that support identity domains) Lists the license types for identity domains supported by Oracle Cloud Infrastructure.
  * (License types are also referred to as domain types.)
  * <p>
  If `currentLicenseTypeName` is provided, then the request returns license types that the identity domain with the specified license
  * type name can change to. Otherwise, the request returns all valid license types currently supported.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAllowedDomainLicenseTypesRequest
       * @return ListAllowedDomainLicenseTypesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListAllowedDomainLicenseTypes.ts.html |here} to see how to use ListAllowedDomainLicenseTypes API.
       */
    listAllowedDomainLicenseTypes(listAllowedDomainLicenseTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listAllowedDomainLicenseTypes.");
            const operationName = "listAllowedDomainLicenseTypes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Domain/ListAllowedDomainLicenseTypes";
            const pathParams = {};
            const queryParams = {
                "currentLicenseTypeName": listAllowedDomainLicenseTypesRequest.currentLicenseTypeName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAllowedDomainLicenseTypesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAllowedDomainLicenseTypesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/allowedDomainLicenseTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.AllowedDomainLicenseTypeSummary,
                    type: "Array<model.AllowedDomainLicenseTypeSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the API signing keys for the specified user. A user can have a maximum of three keys.
  * <p>
  Every user has permission to use this API call for *their own user ID*.  An administrator in your
  * organization does not need to write a policy to give users this ability.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListApiKeysRequest
       * @return ListApiKeysResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListApiKeys.ts.html |here} to see how to use ListApiKeys API.
       */
    listApiKeys(listApiKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listApiKeys.");
            const operationName = "listApiKeys";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/ApiKey/ListApiKeys";
            const pathParams = {
                "{userId}": listApiKeysRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listApiKeysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/apiKeys",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ApiKey,
                    type: "Array<model.ApiKey>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the auth tokens for the specified user. The returned object contains the token's OCID, but not
     * the token itself. The actual token is returned only upon creation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuthTokensRequest
     * @return ListAuthTokensResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListAuthTokens.ts.html |here} to see how to use ListAuthTokens API.
     */
    listAuthTokens(listAuthTokensRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listAuthTokens.");
            const operationName = "listAuthTokens";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/AuthToken/ListAuthTokens";
            const pathParams = {
                "{userId}": listAuthTokensRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAuthTokensRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/authTokens",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.AuthToken,
                    type: "Array<model.AuthToken>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the availability domains in your tenancy. Specify the OCID of either the tenancy or another
     * of your compartments as the value for the compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     * Note that the order of the results returned can change if availability domains are added or removed; therefore, do not
     * create a dependency on the list order.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAvailabilityDomainsRequest
     * @return ListAvailabilityDomainsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListAvailabilityDomains.ts.html |here} to see how to use ListAvailabilityDomains API.
     */
    listAvailabilityDomains(listAvailabilityDomainsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listAvailabilityDomains.");
            const operationName = "listAvailabilityDomains";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/AvailabilityDomain/ListAvailabilityDomains";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAvailabilityDomainsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAvailabilityDomainsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/availabilityDomains",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.AvailabilityDomain,
                    type: "Array<model.AvailabilityDomain>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the resource-types supported by compartment bulk actions. Use this API to help you provide the correct
     * resource-type information to the {@link #bulkDeleteResources(BulkDeleteResourcesRequest) bulkDeleteResources}
     * and {@link #bulkMoveResources(BulkMoveResourcesRequest) bulkMoveResources} operations. The returned list of
     * resource-types provides the appropriate resource-type names to use with the bulk action operations along with
     * the type of identifying information you'll need to provide for each resource-type. Most resource-types just
     * require an [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) to identify a specific resource, but some resource-types,
     * such as buckets, require you to provide other identifying information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListBulkActionResourceTypesRequest
     * @return ListBulkActionResourceTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListBulkActionResourceTypes.ts.html |here} to see how to use ListBulkActionResourceTypes API.
     */
    listBulkActionResourceTypes(listBulkActionResourceTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listBulkActionResourceTypes.");
            const operationName = "listBulkActionResourceTypes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/BulkActionResourceTypeCollection/ListBulkActionResourceTypes";
            const pathParams = {};
            const queryParams = {
                "bulkActionType": listBulkActionResourceTypesRequest.bulkActionType,
                "page": listBulkActionResourceTypesRequest.page,
                "limit": listBulkActionResourceTypesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listBulkActionResourceTypesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compartments/bulkActionResourceTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bulkActionResourceTypeCollection",
                    bodyModel: model.BulkActionResourceTypeCollection,
                    type: "model.BulkActionResourceTypeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the resource types that support bulk tag editing.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListBulkEditTagsResourceTypesRequest
     * @return ListBulkEditTagsResourceTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListBulkEditTagsResourceTypes.ts.html |here} to see how to use ListBulkEditTagsResourceTypes API.
     */
    listBulkEditTagsResourceTypes(listBulkEditTagsResourceTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listBulkEditTagsResourceTypes.");
            const operationName = "listBulkEditTagsResourceTypes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/BulkEditTagsResourceTypeCollection/ListBulkEditTagsResourceTypes";
            const pathParams = {};
            const queryParams = {
                "page": listBulkEditTagsResourceTypesRequest.page,
                "limit": listBulkEditTagsResourceTypesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listBulkEditTagsResourceTypesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tags/bulkEditResourceTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bulkEditTagsResourceTypeCollection",
                    bodyModel: model.BulkEditTagsResourceTypeCollection,
                    type: "model.BulkEditTagsResourceTypeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the compartments in a specified compartment. The members of the list
  * returned depends on the values set for several parameters.
  * <p>
  With the exception of the tenancy (root compartment), the ListCompartments operation
  * returns only the first-level child compartments in the parent compartment specified in
  * `compartmentId`. The list does not include any subcompartments of the child
  * compartments (grandchildren).
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (the resource can be in a subcompartment).
  * <p>
  The parameter `compartmentIdInSubtree` applies only when you perform ListCompartments on the
  * tenancy (root compartment). When set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ANY.
  * <p>
  See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListCompartmentsRequest
       * @return ListCompartmentsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListCompartments.ts.html |here} to see how to use ListCompartments API.
       */
    listCompartments(listCompartmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listCompartments.");
            const operationName = "listCompartments";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Compartment/ListCompartments";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCompartmentsRequest.compartmentId,
                "page": listCompartmentsRequest.page,
                "limit": listCompartmentsRequest.limit,
                "accessLevel": listCompartmentsRequest.accessLevel,
                "compartmentIdInSubtree": listCompartmentsRequest.compartmentIdInSubtree,
                "name": listCompartmentsRequest.name,
                "sortBy": listCompartmentsRequest.sortBy,
                "sortOrder": listCompartmentsRequest.sortOrder,
                "lifecycleState": listCompartmentsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCompartmentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compartments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.Compartment,
                    type: "Array<model.Compartment>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listCompartmentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Compartment objects
     * contained in responses from the listCompartments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCompartments(request) {
        return oci_common_1.paginateRecords(request, req => this.listCompartments(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listCompartmentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listCompartments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCompartmentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCompartments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.Compartment objects
     * contained in responses from the listCompartments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCompartmentsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listCompartments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCompartments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCompartmentsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listCompartments(req));
    }
    /**
     * Lists all the tags enabled for cost-tracking in the specified tenancy. For information about
     * cost-tracking tags, see [Using Cost-tracking Tags](https://docs.cloud.oracle.com/Content/Tagging/Tasks/usingcosttrackingtags.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCostTrackingTagsRequest
     * @return ListCostTrackingTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListCostTrackingTags.ts.html |here} to see how to use ListCostTrackingTags API.
     */
    listCostTrackingTags(listCostTrackingTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listCostTrackingTags.");
            const operationName = "listCostTrackingTags";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Tag/ListCostTrackingTags";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCostTrackingTagsRequest.compartmentId,
                "page": listCostTrackingTagsRequest.page,
                "limit": listCostTrackingTagsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCostTrackingTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/actions/listCostTrackingTags",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.Tag,
                    type: "Array<model.Tag>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listCostTrackingTagsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Tag objects
     * contained in responses from the listCostTrackingTags operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCostTrackingTags(request) {
        return oci_common_1.paginateRecords(request, req => this.listCostTrackingTags(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listCostTrackingTagsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listCostTrackingTags operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCostTrackingTagsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCostTrackingTags(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.Tag objects
     * contained in responses from the listCostTrackingTags operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCostTrackingTagsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listCostTrackingTags(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCostTrackingTags operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCostTrackingTagsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listCostTrackingTags(req));
    }
    /**
     * Lists the secret keys for the specified user. The returned object contains the secret key's OCID, but not
     * the secret key itself. The actual secret key is returned only upon creation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCustomerSecretKeysRequest
     * @return ListCustomerSecretKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListCustomerSecretKeys.ts.html |here} to see how to use ListCustomerSecretKeys API.
     */
    listCustomerSecretKeys(listCustomerSecretKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listCustomerSecretKeys.");
            const operationName = "listCustomerSecretKeys";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/CustomerSecretKeySummary/ListCustomerSecretKeys";
            const pathParams = {
                "{userId}": listCustomerSecretKeysRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCustomerSecretKeysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/customerSecretKeys",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.CustomerSecretKeySummary,
                    type: "Array<model.CustomerSecretKeySummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the DB credentials for the specified user. The returned object contains the credential's OCID
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDbCredentialsRequest
     * @return ListDbCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListDbCredentials.ts.html |here} to see how to use ListDbCredentials API.
     */
    listDbCredentials(listDbCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listDbCredentials.");
            const operationName = "listDbCredentials";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/ListDbCredentials";
            const pathParams = {
                "{userId}": listDbCredentialsRequest.userId
            };
            const queryParams = {
                "page": listDbCredentialsRequest.page,
                "limit": listDbCredentialsRequest.limit,
                "name": listDbCredentialsRequest.name,
                "sortBy": listDbCredentialsRequest.sortBy,
                "sortOrder": listDbCredentialsRequest.sortOrder,
                "lifecycleState": listDbCredentialsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDbCredentialsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDbCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/dbCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.DbCredentialSummary,
                    type: "Array<model.DbCredentialSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listDbCredentialsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.DbCredentialSummary objects
     * contained in responses from the listDbCredentials operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDbCredentials(request) {
        return oci_common_1.paginateRecords(request, req => this.listDbCredentials(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listDbCredentialsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listDbCredentials operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDbCredentialsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDbCredentials(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.DbCredentialSummary objects
     * contained in responses from the listDbCredentials operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDbCredentialsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listDbCredentials(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDbCredentials operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDbCredentialsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listDbCredentials(req));
    }
    /**
     * (For tenancies that support identity domains) Lists all identity domains within a tenancy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDomainsRequest
     * @return ListDomainsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListDomains.ts.html |here} to see how to use ListDomains API.
     */
    listDomains(listDomainsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listDomains.");
            const operationName = "listDomains";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/DomainSummary/ListDomains";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDomainsRequest.compartmentId,
                "displayName": listDomainsRequest.displayName,
                "url": listDomainsRequest.url,
                "homeRegionUrl": listDomainsRequest.homeRegionUrl,
                "type": listDomainsRequest.type,
                "licenseType": listDomainsRequest.licenseType,
                "isHiddenOnLogin": listDomainsRequest.isHiddenOnLogin,
                "page": listDomainsRequest.page,
                "limit": listDomainsRequest.limit,
                "name": listDomainsRequest.name,
                "sortBy": listDomainsRequest.sortBy,
                "sortOrder": listDomainsRequest.sortOrder,
                "lifecycleState": listDomainsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDomainsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDomainsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/domains",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.DomainSummary,
                    type: "Array<model.DomainSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listDomainsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.DomainSummary objects
     * contained in responses from the listDomains operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDomains(request) {
        return oci_common_1.paginateRecords(request, req => this.listDomains(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listDomainsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listDomains operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDomainsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDomains(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.DomainSummary objects
     * contained in responses from the listDomains operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDomainsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listDomains(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDomains operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDomainsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listDomains(req));
    }
    /**
     * Lists the dynamic groups in your tenancy. You must specify your tenancy's OCID as the value for
     * the compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDynamicGroupsRequest
     * @return ListDynamicGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListDynamicGroups.ts.html |here} to see how to use ListDynamicGroups API.
     */
    listDynamicGroups(listDynamicGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listDynamicGroups.");
            const operationName = "listDynamicGroups";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/DynamicGroup/ListDynamicGroups";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDynamicGroupsRequest.compartmentId,
                "page": listDynamicGroupsRequest.page,
                "limit": listDynamicGroupsRequest.limit,
                "name": listDynamicGroupsRequest.name,
                "sortBy": listDynamicGroupsRequest.sortBy,
                "sortOrder": listDynamicGroupsRequest.sortOrder,
                "lifecycleState": listDynamicGroupsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDynamicGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dynamicGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.DynamicGroup,
                    type: "Array<model.DynamicGroup>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listDynamicGroupsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.DynamicGroup objects
     * contained in responses from the listDynamicGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDynamicGroups(request) {
        return oci_common_1.paginateRecords(request, req => this.listDynamicGroups(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listDynamicGroupsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listDynamicGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDynamicGroupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDynamicGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.DynamicGroup objects
     * contained in responses from the listDynamicGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDynamicGroupsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listDynamicGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDynamicGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDynamicGroupsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listDynamicGroups(req));
    }
    /**
     * Lists the Fault Domains in your tenancy. Specify the OCID of either the tenancy or another
     * of your compartments as the value for the compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFaultDomainsRequest
     * @return ListFaultDomainsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListFaultDomains.ts.html |here} to see how to use ListFaultDomains API.
     */
    listFaultDomains(listFaultDomainsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listFaultDomains.");
            const operationName = "listFaultDomains";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/FaultDomain/ListFaultDomains";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listFaultDomainsRequest.compartmentId,
                "availabilityDomain": listFaultDomainsRequest.availabilityDomain
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listFaultDomainsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/faultDomains",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.FaultDomain,
                    type: "Array<model.FaultDomain>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the groups in your tenancy. You must specify your tenancy's OCID as the value for
     * the compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListGroupsRequest
     * @return ListGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListGroups.ts.html |here} to see how to use ListGroups API.
     */
    listGroups(listGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listGroups.");
            const operationName = "listGroups";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Group/ListGroups";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listGroupsRequest.compartmentId,
                "page": listGroupsRequest.page,
                "limit": listGroupsRequest.limit,
                "name": listGroupsRequest.name,
                "sortBy": listGroupsRequest.sortBy,
                "sortOrder": listGroupsRequest.sortOrder,
                "lifecycleState": listGroupsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/groups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.Group,
                    type: "Array<model.Group>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listGroupsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Group objects
     * contained in responses from the listGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllGroups(request) {
        return oci_common_1.paginateRecords(request, req => this.listGroups(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listGroupsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllGroupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.Group objects
     * contained in responses from the listGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listGroupsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listGroupsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listGroups(req));
    }
    /**
     * Gets error details for a specified IAM work request. The workRequestID is returned in the opc-workrequest-id header for any asynchronous operation in the Identity and Access Management service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListIamWorkRequestErrorsRequest
     * @return ListIamWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIamWorkRequestErrors.ts.html |here} to see how to use ListIamWorkRequestErrors API.
     */
    listIamWorkRequestErrors(listIamWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listIamWorkRequestErrors.");
            const operationName = "listIamWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IamWorkRequest/ListIamWorkRequestErrors";
            const pathParams = {
                "{iamWorkRequestId}": listIamWorkRequestErrorsRequest.iamWorkRequestId
            };
            const queryParams = {
                "limit": listIamWorkRequestErrorsRequest.limit,
                "page": listIamWorkRequestErrorsRequest.page,
                "sortOrder": listIamWorkRequestErrorsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listIamWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listIamWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/iamWorkRequests/{iamWorkRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.IamWorkRequestErrorSummary,
                    type: "Array<model.IamWorkRequestErrorSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IamWorkRequestErrorSummary objects
     * contained in responses from the listIamWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequestErrors(request) {
        return oci_common_1.paginateRecords(request, req => this.listIamWorkRequestErrors(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequestErrorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listIamWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.IamWorkRequestErrorSummary objects
     * contained in responses from the listIamWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestErrorsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listIamWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestErrorsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listIamWorkRequestErrors(req));
    }
    /**
     * Gets logs for a specified IAM work request. The workRequestID is returned in the opc-workrequest-id header for any asynchronous operation in the Identity and Access Management service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListIamWorkRequestLogsRequest
     * @return ListIamWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIamWorkRequestLogs.ts.html |here} to see how to use ListIamWorkRequestLogs API.
     */
    listIamWorkRequestLogs(listIamWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listIamWorkRequestLogs.");
            const operationName = "listIamWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IamWorkRequestLogSummary/ListIamWorkRequestLogs";
            const pathParams = {
                "{iamWorkRequestId}": listIamWorkRequestLogsRequest.iamWorkRequestId
            };
            const queryParams = {
                "limit": listIamWorkRequestLogsRequest.limit,
                "page": listIamWorkRequestLogsRequest.page,
                "sortOrder": listIamWorkRequestLogsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listIamWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listIamWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/iamWorkRequests/{iamWorkRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.IamWorkRequestLogSummary,
                    type: "Array<model.IamWorkRequestLogSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IamWorkRequestLogSummary objects
     * contained in responses from the listIamWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequestLogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listIamWorkRequestLogs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequestLogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listIamWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.IamWorkRequestLogSummary objects
     * contained in responses from the listIamWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestLogsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listIamWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestLogsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listIamWorkRequestLogs(req));
    }
    /**
     * Lists the IAM work requests in compartment. The workRequestID is returned in the opc-workrequest-id header for any asynchronous operation in the Identity and Access Management service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListIamWorkRequestsRequest
     * @return ListIamWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIamWorkRequests.ts.html |here} to see how to use ListIamWorkRequests API.
     */
    listIamWorkRequests(listIamWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listIamWorkRequests.");
            const operationName = "listIamWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IamWorkRequestSummary/ListIamWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listIamWorkRequestsRequest.compartmentId,
                "page": listIamWorkRequestsRequest.page,
                "limit": listIamWorkRequestsRequest.limit,
                "resourceIdentifier": listIamWorkRequestsRequest.resourceIdentifier
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listIamWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listIamWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/iamWorkRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.IamWorkRequestSummary,
                    type: "Array<model.IamWorkRequestSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IamWorkRequestSummary objects
     * contained in responses from the listIamWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listIamWorkRequests(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listIamWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.IamWorkRequestSummary objects
     * contained in responses from the listIamWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listIamWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listIamWorkRequests(req));
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Lists the identity provider groups.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListIdentityProviderGroupsRequest
       * @return ListIdentityProviderGroupsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIdentityProviderGroups.ts.html |here} to see how to use ListIdentityProviderGroups API.
       */
    listIdentityProviderGroups(listIdentityProviderGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listIdentityProviderGroups.");
            const operationName = "listIdentityProviderGroups";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IdentityProviderGroupSummary/ListIdentityProviderGroups";
            const pathParams = {
                "{identityProviderId}": listIdentityProviderGroupsRequest.identityProviderId
            };
            const queryParams = {
                "page": listIdentityProviderGroupsRequest.page,
                "limit": listIdentityProviderGroupsRequest.limit,
                "name": listIdentityProviderGroupsRequest.name,
                "lifecycleState": listIdentityProviderGroupsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listIdentityProviderGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders/{identityProviderId}/groups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.IdentityProviderGroupSummary,
                    type: "Array<model.IdentityProviderGroupSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listIdentityProviderGroupsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IdentityProviderGroupSummary objects
     * contained in responses from the listIdentityProviderGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdentityProviderGroups(request) {
        return oci_common_1.paginateRecords(request, req => this.listIdentityProviderGroups(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listIdentityProviderGroupsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIdentityProviderGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdentityProviderGroupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listIdentityProviderGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.IdentityProviderGroupSummary objects
     * contained in responses from the listIdentityProviderGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdentityProviderGroupsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listIdentityProviderGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIdentityProviderGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdentityProviderGroupsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listIdentityProviderGroups(req));
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Lists all the identity providers in your tenancy. You must specify the identity provider type (e.g., `SAML2` for
  * identity providers using the SAML2.0 protocol). You must specify your tenancy's OCID as the value for the
  * compartment ID (remember that the tenancy is simply the root compartment).
  * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListIdentityProvidersRequest
       * @return ListIdentityProvidersResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIdentityProviders.ts.html |here} to see how to use ListIdentityProviders API.
       */
    listIdentityProviders(listIdentityProvidersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listIdentityProviders.");
            const operationName = "listIdentityProviders";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IdentityProvider/ListIdentityProviders";
            const pathParams = {};
            const queryParams = {
                "protocol": listIdentityProvidersRequest.protocol,
                "compartmentId": listIdentityProvidersRequest.compartmentId,
                "page": listIdentityProvidersRequest.page,
                "limit": listIdentityProvidersRequest.limit,
                "name": listIdentityProvidersRequest.name,
                "sortBy": listIdentityProvidersRequest.sortBy,
                "sortOrder": listIdentityProvidersRequest.sortOrder,
                "lifecycleState": listIdentityProvidersRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listIdentityProvidersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.IdentityProvider,
                    type: "Array<model.IdentityProvider>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listIdentityProvidersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IdentityProvider objects
     * contained in responses from the listIdentityProviders operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdentityProviders(request) {
        return oci_common_1.paginateRecords(request, req => this.listIdentityProviders(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listIdentityProvidersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIdentityProviders operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdentityProvidersResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listIdentityProviders(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.IdentityProvider objects
     * contained in responses from the listIdentityProviders operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdentityProvidersRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listIdentityProviders(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIdentityProviders operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdentityProvidersResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listIdentityProviders(req));
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Lists the group mappings for the specified identity provider.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListIdpGroupMappingsRequest
       * @return ListIdpGroupMappingsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIdpGroupMappings.ts.html |here} to see how to use ListIdpGroupMappings API.
       */
    listIdpGroupMappings(listIdpGroupMappingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listIdpGroupMappings.");
            const operationName = "listIdpGroupMappings";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IdpGroupMapping/ListIdpGroupMappings";
            const pathParams = {
                "{identityProviderId}": listIdpGroupMappingsRequest.identityProviderId
            };
            const queryParams = {
                "page": listIdpGroupMappingsRequest.page,
                "limit": listIdpGroupMappingsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listIdpGroupMappingsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders/{identityProviderId}/groupMappings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.IdpGroupMapping,
                    type: "Array<model.IdpGroupMapping>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listIdpGroupMappingsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IdpGroupMapping objects
     * contained in responses from the listIdpGroupMappings operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdpGroupMappings(request) {
        return oci_common_1.paginateRecords(request, req => this.listIdpGroupMappings(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listIdpGroupMappingsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIdpGroupMappings operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdpGroupMappingsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listIdpGroupMappings(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.IdpGroupMapping objects
     * contained in responses from the listIdpGroupMappings operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdpGroupMappingsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listIdpGroupMappings(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIdpGroupMappings operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdpGroupMappingsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listIdpGroupMappings(req));
    }
    /**
     * Lists the MFA TOTP devices for the specified user. The returned object contains the device's OCID, but not
     * the seed. The seed is returned only upon creation or when the IAM service regenerates the MFA seed for the device.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMfaTotpDevicesRequest
     * @return ListMfaTotpDevicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListMfaTotpDevices.ts.html |here} to see how to use ListMfaTotpDevices API.
     */
    listMfaTotpDevices(listMfaTotpDevicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listMfaTotpDevices.");
            const operationName = "listMfaTotpDevices";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/MfaTotpDeviceSummary/ListMfaTotpDevices";
            const pathParams = {
                "{userId}": listMfaTotpDevicesRequest.userId
            };
            const queryParams = {
                "page": listMfaTotpDevicesRequest.page,
                "limit": listMfaTotpDevicesRequest.limit,
                "sortBy": listMfaTotpDevicesRequest.sortBy,
                "sortOrder": listMfaTotpDevicesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMfaTotpDevicesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/mfaTotpDevices",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.MfaTotpDeviceSummary,
                    type: "Array<model.MfaTotpDeviceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listMfaTotpDevicesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.MfaTotpDeviceSummary objects
     * contained in responses from the listMfaTotpDevices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMfaTotpDevices(request) {
        return oci_common_1.paginateRecords(request, req => this.listMfaTotpDevices(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listMfaTotpDevicesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listMfaTotpDevices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMfaTotpDevicesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listMfaTotpDevices(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.MfaTotpDeviceSummary objects
     * contained in responses from the listMfaTotpDevices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMfaTotpDevicesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listMfaTotpDevices(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMfaTotpDevices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMfaTotpDevicesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listMfaTotpDevices(req));
    }
    /**
     * Lists the network sources in your tenancy. You must specify your tenancy's OCID as the value for
     * the compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListNetworkSourcesRequest
     * @return ListNetworkSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListNetworkSources.ts.html |here} to see how to use ListNetworkSources API.
     */
    listNetworkSources(listNetworkSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listNetworkSources.");
            const operationName = "listNetworkSources";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/NetworkSourcesSummary/ListNetworkSources";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listNetworkSourcesRequest.compartmentId,
                "page": listNetworkSourcesRequest.page,
                "limit": listNetworkSourcesRequest.limit,
                "name": listNetworkSourcesRequest.name,
                "sortBy": listNetworkSourcesRequest.sortBy,
                "sortOrder": listNetworkSourcesRequest.sortOrder,
                "lifecycleState": listNetworkSourcesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listNetworkSourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.NetworkSourcesSummary,
                    type: "Array<model.NetworkSourcesSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listNetworkSourcesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.NetworkSourcesSummary objects
     * contained in responses from the listNetworkSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNetworkSources(request) {
        return oci_common_1.paginateRecords(request, req => this.listNetworkSources(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listNetworkSourcesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listNetworkSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNetworkSourcesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listNetworkSources(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.NetworkSourcesSummary objects
     * contained in responses from the listNetworkSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listNetworkSourcesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listNetworkSources(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listNetworkSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listNetworkSourcesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listNetworkSources(req));
    }
    /**
     * List of Oauth tokens for the user
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOAuthClientCredentialsRequest
     * @return ListOAuthClientCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListOAuthClientCredentials.ts.html |here} to see how to use ListOAuthClientCredentials API.
     */
    listOAuthClientCredentials(listOAuthClientCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listOAuthClientCredentials.");
            const operationName = "listOAuthClientCredentials";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/ListOAuthClientCredentials";
            const pathParams = {
                "{userId}": listOAuthClientCredentialsRequest.userId
            };
            const queryParams = {
                "page": listOAuthClientCredentialsRequest.page,
                "limit": listOAuthClientCredentialsRequest.limit,
                "lifecycleState": listOAuthClientCredentialsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOAuthClientCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/oauth2ClientCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.OAuth2ClientCredentialSummary,
                    type: "Array<model.OAuth2ClientCredentialSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listOAuthClientCredentialsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.OAuth2ClientCredentialSummary objects
     * contained in responses from the listOAuthClientCredentials operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOAuthClientCredentials(request) {
        return oci_common_1.paginateRecords(request, req => this.listOAuthClientCredentials(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listOAuthClientCredentialsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listOAuthClientCredentials operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOAuthClientCredentialsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listOAuthClientCredentials(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.OAuth2ClientCredentialSummary objects
     * contained in responses from the listOAuthClientCredentials operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOAuthClientCredentialsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listOAuthClientCredentials(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listOAuthClientCredentials operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOAuthClientCredentialsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listOAuthClientCredentials(req));
    }
    /**
       * Lists the policies in the specified compartment (either the tenancy or another of your compartments).
  * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
  * <p>
  To determine which policies apply to a particular group or compartment, you must view the individual
  * statements inside all your policies. There isn't a way to automatically obtain that information via the API.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListPoliciesRequest
       * @return ListPoliciesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListPolicies.ts.html |here} to see how to use ListPolicies API.
       */
    listPolicies(listPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listPolicies.");
            const operationName = "listPolicies";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Policy/ListPolicies";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listPoliciesRequest.compartmentId,
                "page": listPoliciesRequest.page,
                "limit": listPoliciesRequest.limit,
                "name": listPoliciesRequest.name,
                "sortBy": listPoliciesRequest.sortBy,
                "sortOrder": listPoliciesRequest.sortOrder,
                "lifecycleState": listPoliciesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listPoliciesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/policies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.Policy,
                    type: "Array<model.Policy>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listPoliciesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Policy objects
     * contained in responses from the listPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPolicies(request) {
        return oci_common_1.paginateRecords(request, req => this.listPolicies(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listPoliciesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPoliciesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listPolicies(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.Policy objects
     * contained in responses from the listPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPoliciesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listPolicies(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPoliciesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listPolicies(req));
    }
    /**
     * Lists the region subscriptions for the specified tenancy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRegionSubscriptionsRequest
     * @return ListRegionSubscriptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListRegionSubscriptions.ts.html |here} to see how to use ListRegionSubscriptions API.
     */
    listRegionSubscriptions(listRegionSubscriptionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listRegionSubscriptions.");
            const operationName = "listRegionSubscriptions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/RegionSubscription/ListRegionSubscriptions";
            const pathParams = {
                "{tenancyId}": listRegionSubscriptionsRequest.tenancyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listRegionSubscriptionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tenancies/{tenancyId}/regionSubscriptions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.RegionSubscription,
                    type: "Array<model.RegionSubscription>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all the regions offered by Oracle Cloud Infrastructure.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRegionsRequest
     * @return ListRegionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListRegions.ts.html |here} to see how to use ListRegions API.
     */
    listRegions(listRegionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listRegions.");
            const operationName = "listRegions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Region/ListRegions";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listRegionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/regions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.Region,
                    type: "Array<model.Region>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the SMTP credentials for the specified user. The returned object contains the credential's OCID,
     * the SMTP user name but not the SMTP password. The SMTP password is returned only upon creation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSmtpCredentialsRequest
     * @return ListSmtpCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListSmtpCredentials.ts.html |here} to see how to use ListSmtpCredentials API.
     */
    listSmtpCredentials(listSmtpCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listSmtpCredentials.");
            const operationName = "listSmtpCredentials";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/SmtpCredentialSummary/ListSmtpCredentials";
            const pathParams = {
                "{userId}": listSmtpCredentialsRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSmtpCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/smtpCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SmtpCredentialSummary,
                    type: "Array<model.SmtpCredentialSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists available standard tag namespaces that users can create.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListStandardTagNamespacesRequest
     * @return ListStandardTagNamespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListStandardTagNamespaces.ts.html |here} to see how to use ListStandardTagNamespaces API.
     */
    listStandardTagNamespaces(listStandardTagNamespacesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listStandardTagNamespaces.");
            const operationName = "listStandardTagNamespaces";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/StandardTagNamespaceTemplateSummary/ListStandardTagNamespaces";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listStandardTagNamespacesRequest.compartmentId,
                "page": listStandardTagNamespacesRequest.page,
                "limit": listStandardTagNamespacesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listStandardTagNamespacesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tags/standardTagNamespaceTemplates",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.StandardTagNamespaceTemplateSummary,
                    type: "Array<model.StandardTagNamespaceTemplateSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listStandardTagNamespacesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.StandardTagNamespaceTemplateSummary objects
     * contained in responses from the listStandardTagNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllStandardTagNamespaces(request) {
        return oci_common_1.paginateRecords(request, req => this.listStandardTagNamespaces(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listStandardTagNamespacesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listStandardTagNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllStandardTagNamespacesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listStandardTagNamespaces(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.StandardTagNamespaceTemplateSummary objects
     * contained in responses from the listStandardTagNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listStandardTagNamespacesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listStandardTagNamespaces(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listStandardTagNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listStandardTagNamespacesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listStandardTagNamespaces(req));
    }
    /**
       * **Deprecated. Use {@link #listAuthTokens(ListAuthTokensRequest) listAuthTokens} instead.**
  * <p>
  Lists the Swift passwords for the specified user. The returned object contains the password's OCID, but not
  * the password itself. The actual password is returned only upon creation.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSwiftPasswordsRequest
       * @return ListSwiftPasswordsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListSwiftPasswords.ts.html |here} to see how to use ListSwiftPasswords API.
       */
    listSwiftPasswords(listSwiftPasswordsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listSwiftPasswords.");
            const operationName = "listSwiftPasswords";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/SwiftPassword/ListSwiftPasswords";
            const pathParams = {
                "{userId}": listSwiftPasswordsRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSwiftPasswordsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/swiftPasswords",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SwiftPassword,
                    type: "Array<model.SwiftPassword>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the tag defaults for tag definitions in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTagDefaultsRequest
     * @return ListTagDefaultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTagDefaults.ts.html |here} to see how to use ListTagDefaults API.
     */
    listTagDefaults(listTagDefaultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listTagDefaults.");
            const operationName = "listTagDefaults";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagDefaultSummary/ListTagDefaults";
            const pathParams = {};
            const queryParams = {
                "page": listTagDefaultsRequest.page,
                "limit": listTagDefaultsRequest.limit,
                "id": listTagDefaultsRequest.id,
                "compartmentId": listTagDefaultsRequest.compartmentId,
                "tagDefinitionId": listTagDefaultsRequest.tagDefinitionId,
                "lifecycleState": listTagDefaultsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTagDefaultsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagDefaults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.TagDefaultSummary,
                    type: "Array<model.TagDefaultSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listTagDefaultsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TagDefaultSummary objects
     * contained in responses from the listTagDefaults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTagDefaults(request) {
        return oci_common_1.paginateRecords(request, req => this.listTagDefaults(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listTagDefaultsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTagDefaults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTagDefaultsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listTagDefaults(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.TagDefaultSummary objects
     * contained in responses from the listTagDefaults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagDefaultsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listTagDefaults(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTagDefaults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagDefaultsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listTagDefaults(req));
    }
    /**
     * Lists the tag namespaces in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTagNamespacesRequest
     * @return ListTagNamespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTagNamespaces.ts.html |here} to see how to use ListTagNamespaces API.
     */
    listTagNamespaces(listTagNamespacesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listTagNamespaces.");
            const operationName = "listTagNamespaces";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagNamespaceSummary/ListTagNamespaces";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listTagNamespacesRequest.compartmentId,
                "page": listTagNamespacesRequest.page,
                "limit": listTagNamespacesRequest.limit,
                "includeSubcompartments": listTagNamespacesRequest.includeSubcompartments,
                "lifecycleState": listTagNamespacesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTagNamespacesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.TagNamespaceSummary,
                    type: "Array<model.TagNamespaceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listTagNamespacesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TagNamespaceSummary objects
     * contained in responses from the listTagNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTagNamespaces(request) {
        return oci_common_1.paginateRecords(request, req => this.listTagNamespaces(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listTagNamespacesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTagNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTagNamespacesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listTagNamespaces(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.TagNamespaceSummary objects
     * contained in responses from the listTagNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagNamespacesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listTagNamespaces(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTagNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagNamespacesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listTagNamespaces(req));
    }
    /**
     * Gets the errors for a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTaggingWorkRequestErrorsRequest
     * @return ListTaggingWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTaggingWorkRequestErrors.ts.html |here} to see how to use ListTaggingWorkRequestErrors API.
     */
    listTaggingWorkRequestErrors(listTaggingWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listTaggingWorkRequestErrors.");
            const operationName = "listTaggingWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TaggingWorkRequestErrorSummary/ListTaggingWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listTaggingWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listTaggingWorkRequestErrorsRequest.page,
                "limit": listTaggingWorkRequestErrorsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTaggingWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/taggingWorkRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.TaggingWorkRequestErrorSummary,
                    type: "Array<model.TaggingWorkRequestErrorSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestErrorSummary objects
     * contained in responses from the listTaggingWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequestErrors(request) {
        return oci_common_1.paginateRecords(request, req => this.listTaggingWorkRequestErrors(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequestErrorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listTaggingWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestErrorSummary objects
     * contained in responses from the listTaggingWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestErrorsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listTaggingWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestErrorsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listTaggingWorkRequestErrors(req));
    }
    /**
     * Gets the logs for a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTaggingWorkRequestLogsRequest
     * @return ListTaggingWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTaggingWorkRequestLogs.ts.html |here} to see how to use ListTaggingWorkRequestLogs API.
     */
    listTaggingWorkRequestLogs(listTaggingWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listTaggingWorkRequestLogs.");
            const operationName = "listTaggingWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TaggingWorkRequestLogSummary/ListTaggingWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listTaggingWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listTaggingWorkRequestLogsRequest.page,
                "limit": listTaggingWorkRequestLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTaggingWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/taggingWorkRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.TaggingWorkRequestLogSummary,
                    type: "Array<model.TaggingWorkRequestLogSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestLogSummary objects
     * contained in responses from the listTaggingWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequestLogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listTaggingWorkRequestLogs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequestLogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listTaggingWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestLogSummary objects
     * contained in responses from the listTaggingWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestLogsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listTaggingWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestLogsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listTaggingWorkRequestLogs(req));
    }
    /**
     * Lists the tagging work requests in compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTaggingWorkRequestsRequest
     * @return ListTaggingWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTaggingWorkRequests.ts.html |here} to see how to use ListTaggingWorkRequests API.
     */
    listTaggingWorkRequests(listTaggingWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listTaggingWorkRequests.");
            const operationName = "listTaggingWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TaggingWorkRequestSummary/ListTaggingWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listTaggingWorkRequestsRequest.compartmentId,
                "page": listTaggingWorkRequestsRequest.page,
                "limit": listTaggingWorkRequestsRequest.limit,
                "resourceIdentifier": listTaggingWorkRequestsRequest.resourceIdentifier
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTaggingWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/taggingWorkRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.TaggingWorkRequestSummary,
                    type: "Array<model.TaggingWorkRequestSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestSummary objects
     * contained in responses from the listTaggingWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listTaggingWorkRequests(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listTaggingWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestSummary objects
     * contained in responses from the listTaggingWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listTaggingWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listTaggingWorkRequests(req));
    }
    /**
     * Lists the tag definitions in the specified tag namespace.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTagsRequest
     * @return ListTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTags.ts.html |here} to see how to use ListTags API.
     */
    listTags(listTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listTags.");
            const operationName = "listTags";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagSummary/ListTags";
            const pathParams = {
                "{tagNamespaceId}": listTagsRequest.tagNamespaceId
            };
            const queryParams = {
                "page": listTagsRequest.page,
                "limit": listTagsRequest.limit,
                "lifecycleState": listTagsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/{tagNamespaceId}/tags",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.TagSummary,
                    type: "Array<model.TagSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listTagsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TagSummary objects
     * contained in responses from the listTags operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTags(request) {
        return oci_common_1.paginateRecords(request, req => this.listTags(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listTagsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTags operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTagsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listTags(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.TagSummary objects
     * contained in responses from the listTags operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listTags(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTags operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listTags(req));
    }
    /**
       * Lists the `UserGroupMembership` objects in your tenancy. You must specify your tenancy's OCID
  * as the value for the compartment ID
  * (see [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five)).
  * You must also then filter the list in one of these ways:
  * <p>
  - You can limit the results to just the memberships for a given user by specifying a `userId`.
  * - Similarly, you can limit the results to just the memberships for a given group by specifying a `groupId`.
  * - You can set both the `userId` and `groupId` to determine if the specified user is in the specified group.
  * If the answer is no, the response is an empty list.
  * - Although`userId` and `groupId` are not individually required, you must set one of them.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListUserGroupMembershipsRequest
       * @return ListUserGroupMembershipsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListUserGroupMemberships.ts.html |here} to see how to use ListUserGroupMemberships API.
       */
    listUserGroupMemberships(listUserGroupMembershipsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listUserGroupMemberships.");
            const operationName = "listUserGroupMemberships";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/UserGroupMembership/ListUserGroupMemberships";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listUserGroupMembershipsRequest.compartmentId,
                "userId": listUserGroupMembershipsRequest.userId,
                "groupId": listUserGroupMembershipsRequest.groupId,
                "page": listUserGroupMembershipsRequest.page,
                "limit": listUserGroupMembershipsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listUserGroupMembershipsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userGroupMemberships",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.UserGroupMembership,
                    type: "Array<model.UserGroupMembership>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listUserGroupMembershipsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.UserGroupMembership objects
     * contained in responses from the listUserGroupMemberships operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserGroupMemberships(request) {
        return oci_common_1.paginateRecords(request, req => this.listUserGroupMemberships(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listUserGroupMembershipsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUserGroupMemberships operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserGroupMembershipsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listUserGroupMemberships(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.UserGroupMembership objects
     * contained in responses from the listUserGroupMemberships operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserGroupMembershipsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listUserGroupMemberships(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUserGroupMemberships operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserGroupMembershipsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listUserGroupMemberships(req));
    }
    /**
     * Lists the users in your tenancy. You must specify your tenancy's OCID as the value for the
     * compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListUsersRequest
     * @return ListUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListUsers.ts.html |here} to see how to use ListUsers API.
     */
    listUsers(listUsersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listUsers.");
            const operationName = "listUsers";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/ListUsers";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listUsersRequest.compartmentId,
                "page": listUsersRequest.page,
                "limit": listUsersRequest.limit,
                "identityProviderId": listUsersRequest.identityProviderId,
                "externalIdentifier": listUsersRequest.externalIdentifier,
                "name": listUsersRequest.name,
                "sortBy": listUsersRequest.sortBy,
                "sortOrder": listUsersRequest.sortOrder,
                "lifecycleState": listUsersRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listUsersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.User,
                    type: "Array<model.User>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listUsersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.User objects
     * contained in responses from the listUsers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUsers(request) {
        return oci_common_1.paginateRecords(request, req => this.listUsers(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listUsersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUsersResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listUsers(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.User objects
     * contained in responses from the listUsers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUsersRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listUsers(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUsersResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listUsers(req));
    }
    /**
     * Lists the work requests in compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/WorkRequestSummary/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit,
                "resourceIdentifier": listWorkRequestsRequest.resourceIdentifier
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestSummary,
                    type: "Array<model.WorkRequestSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Move the compartment to a different parent compartment in the same tenancy. When you move a
     * compartment, all its contents (subcompartments and resources) are moved with it. Note that
     * the `CompartmentId` that you specify in the path is the compartment that you want to move.
     * <p>
     **IMPORTANT**: After you move a compartment to a new parent compartment, the access policies of
     * the new parent take effect and the policies of the previous parent no longer apply. Ensure that you
     * are aware of the implications for the compartment contents before you move it. For more
     * information, see [Moving a Compartment](https://docs.cloud.oracle.com/Content/Identity/compartments/managingcompartments.htm#MoveCompartment).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param MoveCompartmentRequest
     * @return MoveCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/MoveCompartment.ts.html |here} to see how to use MoveCompartment API.
     */
    moveCompartment(moveCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#moveCompartment.");
            const operationName = "moveCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Compartment/MoveCompartment";
            const pathParams = {
                "{compartmentId}": moveCompartmentRequest.compartmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": moveCompartmentRequest.ifMatch,
                "opc-request-id": moveCompartmentRequest.opcRequestId,
                "opc-retry-token": moveCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, moveCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compartments/{compartmentId}/actions/moveCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(moveCompartmentRequest.moveCompartmentDetails, "MoveCompartmentDetails", model.MoveCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Recover the compartment from DELETED state to ACTIVE state.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RecoverCompartmentRequest
     * @return RecoverCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/RecoverCompartment.ts.html |here} to see how to use RecoverCompartment API.
     */
    recoverCompartment(recoverCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#recoverCompartment.");
            const operationName = "recoverCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Compartment/RecoverCompartment";
            const pathParams = {
                "{compartmentId}": recoverCompartmentRequest.compartmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": recoverCompartmentRequest.ifMatch,
                "opc-request-id": recoverCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, recoverCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compartments/{compartmentId}/actions/recoverCompartment",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "compartment",
                    bodyModel: model.Compartment,
                    type: "model.Compartment",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a user from a group by deleting the corresponding `UserGroupMembership`.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveUserFromGroupRequest
     * @return RemoveUserFromGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/RemoveUserFromGroup.ts.html |here} to see how to use RemoveUserFromGroup API.
     */
    removeUserFromGroup(removeUserFromGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#removeUserFromGroup.");
            const operationName = "removeUserFromGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/UserGroupMembership/RemoveUserFromGroup";
            const pathParams = {
                "{userGroupMembershipId}": removeUserFromGroupRequest.userGroupMembershipId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeUserFromGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeUserFromGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/userGroupMemberships/{userGroupMembershipId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Resets the OAuth2 client credentials for the SCIM client associated with this identity provider.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ResetIdpScimClientRequest
     * @return ResetIdpScimClientResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ResetIdpScimClient.ts.html |here} to see how to use ResetIdpScimClient API.
     */
    resetIdpScimClient(resetIdpScimClientRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#resetIdpScimClient.");
            const operationName = "resetIdpScimClient";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/ScimClientCredentials/ResetIdpScimClient";
            const pathParams = {
                "{identityProviderId}": resetIdpScimClientRequest.identityProviderId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, resetIdpScimClientRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders/{identityProviderId}/actions/resetScimClient",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scimClientCredentials",
                    bodyModel: model.ScimClientCredentials,
                    type: "model.ScimClientCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified auth token's description.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuthTokenRequest
     * @return UpdateAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateAuthToken.ts.html |here} to see how to use UpdateAuthToken API.
     */
    updateAuthToken(updateAuthTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateAuthToken.");
            const operationName = "updateAuthToken";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/AuthToken/UpdateAuthToken";
            const pathParams = {
                "{userId}": updateAuthTokenRequest.userId,
                "{authTokenId}": updateAuthTokenRequest.authTokenId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAuthTokenRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAuthTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/authTokens/{authTokenId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAuthTokenRequest.updateAuthTokenDetails, "UpdateAuthTokenDetails", model.UpdateAuthTokenDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authToken",
                    bodyModel: model.AuthToken,
                    type: "model.AuthToken",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates authentication policy for the specified tenancy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuthenticationPolicyRequest
     * @return UpdateAuthenticationPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateAuthenticationPolicy.ts.html |here} to see how to use UpdateAuthenticationPolicy API.
     */
    updateAuthenticationPolicy(updateAuthenticationPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateAuthenticationPolicy.");
            const operationName = "updateAuthenticationPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/AuthenticationPolicy/UpdateAuthenticationPolicy";
            const pathParams = {
                "{compartmentId}": updateAuthenticationPolicyRequest.compartmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAuthenticationPolicyRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAuthenticationPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/authenticationPolicies/{compartmentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAuthenticationPolicyRequest.updateAuthenticationPolicyDetails, "UpdateAuthenticationPolicyDetails", model.UpdateAuthenticationPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "authenticationPolicy",
                    bodyModel: model.AuthenticationPolicy,
                    type: "model.AuthenticationPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified compartment's description or name. You can't update the root compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateCompartmentRequest
     * @return UpdateCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateCompartment.ts.html |here} to see how to use UpdateCompartment API.
     */
    updateCompartment(updateCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateCompartment.");
            const operationName = "updateCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Compartment/UpdateCompartment";
            const pathParams = {
                "{compartmentId}": updateCompartmentRequest.compartmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/compartments/{compartmentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCompartmentRequest.updateCompartmentDetails, "UpdateCompartmentDetails", model.UpdateCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "compartment",
                    bodyModel: model.Compartment,
                    type: "model.Compartment",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified secret key's description.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateCustomerSecretKeyRequest
     * @return UpdateCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateCustomerSecretKey.ts.html |here} to see how to use UpdateCustomerSecretKey API.
     */
    updateCustomerSecretKey(updateCustomerSecretKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateCustomerSecretKey.");
            const operationName = "updateCustomerSecretKey";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/CustomerSecretKeySummary/UpdateCustomerSecretKey";
            const pathParams = {
                "{userId}": updateCustomerSecretKeyRequest.userId,
                "{customerSecretKeyId}": updateCustomerSecretKeyRequest.customerSecretKeyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateCustomerSecretKeyRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateCustomerSecretKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/customerSecretKeys/{customerSecretKeyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCustomerSecretKeyRequest.updateCustomerSecretKeyDetails, "UpdateCustomerSecretKeyDetails", model.UpdateCustomerSecretKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customerSecretKeySummary",
                    bodyModel: model.CustomerSecretKeySummary,
                    type: "model.CustomerSecretKeySummary",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * (For tenancies that support identity domains) Updates identity domain information and the associated Identity Cloud Service (IDCS) stripe.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateDomainRequest
       * @return UpdateDomainResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateDomain.ts.html |here} to see how to use UpdateDomain API.
       */
    updateDomain(updateDomainRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateDomain.");
            const operationName = "updateDomain";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Domain/UpdateDomain";
            const pathParams = {
                "{domainId}": updateDomainRequest.domainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDomainRequest.ifMatch,
                "opc-request-id": updateDomainRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDomainRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/domains/{domainId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDomainRequest.updateDomainDetails, "UpdateDomainDetails", model.UpdateDomainDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified dynamic group.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDynamicGroupRequest
     * @return UpdateDynamicGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateDynamicGroup.ts.html |here} to see how to use UpdateDynamicGroup API.
     */
    updateDynamicGroup(updateDynamicGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateDynamicGroup.");
            const operationName = "updateDynamicGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/DynamicGroup/UpdateDynamicGroup";
            const pathParams = {
                "{dynamicGroupId}": updateDynamicGroupRequest.dynamicGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDynamicGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDynamicGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dynamicGroups/{dynamicGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDynamicGroupRequest.updateDynamicGroupDetails, "UpdateDynamicGroupDetails", model.UpdateDynamicGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dynamicGroup",
                    bodyModel: model.DynamicGroup,
                    type: "model.DynamicGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified group.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateGroupRequest
     * @return UpdateGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateGroup.ts.html |here} to see how to use UpdateGroup API.
     */
    updateGroup(updateGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateGroup.");
            const operationName = "updateGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Group/UpdateGroup";
            const pathParams = {
                "{groupId}": updateGroupRequest.groupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/groups/{groupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateGroupRequest.updateGroupDetails, "UpdateGroupDetails", model.UpdateGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "group",
                    bodyModel: model.Group,
                    type: "model.Group",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Updates the specified identity provider.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateIdentityProviderRequest
       * @return UpdateIdentityProviderResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateIdentityProvider.ts.html |here} to see how to use UpdateIdentityProvider API.
       */
    updateIdentityProvider(updateIdentityProviderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateIdentityProvider.");
            const operationName = "updateIdentityProvider";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IdentityProvider/UpdateIdentityProvider";
            const pathParams = {
                "{identityProviderId}": updateIdentityProviderRequest.identityProviderId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateIdentityProviderRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateIdentityProviderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders/{identityProviderId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateIdentityProviderRequest.updateIdentityProviderDetails, "UpdateIdentityProviderDetails", model.UpdateIdentityProviderDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "identityProvider",
                    bodyModel: model.IdentityProvider,
                    type: "model.IdentityProvider",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Updates the specified group mapping.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateIdpGroupMappingRequest
       * @return UpdateIdpGroupMappingResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateIdpGroupMapping.ts.html |here} to see how to use UpdateIdpGroupMapping API.
       */
    updateIdpGroupMapping(updateIdpGroupMappingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateIdpGroupMapping.");
            const operationName = "updateIdpGroupMapping";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/IdpGroupMapping/UpdateIdpGroupMapping";
            const pathParams = {
                "{identityProviderId}": updateIdpGroupMappingRequest.identityProviderId,
                "{mappingId}": updateIdpGroupMappingRequest.mappingId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateIdpGroupMappingRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateIdpGroupMappingRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/identityProviders/{identityProviderId}/groupMappings/{mappingId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateIdpGroupMappingRequest.updateIdpGroupMappingDetails, "UpdateIdpGroupMappingDetails", model.UpdateIdpGroupMappingDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "idpGroupMapping",
                    bodyModel: model.IdpGroupMapping,
                    type: "model.IdpGroupMapping",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified network source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateNetworkSourceRequest
     * @return UpdateNetworkSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateNetworkSource.ts.html |here} to see how to use UpdateNetworkSource API.
     */
    updateNetworkSource(updateNetworkSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateNetworkSource.");
            const operationName = "updateNetworkSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/NetworkSources/UpdateNetworkSource";
            const pathParams = {
                "{networkSourceId}": updateNetworkSourceRequest.networkSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateNetworkSourceRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateNetworkSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSources/{networkSourceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateNetworkSourceRequest.updateNetworkSourceDetails, "UpdateNetworkSourceDetails", model.UpdateNetworkSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "networkSources",
                    bodyModel: model.NetworkSources,
                    type: "model.NetworkSources",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates Oauth token for the user
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOAuthClientCredentialRequest
     * @return UpdateOAuthClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateOAuthClientCredential.ts.html |here} to see how to use UpdateOAuthClientCredential API.
     */
    updateOAuthClientCredential(updateOAuthClientCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateOAuthClientCredential.");
            const operationName = "updateOAuthClientCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/UpdateOAuthClientCredential";
            const pathParams = {
                "{userId}": updateOAuthClientCredentialRequest.userId,
                "{oauth2ClientCredentialId}": updateOAuthClientCredentialRequest.oauth2ClientCredentialId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOAuthClientCredentialRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOAuthClientCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/oauth2ClientCredentials/{oauth2ClientCredentialId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOAuthClientCredentialRequest.updateOAuth2ClientCredentialDetails, "UpdateOAuth2ClientCredentialDetails", model.UpdateOAuth2ClientCredentialDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "oAuth2ClientCredential",
                    bodyModel: model.OAuth2ClientCredential,
                    type: "model.OAuth2ClientCredential",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified policy. You can update the description or the policy statements themselves.
  * <p>
  Policy changes take effect typically within 10 seconds.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdatePolicyRequest
       * @return UpdatePolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdatePolicy.ts.html |here} to see how to use UpdatePolicy API.
       */
    updatePolicy(updatePolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updatePolicy.");
            const operationName = "updatePolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Policy/UpdatePolicy";
            const pathParams = {
                "{policyId}": updatePolicyRequest.policyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updatePolicyRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updatePolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/policies/{policyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updatePolicyRequest.updatePolicyDetails, "UpdatePolicyDetails", model.UpdatePolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "policy",
                    bodyModel: model.Policy,
                    type: "model.Policy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified SMTP credential's description.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSmtpCredentialRequest
     * @return UpdateSmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateSmtpCredential.ts.html |here} to see how to use UpdateSmtpCredential API.
     */
    updateSmtpCredential(updateSmtpCredentialRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateSmtpCredential.");
            const operationName = "updateSmtpCredential";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/SmtpCredentialSummary/UpdateSmtpCredential";
            const pathParams = {
                "{userId}": updateSmtpCredentialRequest.userId,
                "{smtpCredentialId}": updateSmtpCredentialRequest.smtpCredentialId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSmtpCredentialRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSmtpCredentialRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/smtpCredentials/{smtpCredentialId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSmtpCredentialRequest.updateSmtpCredentialDetails, "UpdateSmtpCredentialDetails", model.UpdateSmtpCredentialDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "smtpCredentialSummary",
                    bodyModel: model.SmtpCredentialSummary,
                    type: "model.SmtpCredentialSummary",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * **Deprecated. Use {@link #updateAuthToken(UpdateAuthTokenRequest) updateAuthToken} instead.**
  * <p>
  Updates the specified Swift password's description.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateSwiftPasswordRequest
       * @return UpdateSwiftPasswordResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateSwiftPassword.ts.html |here} to see how to use UpdateSwiftPassword API.
       */
    updateSwiftPassword(updateSwiftPasswordRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateSwiftPassword.");
            const operationName = "updateSwiftPassword";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/SwiftPassword/UpdateSwiftPassword";
            const pathParams = {
                "{userId}": updateSwiftPasswordRequest.userId,
                "{swiftPasswordId}": updateSwiftPasswordRequest.swiftPasswordId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSwiftPasswordRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSwiftPasswordRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/swiftPasswords/{swiftPasswordId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSwiftPasswordRequest.updateSwiftPasswordDetails, "UpdateSwiftPasswordDetails", model.UpdateSwiftPasswordDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "swiftPassword",
                    bodyModel: model.SwiftPassword,
                    type: "model.SwiftPassword",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified tag definition.
  * <p>
  Setting `validator` determines the value type. Tags can use either a static value or a
  * list of possible values. Static values are entered by a user applying the tag to a resource.
  * Lists are created by you and the user must apply a value from the list. On update, any values
  * in a list that were previously set do not change, but new values must pass validation. Values
  * already applied to a resource do not change.
  * <p>
  You cannot remove list values that appear in a TagDefault. To remove a list value that
  * appears in a TagDefault, first update the TagDefault to use a different value.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateTagRequest
       * @return UpdateTagResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateTag.ts.html |here} to see how to use UpdateTag API.
       */
    updateTag(updateTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateTag.");
            const operationName = "updateTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/Tag/UpdateTag";
            const pathParams = {
                "{tagNamespaceId}": updateTagRequest.tagNamespaceId,
                "{tagName}": updateTagRequest.tagName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTagRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/{tagNamespaceId}/tags/{tagName}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTagRequest.updateTagDetails, "UpdateTagDetails", model.UpdateTagDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tag",
                    bodyModel: model.Tag,
                    type: "model.Tag",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified tag default. If you specify that a value is required, a value is set
     * during resource creation (either by the user creating the resource or another tag defualt).
     * If no value is set, resource creation is blocked.
     * <p>
     * If the `isRequired` flag is set to \"true\", the value is set during resource creation.
     * * If the `isRequired` flag is set to \"false\", the value you enter is set during resource creation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateTagDefaultRequest
     * @return UpdateTagDefaultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateTagDefault.ts.html |here} to see how to use UpdateTagDefault API.
     */
    updateTagDefault(updateTagDefaultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateTagDefault.");
            const operationName = "updateTagDefault";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagDefault/UpdateTagDefault";
            const pathParams = {
                "{tagDefaultId}": updateTagDefaultRequest.tagDefaultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTagDefaultRequest.ifMatch,
                "opc-request-id": updateTagDefaultRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateTagDefaultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagDefaults/{tagDefaultId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTagDefaultRequest.updateTagDefaultDetails, "UpdateTagDefaultDetails", model.UpdateTagDefaultDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tagDefault",
                    bodyModel: model.TagDefault,
                    type: "model.TagDefault",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the the specified tag namespace. You can't update the namespace name.
  * <p>
  Updating `isRetired` to 'true' retires the namespace and all the tag definitions in the namespace. Reactivating a
  * namespace (changing `isRetired` from 'true' to 'false') does not reactivate tag definitions.
  * To reactivate the tag definitions, you must reactivate each one individually *after* you reactivate the namespace,
  * using {@link #updateTag(UpdateTagRequest) updateTag}. For more information about retiring tag namespaces, see
  * [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/Content/Tagging/Tasks/managingtagsandtagnamespaces.htm#retiringkeys).
  * <p>
  You can't add a namespace with the same name as a retired namespace in the same tenancy.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateTagNamespaceRequest
       * @return UpdateTagNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateTagNamespace.ts.html |here} to see how to use UpdateTagNamespace API.
       */
    updateTagNamespace(updateTagNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateTagNamespace.");
            const operationName = "updateTagNamespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/TagNamespace/UpdateTagNamespace";
            const pathParams = {
                "{tagNamespaceId}": updateTagNamespaceRequest.tagNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateTagNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tagNamespaces/{tagNamespaceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTagNamespaceRequest.updateTagNamespaceDetails, "UpdateTagNamespaceDetails", model.UpdateTagNamespaceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tagNamespace",
                    bodyModel: model.TagNamespace,
                    type: "model.TagNamespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the description of the specified user.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateUserRequest
     * @return UpdateUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateUser.ts.html |here} to see how to use UpdateUser API.
     */
    updateUser(updateUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateUser.");
            const operationName = "updateUser";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/UpdateUser";
            const pathParams = {
                "{userId}": updateUserRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateUserRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateUserRequest.updateUserDetails, "UpdateUserDetails", model.UpdateUserDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "user",
                    bodyModel: model.User,
                    type: "model.User",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the capabilities of the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateUserCapabilitiesRequest
     * @return UpdateUserCapabilitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateUserCapabilities.ts.html |here} to see how to use UpdateUserCapabilities API.
     */
    updateUserCapabilities(updateUserCapabilitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateUserCapabilities.");
            const operationName = "updateUserCapabilities";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/UpdateUserCapabilities";
            const pathParams = {
                "{userId}": updateUserCapabilitiesRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateUserCapabilitiesRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateUserCapabilitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/capabilities",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateUserCapabilitiesRequest.updateUserCapabilitiesDetails, "UpdateUserCapabilitiesDetails", model.UpdateUserCapabilitiesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "user",
                    bodyModel: model.User,
                    type: "model.User",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the state of the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateUserStateRequest
     * @return UpdateUserStateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateUserState.ts.html |here} to see how to use UpdateUserState API.
     */
    updateUserState(updateUserStateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#updateUserState.");
            const operationName = "updateUserState";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/User/UpdateUserState";
            const pathParams = {
                "{userId}": updateUserStateRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateUserStateRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateUserStateRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/state",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateUserStateRequest.updateStateDetails, "UpdateStateDetails", model.UpdateStateDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "user",
                    bodyModel: model.User,
                    type: "model.User",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Uploads an API signing key for the specified user.
  * <p>
  Every user has permission to use this operation to upload a key for *their own user ID*. An
  * administrator in your organization does not need to write a policy to give users this ability.
  * To compare, administrators who have permission to the tenancy can use this operation to upload a
  * key for any user, including themselves.
  * <p>
  **Important:** Even though you have permission to upload an API key, you might not yet
  * have permission to do much else. If you try calling an operation unrelated to your own credential
  * management (e.g., `ListUsers`, `LaunchInstance`) and receive an \"unauthorized\" error,
  * check with an administrator to confirm which IAM Service group(s) you're in and what access
  * you have. Also confirm you're working in the correct compartment.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using
  * the object, first make sure its `lifecycleState` has changed to ACTIVE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UploadApiKeyRequest
       * @return UploadApiKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UploadApiKey.ts.html |here} to see how to use UploadApiKey API.
       */
    uploadApiKey(uploadApiKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation IdentityClient#uploadApiKey.");
            const operationName = "uploadApiKey";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/identity/20160918/ApiKey/UploadApiKey";
            const pathParams = {
                "{userId}": uploadApiKeyRequest.userId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": uploadApiKeyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, uploadApiKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/users/{userId}/apiKeys",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(uploadApiKeyRequest.createApiKeyDetails, "CreateApiKeyDetails", model.CreateApiKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "apiKey",
                    bodyModel: model.ApiKey,
                    type: "model.ApiKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.IdentityClient = IdentityClient;
IdentityClient.serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
IdentityClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map