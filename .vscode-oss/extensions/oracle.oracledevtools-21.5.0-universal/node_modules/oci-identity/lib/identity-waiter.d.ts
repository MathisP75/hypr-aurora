/**
 * Identity and Access Management Service API
 * APIs for managing users, groups, compartments, policies, and identity domains.
 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { IdentityClient } from "./client";
export declare class IdentityWaiter {
    private client;
    private readonly config?;
    constructor(client: IdentityClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forCompartment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCompartmentResponse | null (null in case of 404 response)
     */
    forCompartment(request: serviceRequests.GetCompartmentRequest, ...targetStates: models.Compartment.LifecycleState[]): Promise<serviceResponses.GetCompartmentResponse | null>;
    /**
     * Waits forDomain till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDomainResponse
     */
    forDomain(request: serviceRequests.GetDomainRequest, ...targetStates: models.Domain.LifecycleState[]): Promise<serviceResponses.GetDomainResponse>;
    /**
     * Waits forDynamicGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDynamicGroupResponse | null (null in case of 404 response)
     */
    forDynamicGroup(request: serviceRequests.GetDynamicGroupRequest, ...targetStates: models.DynamicGroup.LifecycleState[]): Promise<serviceResponses.GetDynamicGroupResponse | null>;
    /**
     * Waits forGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetGroupResponse | null (null in case of 404 response)
     */
    forGroup(request: serviceRequests.GetGroupRequest, ...targetStates: models.Group.LifecycleState[]): Promise<serviceResponses.GetGroupResponse | null>;
    /**
     * Waits forIamWorkRequest
     *
     * @param request the request to send
     * @return response returns GetIamWorkRequestResponse
     */
    forIamWorkRequest(request: serviceRequests.GetIamWorkRequestRequest): Promise<serviceResponses.GetIamWorkRequestResponse>;
    /**
     * Waits forIdentityProvider till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIdentityProviderResponse | null (null in case of 404 response)
     */
    forIdentityProvider(request: serviceRequests.GetIdentityProviderRequest, ...targetStates: models.IdentityProvider.LifecycleState[]): Promise<serviceResponses.GetIdentityProviderResponse | null>;
    /**
     * Waits forIdpGroupMapping till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIdpGroupMappingResponse | null (null in case of 404 response)
     */
    forIdpGroupMapping(request: serviceRequests.GetIdpGroupMappingRequest, ...targetStates: models.IdpGroupMapping.LifecycleState[]): Promise<serviceResponses.GetIdpGroupMappingResponse | null>;
    /**
     * Waits forPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPolicyResponse | null (null in case of 404 response)
     */
    forPolicy(request: serviceRequests.GetPolicyRequest, ...targetStates: models.Policy.LifecycleState[]): Promise<serviceResponses.GetPolicyResponse | null>;
    /**
     * Waits forTag till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTagResponse | null (null in case of 404 response)
     */
    forTag(request: serviceRequests.GetTagRequest, ...targetStates: models.Tag.LifecycleState[]): Promise<serviceResponses.GetTagResponse | null>;
    /**
     * Waits forTagDefault till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTagDefaultResponse
     */
    forTagDefault(request: serviceRequests.GetTagDefaultRequest, ...targetStates: models.TagDefault.LifecycleState[]): Promise<serviceResponses.GetTagDefaultResponse>;
    /**
     * Waits forTagNamespace till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTagNamespaceResponse | null (null in case of 404 response)
     */
    forTagNamespace(request: serviceRequests.GetTagNamespaceRequest, ...targetStates: models.TagNamespace.LifecycleState[]): Promise<serviceResponses.GetTagNamespaceResponse | null>;
    /**
     * Waits forTaggingWorkRequest
     *
     * @param request the request to send
     * @return response returns GetTaggingWorkRequestResponse
     */
    forTaggingWorkRequest(request: serviceRequests.GetTaggingWorkRequestRequest): Promise<serviceResponses.GetTaggingWorkRequestResponse>;
    /**
     * Waits forUser till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetUserResponse | null (null in case of 404 response)
     */
    forUser(request: serviceRequests.GetUserRequest, ...targetStates: models.User.LifecycleState[]): Promise<serviceResponses.GetUserResponse | null>;
    /**
     * Waits forUserGroupMembership till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetUserGroupMembershipResponse | null (null in case of 404 response)
     */
    forUserGroupMembership(request: serviceRequests.GetUserGroupMembershipRequest, ...targetStates: models.UserGroupMembership.LifecycleState[]): Promise<serviceResponses.GetUserGroupMembershipResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
