"use strict";
/**
 * Identity and Access Management Service API
 * APIs for managing users, groups, compartments, policies, and identity domains.
 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateIdentityProviderDetails = void 0;
const model = __importStar(require("../model"));
var CreateIdentityProviderDetails;
(function (CreateIdentityProviderDetails) {
    let ProductType;
    (function (ProductType) {
        ProductType["Idcs"] = "IDCS";
        ProductType["Adfs"] = "ADFS";
    })(ProductType = CreateIdentityProviderDetails.ProductType || (CreateIdentityProviderDetails.ProductType = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "protocol" in obj && obj.protocol) {
            switch (obj.protocol) {
                case "SAML2":
                    return model.CreateSaml2IdentityProviderDetails.getJsonObj(jsonObj, true);
                default:
                    throw Error("Unknown value for: " + obj.protocol);
            }
        }
        return jsonObj;
    }
    CreateIdentityProviderDetails.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "protocol" in obj && obj.protocol) {
            switch (obj.protocol) {
                case "SAML2":
                    return model.CreateSaml2IdentityProviderDetails.getDeserializedJsonObj(jsonObj, true);
                default:
                    throw Error("Unknown value for: " + obj.protocol);
            }
        }
        return jsonObj;
    }
    CreateIdentityProviderDetails.getDeserializedJsonObj = getDeserializedJsonObj;
})(CreateIdentityProviderDetails = exports.CreateIdentityProviderDetails || (exports.CreateIdentityProviderDetails = {}));
//# sourceMappingURL=create-identity-provider-details.js.map