/**
 * Identity and Access Management Service API
 * APIs for managing users, groups, compartments, policies, and identity domains.
 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The asynchronous API request does not take effect immediately. This request spawns an asynchronous
 * workflow to fulfill the request. WorkRequest objects provide visibility for in-progress workflows.
 *
 */
export interface TaggingWorkRequest {
    /**
     * The OCID of the work request.
     */
    "id": string;
    /**
     * An enum-like description of the type of work the work request is doing.
     */
    "operationType": TaggingWorkRequest.OperationType;
    /**
     * The OCID of the compartment that contains the work request.
     */
    "compartmentId"?: string;
    /**
     * The current status of the work request.
     */
    "status": TaggingWorkRequest.Status;
    /**
     * The resources this work request affects.
     *
     */
    "resources"?: Array<model.WorkRequestResource>;
    /**
     * Date and time the work was accepted, in the format defined by RFC3339.
     * Example: `2016-08-25T21:10:29.600Z`
     *
     */
    "timeAccepted"?: Date;
    /**
     * Date and time the work started, in the format defined by RFC3339.
     * Example: `2016-08-25T21:10:29.600Z`
     *
     */
    "timeStarted"?: Date;
    /**
     * Date and time the work completed, in the format defined by RFC3339.
     * Example: `2016-08-25T21:10:29.600Z`
     *
     */
    "timeFinished"?: Date;
    /**
     * How much progress the operation has made.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "percentComplete"?: number;
}
export declare namespace TaggingWorkRequest {
    enum OperationType {
        DeleteTagDefinition = "DELETE_TAG_DEFINITION",
        DeleteNonEmptyTagNamespace = "DELETE_NON_EMPTY_TAG_NAMESPACE",
        BulkDeleteTagDefinition = "BULK_DELETE_TAG_DEFINITION",
        BulkEditOfTags = "BULK_EDIT_OF_TAGS",
        ImportStandardTags = "IMPORT_STANDARD_TAGS",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum Status {
        Accepted = "ACCEPTED",
        InProgress = "IN_PROGRESS",
        Failed = "FAILED",
        Succeeded = "SUCCEEDED",
        PartiallySucceeded = "PARTIALLY_SUCCEEDED",
        Canceling = "CANCELING",
        Canceled = "CANCELED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: TaggingWorkRequest): object;
    function getDeserializedJsonObj(obj: TaggingWorkRequest): object;
}
