/**
 * Identity and Access Management Service API
 * APIs for managing users, groups, compartments, policies, and identity domains.
 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { IdentityWaiter } from "./identity-waiter";
export declare enum IdentityApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class IdentityClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": IdentityWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpOptions: any;
    targetService: string;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new IdentityWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): IdentityWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): IdentityWaiter;
    /**
       * (For tenancies that support identity domains) Activates a deactivated identity domain. You can only activate identity domains that your user account is not a part of.
  * <p>
  After you send the request, the `lifecycleDetails` of the identity domain is set to ACTIVATING. When the operation completes, the
  * `lifecycleDetails` is set to null and the `lifecycleState` of the identity domain is set to ACTIVE.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ActivateDomainRequest
       * @return ActivateDomainResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ActivateDomain.ts.html |here} to see how to use ActivateDomain API.
       */
    activateDomain(activateDomainRequest: requests.ActivateDomainRequest): Promise<responses.ActivateDomainResponse>;
    /**
     * Activates the specified MFA TOTP device for the user. Activation requires manual interaction with the Console.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ActivateMfaTotpDeviceRequest
     * @return ActivateMfaTotpDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ActivateMfaTotpDevice.ts.html |here} to see how to use ActivateMfaTotpDevice API.
     */
    activateMfaTotpDevice(activateMfaTotpDeviceRequest: requests.ActivateMfaTotpDeviceRequest): Promise<responses.ActivateMfaTotpDeviceResponse>;
    /**
       * Adds the specified user to the specified group and returns a `UserGroupMembership` object with its own OCID.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param AddUserToGroupRequest
       * @return AddUserToGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/AddUserToGroup.ts.html |here} to see how to use AddUserToGroup API.
       */
    addUserToGroup(addUserToGroupRequest: requests.AddUserToGroupRequest): Promise<responses.AddUserToGroupResponse>;
    /**
     * Assembles tag defaults in the specified compartment and any parent compartments to determine
     * the tags to apply. Tag defaults from parent compartments do not override tag defaults
     * referencing the same tag in a compartment lower down the hierarchy. This set of tag defaults
     * includes all tag defaults from the current compartment back to the root compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AssembleEffectiveTagSetRequest
     * @return AssembleEffectiveTagSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/AssembleEffectiveTagSet.ts.html |here} to see how to use AssembleEffectiveTagSet API.
     */
    assembleEffectiveTagSet(assembleEffectiveTagSetRequest: requests.AssembleEffectiveTagSetRequest): Promise<responses.AssembleEffectiveTagSetResponse>;
    /**
     * Deletes multiple resources in the compartment. All resources must be in the same compartment. You must have the appropriate
     * permissions to delete the resources in the request. This API can only be invoked from the tenancy's
     * [home region](https://docs.cloud.oracle.com/Content/Identity/regions/managingregions.htm#Home). This operation creates a
     * {@link WorkRequest}. Use the {@link #getWorkRequest(GetWorkRequestRequest) getWorkRequest}
     * API to monitor the status of the bulk action.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkDeleteResourcesRequest
     * @return BulkDeleteResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/BulkDeleteResources.ts.html |here} to see how to use BulkDeleteResources API.
     */
    bulkDeleteResources(bulkDeleteResourcesRequest: requests.BulkDeleteResourcesRequest): Promise<responses.BulkDeleteResourcesResponse>;
    /**
       * Deletes the specified tag key definitions. This operation triggers a process that removes the
  * tags from all resources in your tenancy. The tag key definitions must be within the same tag namespace.
  * <p>
  The following actions happen immediately:
  * \u00A0
  *   * If the tag is a cost-tracking tag, the tag no longer counts against your
  *   10 cost-tracking tags limit, even if you do not disable the tag before running this operation.
  *   * If the tag is used with dynamic groups, the rules that contain the tag are no longer
  *   evaluated against the tag.
  * <p>
  After you start this operation, the state of the tag changes to DELETING, and tag removal
  * from resources begins. This process can take up to 48 hours depending on the number of resources that
  * are tagged and the regions in which those resources reside.
  * <p>
  When all tags have been removed, the state changes to DELETED. You cannot restore a deleted tag. After the tag state
  * changes to DELETED, you can use the same tag name again.
  * <p>
  After you start this operation, you cannot start either the {@link #deleteTag(DeleteTagRequest) deleteTag} or the {@link #cascadeDeleteTagNamespace(CascadeDeleteTagNamespaceRequest) cascadeDeleteTagNamespace} operation until this process completes.
  * <p>
  In order to delete tags, you must first retire the tags. Use {@link #updateTag(UpdateTagRequest) updateTag}
  * to retire a tag.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param BulkDeleteTagsRequest
       * @return BulkDeleteTagsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/BulkDeleteTags.ts.html |here} to see how to use BulkDeleteTags API.
       */
    bulkDeleteTags(bulkDeleteTagsRequest: requests.BulkDeleteTagsRequest): Promise<responses.BulkDeleteTagsResponse>;
    /**
       * Edits the specified list of tag key definitions for the selected resources.
  * This operation triggers a process that edits the tags on all selected resources. The possible actions are:
  * <p>
    * Add a defined tag when the tag does not already exist on the resource.
  *   * Update the value for a defined tag when the tag is present on the resource.
  *   * Add a defined tag when it does not already exist on the resource or update the value for a defined tag when the tag is present on the resource.
  *   * Remove a defined tag from a resource. The tag is removed from the resource regardless of the tag value.
  * <p>
  See {@link #bulkEditOperationDetails(BulkEditOperationDetailsRequest) bulkEditOperationDetails} for more information.
  * <p>
  The edits can include a combination of operations and tag sets.
  * However, multiple operations cannot apply to one key definition in the same request.
  * For example, if one request adds `tag set-1` to a resource and sets a tag value to `tag set-2`,
  * `tag set-1` and `tag set-2` cannot have any common tag definitions.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param BulkEditTagsRequest
       * @return BulkEditTagsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/BulkEditTags.ts.html |here} to see how to use BulkEditTags API.
       */
    bulkEditTags(bulkEditTagsRequest: requests.BulkEditTagsRequest): Promise<responses.BulkEditTagsResponse>;
    /**
     * Moves multiple resources from one compartment to another. All resources must be in the same compartment.
     * This API can only be invoked from the tenancy's [home region](https://docs.cloud.oracle.com/Content/Identity/regions/managingregions.htm#Home).
     * To move resources, you must have the appropriate permissions to move the resource in both the source and target
     * compartments. This operation creates a {@link WorkRequest}.
     * Use the {@link #getWorkRequest(GetWorkRequestRequest) getWorkRequest} API to monitor the status of the bulk action.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkMoveResourcesRequest
     * @return BulkMoveResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/BulkMoveResources.ts.html |here} to see how to use BulkMoveResources API.
     */
    bulkMoveResources(bulkMoveResourcesRequest: requests.BulkMoveResourcesRequest): Promise<responses.BulkMoveResourcesResponse>;
    /**
       * Deletes the specified tag namespace. This operation triggers a process that removes all of the tags
  * defined in the specified tag namespace from all resources in your tenancy and then deletes the tag namespace.
  * <p>
  After you start the delete operation:
  * <p>
    * New tag key definitions cannot be created under the namespace.
  *   * The state of the tag namespace changes to DELETING.
  *   * Tag removal from the resources begins.
  * <p>
  This process can take up to 48 hours depending on the number of tag definitions in the namespace, the number of resources
  * that are tagged, and the locations of the regions in which those resources reside.
  * <p>
  After all tags are removed, the state changes to DELETED. You cannot restore a deleted tag namespace. After the deleted tag namespace
  * changes its state to DELETED, you can use the name of the deleted tag namespace again.
  * <p>
  After you start this operation, you cannot start either the {@link #deleteTag(DeleteTagRequest) deleteTag} or the {@link #bulkDeleteTags(BulkDeleteTagsRequest) bulkDeleteTags} operation until this process completes.
  * <p>
  To delete a tag namespace, you must first retire it. Use {@link #updateTagNamespace(UpdateTagNamespaceRequest) updateTagNamespace}
  * to retire a tag namespace.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CascadeDeleteTagNamespaceRequest
       * @return CascadeDeleteTagNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CascadeDeleteTagNamespace.ts.html |here} to see how to use CascadeDeleteTagNamespace API.
       */
    cascadeDeleteTagNamespace(cascadeDeleteTagNamespaceRequest: requests.CascadeDeleteTagNamespaceRequest): Promise<responses.CascadeDeleteTagNamespaceResponse>;
    /**
       * (For tenancies that support identity domains) Moves the identity domain to a different compartment in the tenancy.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeDomainCompartmentRequest
       * @return ChangeDomainCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ChangeDomainCompartment.ts.html |here} to see how to use ChangeDomainCompartment API.
       */
    changeDomainCompartment(changeDomainCompartmentRequest: requests.ChangeDomainCompartmentRequest): Promise<responses.ChangeDomainCompartmentResponse>;
    /**
       * (For tenancies that support identity domains) Changes the license type of the given identity domain. The identity domain's
  * `lifecycleState` must be set to ACTIVE and the requested `licenseType` must be allowed. To retrieve the allowed `licenseType` for
  * the identity domain, use {@link #listAllowedDomainLicenseTypes(ListAllowedDomainLicenseTypesRequest) listAllowedDomainLicenseTypes}.
  * <p>
  After you send your request, the `lifecycleDetails` of this identity domain is set to UPDATING. When the update of the identity
  * domain completes, then the `lifecycleDetails` is set to null.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeDomainLicenseTypeRequest
       * @return ChangeDomainLicenseTypeResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ChangeDomainLicenseType.ts.html |here} to see how to use ChangeDomainLicenseType API.
       */
    changeDomainLicenseType(changeDomainLicenseTypeRequest: requests.ChangeDomainLicenseTypeRequest): Promise<responses.ChangeDomainLicenseTypeResponse>;
    /**
       * Moves the specified tag namespace to the specified compartment within the same tenancy.
  * <p>
  To move the tag namespace, you must have the manage tag-namespaces permission on both compartments.
  * For more information about IAM policies, see [Details for IAM](https://docs.cloud.oracle.com/Content/Identity/policyreference/iampolicyreference.htm).
  * <p>
  Moving a tag namespace moves all the tag key definitions contained in the tag namespace.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeTagNamespaceCompartmentRequest
       * @return ChangeTagNamespaceCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ChangeTagNamespaceCompartment.ts.html |here} to see how to use ChangeTagNamespaceCompartment API.
       */
    changeTagNamespaceCompartment(changeTagNamespaceCompartmentRequest: requests.ChangeTagNamespaceCompartmentRequest): Promise<responses.ChangeTagNamespaceCompartmentResponse>;
    /**
       * Creates a new auth token for the specified user. For information about what auth tokens are for, see
  * [Managing User Credentials](https://docs.cloud.oracle.com/Content/Identity/access/managing-user-credentials.htm).
  * <p>
  You must specify a *description* for the auth token (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with
  * {@link #updateAuthToken(UpdateAuthTokenRequest) updateAuthToken}.
  * <p>
  Every user has permission to create an auth token for *their own user ID*. An administrator in your organization
  * does not need to write a policy to give users this ability. To compare, administrators who have permission to the
  * tenancy can use this operation to create an auth token for any user, including themselves.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateAuthTokenRequest
       * @return CreateAuthTokenResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateAuthToken.ts.html |here} to see how to use CreateAuthToken API.
       */
    createAuthToken(createAuthTokenRequest: requests.CreateAuthTokenRequest): Promise<responses.CreateAuthTokenResponse>;
    /**
       * Creates a new compartment in the specified compartment.
  * <p>
  Specify the parent compartment's OCID as the compartment ID in the request object. Remember that the tenancy
  * is simply the root compartment. For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the compartment, which must be unique across all compartments in
  * your tenancy. You can use this name or the OCID when writing policies that apply
  * to the compartment. For more information about policies, see
  * [How Policies Work](https://docs.cloud.oracle.com/Content/Identity/policieshow/how-policies-work.htm).
  * <p>
  You must also specify a *description* for the compartment (although it can be an empty string). It does
  * not have to be unique, and you can change it anytime with
  * {@link #updateCompartment(UpdateCompartmentRequest) updateCompartment}.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateCompartmentRequest
       * @return CreateCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateCompartment.ts.html |here} to see how to use CreateCompartment API.
       */
    createCompartment(createCompartmentRequest: requests.CreateCompartmentRequest): Promise<responses.CreateCompartmentResponse>;
    /**
       * Creates a new secret key for the specified user. Secret keys are used for authentication with the Object Storage Service's Amazon S3
  * compatible API. The secret key consists of an Access Key/Secret Key pair. For information, see
  * [Managing User Credentials](https://docs.cloud.oracle.com/Content/Identity/access/managing-user-credentials.htm).
  * <p>
  You must specify a *description* for the secret key (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with
  * {@link #updateCustomerSecretKey(UpdateCustomerSecretKeyRequest) updateCustomerSecretKey}.
  * <p>
  Every user has permission to create a secret key for *their own user ID*. An administrator in your organization
  * does not need to write a policy to give users this ability. To compare, administrators who have permission to the
  * tenancy can use this operation to create a secret key for any user, including themselves.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateCustomerSecretKeyRequest
       * @return CreateCustomerSecretKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateCustomerSecretKey.ts.html |here} to see how to use CreateCustomerSecretKey API.
       */
    createCustomerSecretKey(createCustomerSecretKeyRequest: requests.CreateCustomerSecretKeyRequest): Promise<responses.CreateCustomerSecretKeyResponse>;
    /**
     * Creates a new DB credential for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDbCredentialRequest
     * @return CreateDbCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateDbCredential.ts.html |here} to see how to use CreateDbCredential API.
     */
    createDbCredential(createDbCredentialRequest: requests.CreateDbCredentialRequest): Promise<responses.CreateDbCredentialResponse>;
    /**
       * (For tenancies that support identity domains) Creates a new identity domain in the tenancy with the identity domain home in `homeRegion`.
  * After you send your request, the temporary `lifecycleState` of this identity domain is set to CREATING and `lifecycleDetails` to UPDATING.
  * When creation of the identity domain completes, this identity domain's `lifecycleState` is set to ACTIVE and `lifecycleDetails` to null.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  * <p>
  After creating an `identity domain`, first make sure its `lifecycleState` changes from CREATING to ACTIVE before you use it.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateDomainRequest
       * @return CreateDomainResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateDomain.ts.html |here} to see how to use CreateDomain API.
       */
    createDomain(createDomainRequest: requests.CreateDomainRequest): Promise<responses.CreateDomainResponse>;
    /**
       * Creates a new dynamic group in your tenancy.
  * <p>
  You must specify your tenancy's OCID as the compartment ID in the request object (remember that the tenancy
  * is simply the root compartment). Notice that IAM resources (users, groups, compartments, and some policies)
  * reside within the tenancy itself, unlike cloud resources such as compute instances, which typically
  * reside within compartments inside the tenancy. For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the dynamic group, which must be unique across all dynamic groups in your
  * tenancy, and cannot be changed. Note that this name has to be also unique across all groups in your tenancy.
  * You can use this name or the OCID when writing policies that apply to the dynamic group. For more information
  * about policies, see [How Policies Work](https://docs.cloud.oracle.com/Content/Identity/policieshow/how-policies-work.htm).
  * <p>
  You must also specify a *description* for the dynamic group (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with {@link #updateDynamicGroup(UpdateDynamicGroupRequest) updateDynamicGroup}.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateDynamicGroupRequest
       * @return CreateDynamicGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateDynamicGroup.ts.html |here} to see how to use CreateDynamicGroup API.
       */
    createDynamicGroup(createDynamicGroupRequest: requests.CreateDynamicGroupRequest): Promise<responses.CreateDynamicGroupResponse>;
    /**
       * Creates a new group in your tenancy.
  * <p>
  You must specify your tenancy's OCID as the compartment ID in the request object (remember that the tenancy
  * is simply the root compartment). Notice that IAM resources (users, groups, compartments, and some policies)
  * reside within the tenancy itself, unlike cloud resources such as compute instances, which typically
  * reside within compartments inside the tenancy. For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the group, which must be unique across all groups in your tenancy and
  * cannot be changed. You can use this name or the OCID when writing policies that apply to the group. For more
  * information about policies, see [How Policies Work](https://docs.cloud.oracle.com/Content/Identity/policieshow/how-policies-work.htm).
  * <p>
  You must also specify a *description* for the group (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with {@link #updateGroup(UpdateGroupRequest) updateGroup}.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  * <p>
  After creating the group, you need to put users in it and write policies for it.
  * See {@link #addUserToGroup(AddUserToGroupRequest) addUserToGroup} and
  * {@link #createPolicy(CreatePolicyRequest) createPolicy}.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateGroupRequest
       * @return CreateGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateGroup.ts.html |here} to see how to use CreateGroup API.
       */
    createGroup(createGroupRequest: requests.CreateGroupRequest): Promise<responses.CreateGroupResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Creates a new identity provider in your tenancy. For more information, see
  * [Identity Providers and Federation](https://docs.cloud.oracle.com/Content/Identity/Concepts/federation.htm).
  * <p>
  You must specify your tenancy's OCID as the compartment ID in the request object.
  * Remember that the tenancy is simply the root compartment. For information about
  * OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the `IdentityProvider`, which must be unique
  * across all `IdentityProvider` objects in your tenancy and cannot be changed.
  * <p>
  You must also specify a *description* for the `IdentityProvider` (although
  * it can be an empty string). It does not have to be unique, and you can change
  * it anytime with
  * {@link #updateIdentityProvider(UpdateIdentityProviderRequest) updateIdentityProvider}.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily
  * be CREATING. Before using the object, first make sure its `lifecycleState` has
  * changed to ACTIVE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateIdentityProviderRequest
       * @return CreateIdentityProviderResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateIdentityProvider.ts.html |here} to see how to use CreateIdentityProvider API.
       */
    createIdentityProvider(createIdentityProviderRequest: requests.CreateIdentityProviderRequest): Promise<responses.CreateIdentityProviderResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Creates a single mapping between an IdP group and an IAM Service
  * {@link Group}.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateIdpGroupMappingRequest
       * @return CreateIdpGroupMappingResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateIdpGroupMapping.ts.html |here} to see how to use CreateIdpGroupMapping API.
       */
    createIdpGroupMapping(createIdpGroupMappingRequest: requests.CreateIdpGroupMappingRequest): Promise<responses.CreateIdpGroupMappingResponse>;
    /**
     * Creates a new MFA TOTP device for the user. A user can have one MFA TOTP device.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMfaTotpDeviceRequest
     * @return CreateMfaTotpDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateMfaTotpDevice.ts.html |here} to see how to use CreateMfaTotpDevice API.
     */
    createMfaTotpDevice(createMfaTotpDeviceRequest: requests.CreateMfaTotpDeviceRequest): Promise<responses.CreateMfaTotpDeviceResponse>;
    /**
       * Creates a new network source in your tenancy.
  * <p>
  You must specify your tenancy's OCID as the compartment ID in the request object (remember that the tenancy
  * is simply the root compartment). Notice that IAM resources (users, groups, compartments, and some policies)
  * reside within the tenancy itself, unlike cloud resources such as compute instances, which typically
  * reside within compartments inside the tenancy. For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the network source, which must be unique across all network sources in your
  * tenancy, and cannot be changed.
  * You can use this name or the OCID when writing policies that apply to the network source. For more information
  * about policies, see [How Policies Work](https://docs.cloud.oracle.com/Content/Identity/policieshow/how-policies-work.htm).
  * <p>
  You must also specify a *description* for the network source (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with {@link #updateNetworkSource(UpdateNetworkSourceRequest) updateNetworkSource}.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  * <p>
  After your network resource is created, you can use it in policy to restrict access to only requests made from an allowed
  * IP address specified in your network source. For more information, see [Managing Network Sources](https://docs.cloud.oracle.com/Content/Identity/Tasks/managingnetworksources.htm).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateNetworkSourceRequest
       * @return CreateNetworkSourceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateNetworkSource.ts.html |here} to see how to use CreateNetworkSource API.
       */
    createNetworkSource(createNetworkSourceRequest: requests.CreateNetworkSourceRequest): Promise<responses.CreateNetworkSourceResponse>;
    /**
     * Creates Oauth token for the user
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOAuthClientCredentialRequest
     * @return CreateOAuthClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateOAuthClientCredential.ts.html |here} to see how to use CreateOAuthClientCredential API.
     */
    createOAuthClientCredential(createOAuthClientCredentialRequest: requests.CreateOAuthClientCredentialRequest): Promise<responses.CreateOAuthClientCredentialResponse>;
    /**
       * Creates a new Console one-time password for the specified user. For more information about user
  * credentials, see [User Credentials](https://docs.cloud.oracle.com/Content/Identity/usercred/usercredentials.htm).
  * <p>
  Use this operation after creating a new user, or if a user forgets their password. The new one-time
  * password is returned to you in the response, and you must securely deliver it to the user. They'll
  * be prompted to change this password the next time they sign in to the Console. If they don't change
  * it within 7 days, the password will expire and you'll need to create a new one-time password for the
  * user.
  * <p>
  (For tenancies that support identity domains) Resetting a user's password generates a reset password email
  * with a link that the user must follow to reset their password. If the user does not reset their password before the
  * link expires, you'll need to reset the user's password again.
  * <p>
  **Note:** The user's Console login is the unique name you specified when you created the user
  * (see {@link #createUser(CreateUserRequest) createUser}).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateOrResetUIPasswordRequest
       * @return CreateOrResetUIPasswordResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateOrResetUIPassword.ts.html |here} to see how to use CreateOrResetUIPassword API.
       */
    createOrResetUIPassword(createOrResetUIPasswordRequest: requests.CreateOrResetUIPasswordRequest): Promise<responses.CreateOrResetUIPasswordResponse>;
    /**
       * Creates a new policy in the specified compartment (either the tenancy or another of your compartments).
  * If you're new to policies, see [Get Started with Policies](https://docs.cloud.oracle.com/Content/Identity/policiesgs/get-started-with-policies.htm).
  * <p>
  You must specify a *name* for the policy, which must be unique across all policies in your tenancy
  * and cannot be changed.
  * <p>
  You must also specify a *description* for the policy (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with {@link #updatePolicy(UpdatePolicyRequest) updatePolicy}.
  * <p>
  You must specify one or more policy statements in the statements array. For information about writing
  * policies, see [How Policies Work](https://docs.cloud.oracle.com/Content/Identity/policieshow/how-policies-work.htm) and
  * [Common Policies](https://docs.cloud.oracle.com/Content/Identity/policiescommon/commonpolicies.htm).
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using the
  * object, first make sure its `lifecycleState` has changed to ACTIVE.
  * <p>
  New policies take effect typically within 10 seconds.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreatePolicyRequest
       * @return CreatePolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreatePolicy.ts.html |here} to see how to use CreatePolicy API.
       */
    createPolicy(createPolicyRequest: requests.CreatePolicyRequest): Promise<responses.CreatePolicyResponse>;
    /**
     * Creates a subscription to a region for a tenancy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateRegionSubscriptionRequest
     * @return CreateRegionSubscriptionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateRegionSubscription.ts.html |here} to see how to use CreateRegionSubscription API.
     */
    createRegionSubscription(createRegionSubscriptionRequest: requests.CreateRegionSubscriptionRequest): Promise<responses.CreateRegionSubscriptionResponse>;
    /**
     * Creates a new SMTP credential for the specified user. An SMTP credential has an SMTP user name and an SMTP password.
     * You must specify a *description* for the SMTP credential (although it can be an empty string). It does not
     * have to be unique, and you can change it anytime with
     * {@link #updateSmtpCredential(UpdateSmtpCredentialRequest) updateSmtpCredential}.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSmtpCredentialRequest
     * @return CreateSmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateSmtpCredential.ts.html |here} to see how to use CreateSmtpCredential API.
     */
    createSmtpCredential(createSmtpCredentialRequest: requests.CreateSmtpCredentialRequest): Promise<responses.CreateSmtpCredentialResponse>;
    /**
       * **Deprecated. Use {@link #createAuthToken(CreateAuthTokenRequest) createAuthToken} instead.**
  * <p>
  Creates a new Swift password for the specified user. For information about what Swift passwords are for, see
  * [Managing User Credentials](https://docs.cloud.oracle.com/Content/Identity/Tasks/managingcredentials.htm).
  * <p>
  You must specify a *description* for the Swift password (although it can be an empty string). It does not
  * have to be unique, and you can change it anytime with
  * {@link #updateSwiftPassword(UpdateSwiftPasswordRequest) updateSwiftPassword}.
  * <p>
  Every user has permission to create a Swift password for *their own user ID*. An administrator in your organization
  * does not need to write a policy to give users this ability. To compare, administrators who have permission to the
  * tenancy can use this operation to create a Swift password for any user, including themselves.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateSwiftPasswordRequest
       * @return CreateSwiftPasswordResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateSwiftPassword.ts.html |here} to see how to use CreateSwiftPassword API.
       */
    createSwiftPassword(createSwiftPasswordRequest: requests.CreateSwiftPasswordRequest): Promise<responses.CreateSwiftPasswordResponse>;
    /**
       * Creates a new tag in the specified tag namespace.
  * <p>
  The tag requires either the OCID or the name of the tag namespace that will contain this
  * tag definition.
  * <p>
  You must specify a *name* for the tag, which must be unique across all tags in the tag namespace
  * and cannot be changed. The name can contain any ASCII character except the space (_) or period (.) characters.
  * Names are case insensitive. That means, for example, \"myTag\" and \"mytag\" are not allowed in the same namespace.
  * If you specify a name that's already in use in the tag namespace, a 409 error is returned.
  * <p>
  The tag must have a *description*. It does not have to be unique, and you can change it with
  * {@link #updateTag(UpdateTagRequest) updateTag}.
  * <p>
  The tag must have a value type, which is specified with a validator. Tags can use either a
  * static value or a list of possible values. Static values are entered by a user applying the tag
  * to a resource. Lists are created by you and the user must apply a value from the list. Lists
  * are validiated.
  * <p>
  * If no `validator` is set, the user applying the tag to a resource can type in a static
  * value or leave the tag value empty.
  * * If a `validator` is set, the user applying the tag to a resource must select from a list
  * of values that you supply with {@link #enumTagDefinitionValidator(EnumTagDefinitionValidatorRequest) enumTagDefinitionValidator}.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateTagRequest
       * @return CreateTagResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateTag.ts.html |here} to see how to use CreateTag API.
       */
    createTag(createTagRequest: requests.CreateTagRequest): Promise<responses.CreateTagResponse>;
    /**
       * Creates a new tag default in the specified compartment for the specified tag definition.
  * <p>
  If you specify that a value is required, a value is set during resource creation (either by
  * the user creating the resource or another tag defualt). If no value is set, resource creation
  * is blocked.
  * <p>
  * If the `isRequired` flag is set to \"true\", the value is set during resource creation.
  * * If the `isRequired` flag is set to \"false\", the value you enter is set during resource creation.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateTagDefaultRequest
       * @return CreateTagDefaultResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateTagDefault.ts.html |here} to see how to use CreateTagDefault API.
       */
    createTagDefault(createTagDefaultRequest: requests.CreateTagDefaultRequest): Promise<responses.CreateTagDefaultResponse>;
    /**
       * Creates a new tag namespace in the specified compartment.
  * <p>
  You must specify the compartment ID in the request object (remember that the tenancy is simply the root
  * compartment).
  * <p>
  You must also specify a *name* for the namespace, which must be unique across all namespaces in your tenancy
  * and cannot be changed. The name can contain any ASCII character except the space (_) or period (.).
  * Names are case insensitive. That means, for example, \"myNamespace\" and \"mynamespace\" are not allowed
  * in the same tenancy. Once you created a namespace, you cannot change the name.
  * If you specify a name that's already in use in the tenancy, a 409 error is returned.
  * <p>
  You must also specify a *description* for the namespace.
  * It does not have to be unique, and you can change it with
  * {@link #updateTagNamespace(UpdateTagNamespaceRequest) updateTagNamespace}.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateTagNamespaceRequest
       * @return CreateTagNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateTagNamespace.ts.html |here} to see how to use CreateTagNamespace API.
       */
    createTagNamespace(createTagNamespaceRequest: requests.CreateTagNamespaceRequest): Promise<responses.CreateTagNamespaceResponse>;
    /**
       * Creates a new user in your tenancy. For conceptual information about users, your tenancy, and other
  * IAM Service components, see [Overview of IAM](https://docs.cloud.oracle.com/Content/Identity/getstarted/identity-domains.htm).
  * <p>
  You must specify your tenancy's OCID as the compartment ID in the request object (remember that the
  * tenancy is simply the root compartment). Notice that IAM resources (users, groups, compartments, and
  * some policies) reside within the tenancy itself, unlike cloud resources such as compute instances,
  * which typically reside within compartments inside the tenancy. For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
  * <p>
  You must also specify a *name* for the user, which must be unique across all users in your tenancy
  * and cannot be changed. Allowed characters: No spaces. Only letters, numerals, hyphens, periods,
  * underscores, +, and @. If you specify a name that's already in use, you'll get a 409 error.
  * This name will be the user's login to the Console. You might want to pick a
  * name that your company's own identity system (e.g., Active Directory, LDAP, etc.) already uses.
  * If you delete a user and then create a new user with the same name, they'll be considered different
  * users because they have different OCIDs.
  * <p>
  You must also specify a *description* for the user (although it can be an empty string).
  * It does not have to be unique, and you can change it anytime with
  * {@link #updateUser(UpdateUserRequest) updateUser}. You can use the field to provide the user's
  * full name, a description, a nickname, or other information to generally identify the user.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before
  * using the object, first make sure its `lifecycleState` has changed to ACTIVE.
  * <p>
  A new user has no permissions until you place the user in one or more groups (see
  * {@link #addUserToGroup(AddUserToGroupRequest) addUserToGroup}). If the user needs to
  * access the Console, you need to provide the user a password (see
  * {@link #createOrResetUIPassword(CreateOrResetUIPasswordRequest) createOrResetUIPassword}).
  * If the user needs to access the Oracle Cloud Infrastructure REST API, you need to upload a
  * public API signing key for that user (see
  * [Required Keys and OCIDs](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm) and also
  * {@link #uploadApiKey(UploadApiKeyRequest) uploadApiKey}).
  * <p>
  **Important:** Make sure to inform the new user which compartment(s) they have access to.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateUserRequest
       * @return CreateUserResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/CreateUser.ts.html |here} to see how to use CreateUser API.
       */
    createUser(createUserRequest: requests.CreateUserRequest): Promise<responses.CreateUserResponse>;
    /**
       * (For tenancies that support identity domains) Deactivates the specified identity domain. Identity domains must be in an ACTIVE
  * `lifecycleState` and have no active apps present in the domain or underlying Identity Cloud Service stripe. You cannot deactivate
  * the default identity domain.
  * <p>
  After you send your request, the `lifecycleDetails` of this identity domain is set to DEACTIVATING. When the operation completes,
  * then the `lifecycleDetails` is set to null and the `lifecycleState` is set to INACTIVE.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeactivateDomainRequest
       * @return DeactivateDomainResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeactivateDomain.ts.html |here} to see how to use DeactivateDomain API.
       */
    deactivateDomain(deactivateDomainRequest: requests.DeactivateDomainRequest): Promise<responses.DeactivateDomainResponse>;
    /**
       * Deletes the specified API signing key for the specified user.
  * <p>
  Every user has permission to use this operation to delete a key for *their own user ID*. An
  * administrator in your organization does not need to write a policy to give users this ability.
  * To compare, administrators who have permission to the tenancy can use this operation to delete
  * a key for any user, including themselves.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteApiKeyRequest
       * @return DeleteApiKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteApiKey.ts.html |here} to see how to use DeleteApiKey API.
       */
    deleteApiKey(deleteApiKeyRequest: requests.DeleteApiKeyRequest): Promise<responses.DeleteApiKeyResponse>;
    /**
     * Deletes the specified auth token for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAuthTokenRequest
     * @return DeleteAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteAuthToken.ts.html |here} to see how to use DeleteAuthToken API.
     */
    deleteAuthToken(deleteAuthTokenRequest: requests.DeleteAuthTokenRequest): Promise<responses.DeleteAuthTokenResponse>;
    /**
     * Deletes the specified compartment. The compartment must be empty.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteCompartmentRequest
     * @return DeleteCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteCompartment.ts.html |here} to see how to use DeleteCompartment API.
     */
    deleteCompartment(deleteCompartmentRequest: requests.DeleteCompartmentRequest): Promise<responses.DeleteCompartmentResponse>;
    /**
     * Deletes the specified secret key for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteCustomerSecretKeyRequest
     * @return DeleteCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteCustomerSecretKey.ts.html |here} to see how to use DeleteCustomerSecretKey API.
     */
    deleteCustomerSecretKey(deleteCustomerSecretKeyRequest: requests.DeleteCustomerSecretKeyRequest): Promise<responses.DeleteCustomerSecretKeyResponse>;
    /**
     * Deletes the specified DB credential for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDbCredentialRequest
     * @return DeleteDbCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteDbCredential.ts.html |here} to see how to use DeleteDbCredential API.
     */
    deleteDbCredential(deleteDbCredentialRequest: requests.DeleteDbCredentialRequest): Promise<responses.DeleteDbCredentialResponse>;
    /**
     * (For tenancies that support identity domains) Deletes an identity domain. The identity domain must have no active apps present in
     * the underlying IDCS stripe. You must also deactivate the identity domain, rendering the `lifecycleState` of the identity domain INACTIVE.
     * Furthermore, as the authenticated user performing the operation, you cannot be a member of the identity domain you are deleting.
     * Lastly, you cannot delete the default identity domain. A tenancy must always have at least the default identity domain.
     *
     * To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
     * the operation's status.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDomainRequest
     * @return DeleteDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteDomain.ts.html |here} to see how to use DeleteDomain API.
     */
    deleteDomain(deleteDomainRequest: requests.DeleteDomainRequest): Promise<responses.DeleteDomainResponse>;
    /**
     * Deletes the specified dynamic group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDynamicGroupRequest
     * @return DeleteDynamicGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteDynamicGroup.ts.html |here} to see how to use DeleteDynamicGroup API.
     */
    deleteDynamicGroup(deleteDynamicGroupRequest: requests.DeleteDynamicGroupRequest): Promise<responses.DeleteDynamicGroupResponse>;
    /**
     * Deletes the specified group. The group must be empty.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteGroupRequest
     * @return DeleteGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteGroup.ts.html |here} to see how to use DeleteGroup API.
     */
    deleteGroup(deleteGroupRequest: requests.DeleteGroupRequest): Promise<responses.DeleteGroupResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Deletes the specified identity provider. The identity provider must not have
  * any group mappings (see {@link IdpGroupMapping}).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteIdentityProviderRequest
       * @return DeleteIdentityProviderResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteIdentityProvider.ts.html |here} to see how to use DeleteIdentityProvider API.
       */
    deleteIdentityProvider(deleteIdentityProviderRequest: requests.DeleteIdentityProviderRequest): Promise<responses.DeleteIdentityProviderResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Deletes the specified group mapping.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteIdpGroupMappingRequest
       * @return DeleteIdpGroupMappingResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteIdpGroupMapping.ts.html |here} to see how to use DeleteIdpGroupMapping API.
       */
    deleteIdpGroupMapping(deleteIdpGroupMappingRequest: requests.DeleteIdpGroupMappingRequest): Promise<responses.DeleteIdpGroupMappingResponse>;
    /**
     * Deletes the specified MFA TOTP device for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMfaTotpDeviceRequest
     * @return DeleteMfaTotpDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteMfaTotpDevice.ts.html |here} to see how to use DeleteMfaTotpDevice API.
     */
    deleteMfaTotpDevice(deleteMfaTotpDeviceRequest: requests.DeleteMfaTotpDeviceRequest): Promise<responses.DeleteMfaTotpDeviceResponse>;
    /**
     * Deletes the specified network source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteNetworkSourceRequest
     * @return DeleteNetworkSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteNetworkSource.ts.html |here} to see how to use DeleteNetworkSource API.
     */
    deleteNetworkSource(deleteNetworkSourceRequest: requests.DeleteNetworkSourceRequest): Promise<responses.DeleteNetworkSourceResponse>;
    /**
     * Delete Oauth token for the user
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOAuthClientCredentialRequest
     * @return DeleteOAuthClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteOAuthClientCredential.ts.html |here} to see how to use DeleteOAuthClientCredential API.
     */
    deleteOAuthClientCredential(deleteOAuthClientCredentialRequest: requests.DeleteOAuthClientCredentialRequest): Promise<responses.DeleteOAuthClientCredentialResponse>;
    /**
     * Deletes the specified policy. The deletion takes effect typically within 10 seconds.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeletePolicyRequest
     * @return DeletePolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeletePolicy.ts.html |here} to see how to use DeletePolicy API.
     */
    deletePolicy(deletePolicyRequest: requests.DeletePolicyRequest): Promise<responses.DeletePolicyResponse>;
    /**
     * Deletes the specified SMTP credential for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSmtpCredentialRequest
     * @return DeleteSmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteSmtpCredential.ts.html |here} to see how to use DeleteSmtpCredential API.
     */
    deleteSmtpCredential(deleteSmtpCredentialRequest: requests.DeleteSmtpCredentialRequest): Promise<responses.DeleteSmtpCredentialResponse>;
    /**
       * **Deprecated. Use {@link #deleteAuthToken(DeleteAuthTokenRequest) deleteAuthToken} instead.**
  * <p>
  Deletes the specified Swift password for the specified user.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteSwiftPasswordRequest
       * @return DeleteSwiftPasswordResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteSwiftPassword.ts.html |here} to see how to use DeleteSwiftPassword API.
       */
    deleteSwiftPassword(deleteSwiftPasswordRequest: requests.DeleteSwiftPasswordRequest): Promise<responses.DeleteSwiftPasswordResponse>;
    /**
       * Deletes the specified tag definition. This operation triggers a process that removes the
  * tag from all resources in your tenancy.
  * <p>
  These things happen immediately:
  * \u00A0
  *   * If the tag was a cost-tracking tag, it no longer counts against your 10 cost-tracking
  *   tags limit, whether you first disabled it or not.
  *   * If the tag was used with dynamic groups, none of the rules that contain the tag will
  *   be evaluated against the tag.
  * <p>
  When you start the delete operation, the state of the tag changes to DELETING and tag removal
  * from resources begins. This can take up to 48 hours depending on the number of resources that
  * were tagged as well as the regions in which those resources reside.
  * <p>
  When all tags have been removed, the state changes to DELETED. You cannot restore a deleted tag. Once the deleted tag
  * changes its state to DELETED, you can use the same tag name again.
  * <p>
  After you start this operation, you cannot start either the {@link #bulkDeleteTags(BulkDeleteTagsRequest) bulkDeleteTags} or the {@link #cascadeDeleteTagNamespace(CascadeDeleteTagNamespaceRequest) cascadeDeleteTagNamespace} operation until this process completes.
  * <p>
  To delete a tag, you must first retire it. Use {@link #updateTag(UpdateTagRequest) updateTag}
  * to retire a tag.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteTagRequest
       * @return DeleteTagResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteTag.ts.html |here} to see how to use DeleteTag API.
       */
    deleteTag(deleteTagRequest: requests.DeleteTagRequest): Promise<responses.DeleteTagResponse>;
    /**
     * Deletes the the specified tag default.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteTagDefaultRequest
     * @return DeleteTagDefaultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteTagDefault.ts.html |here} to see how to use DeleteTagDefault API.
     */
    deleteTagDefault(deleteTagDefaultRequest: requests.DeleteTagDefaultRequest): Promise<responses.DeleteTagDefaultResponse>;
    /**
       * Deletes the specified tag namespace. Only an empty tag namespace can be deleted with this operation. To use this operation
  * to delete a tag namespace that contains tag definitions, first delete all of its tag definitions.
  * <p>
  Use {@link #cascadeDeleteTagNamespace(CascadeDeleteTagNamespaceRequest) cascadeDeleteTagNamespace} to delete a tag namespace along with all of
  * the tag definitions contained within that namespace.
  * <p>
  Use {@link #deleteTag(DeleteTagRequest) deleteTag} to delete a tag definition.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteTagNamespaceRequest
       * @return DeleteTagNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteTagNamespace.ts.html |here} to see how to use DeleteTagNamespace API.
       */
    deleteTagNamespace(deleteTagNamespaceRequest: requests.DeleteTagNamespaceRequest): Promise<responses.DeleteTagNamespaceResponse>;
    /**
     * Deletes the specified user. The user must not be in any groups.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteUserRequest
     * @return DeleteUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/DeleteUser.ts.html |here} to see how to use DeleteUser API.
     */
    deleteUser(deleteUserRequest: requests.DeleteUserRequest): Promise<responses.DeleteUserResponse>;
    /**
       * (For tenancies that support identity domains) Replicates the identity domain to a new region (provided that the region is the
  * tenancy home region or other region that the tenancy subscribes to). You can only replicate identity domains that are in an ACTIVE
  * `lifecycleState` and not currently updating or already replicating. You also can only trigger the replication of secondary identity domains.
  * The default identity domain is automatically replicated to all regions that the tenancy subscribes to.
  * <p>
  After you send the request, the `state` of the identity domain in the replica region is set to ENABLING_REPLICATION. When the operation
  * completes, the `state` is set to REPLICATION_ENABLED.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param EnableReplicationToRegionRequest
       * @return EnableReplicationToRegionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/EnableReplicationToRegion.ts.html |here} to see how to use EnableReplicationToRegion API.
       */
    enableReplicationToRegion(enableReplicationToRegionRequest: requests.EnableReplicationToRegionRequest): Promise<responses.EnableReplicationToRegionResponse>;
    /**
     * Generate seed for the MFA TOTP device.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateTotpSeedRequest
     * @return GenerateTotpSeedResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GenerateTotpSeed.ts.html |here} to see how to use GenerateTotpSeed API.
     */
    generateTotpSeed(generateTotpSeedRequest: requests.GenerateTotpSeedRequest): Promise<responses.GenerateTotpSeedResponse>;
    /**
     * Gets the authentication policy for the given tenancy. You must specify your tenant\u2019s OCID as the value for
     * the compartment ID (remember that the tenancy is simply the root compartment).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuthenticationPolicyRequest
     * @return GetAuthenticationPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetAuthenticationPolicy.ts.html |here} to see how to use GetAuthenticationPolicy API.
     */
    getAuthenticationPolicy(getAuthenticationPolicyRequest: requests.GetAuthenticationPolicyRequest): Promise<responses.GetAuthenticationPolicyResponse>;
    /**
       * Gets the specified compartment's information.
  * <p>
  This operation does not return a list of all the resources inside the compartment. There is no single
  * API operation that does that. Compartments can contain multiple types of resources (instances, block
  * storage volumes, etc.). To find out what's in a compartment, you must call the \"List\" operation for
  * each resource type and specify the compartment's OCID as a query parameter in the request. For example,
  * call the {@link #listInstances(ListInstancesRequest) listInstances} operation in the Cloud Compute
  * Service or the {@link #listVolumes(ListVolumesRequest) listVolumes} operation in Cloud Block Storage.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetCompartmentRequest
       * @return GetCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetCompartment.ts.html |here} to see how to use GetCompartment API.
       */
    getCompartment(getCompartmentRequest: requests.GetCompartmentRequest): Promise<responses.GetCompartmentResponse>;
    /**
     * (For tenancies that support identity domains) Gets the specified identity domain's information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDomainRequest
     * @return GetDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetDomain.ts.html |here} to see how to use GetDomain API.
     */
    getDomain(getDomainRequest: requests.GetDomainRequest): Promise<responses.GetDomainResponse>;
    /**
     * Gets the specified dynamic group's information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDynamicGroupRequest
     * @return GetDynamicGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetDynamicGroup.ts.html |here} to see how to use GetDynamicGroup API.
     */
    getDynamicGroup(getDynamicGroupRequest: requests.GetDynamicGroupRequest): Promise<responses.GetDynamicGroupResponse>;
    /**
       * Gets the specified group's information.
  * <p>
  This operation does not return a list of all the users in the group. To do that, use
  * {@link #listUserGroupMemberships(ListUserGroupMembershipsRequest) listUserGroupMemberships} and
  * provide the group's OCID as a query parameter in the request.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetGroupRequest
       * @return GetGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetGroup.ts.html |here} to see how to use GetGroup API.
       */
    getGroup(getGroupRequest: requests.GetGroupRequest): Promise<responses.GetGroupResponse>;
    /**
     * Gets the details of a specified IAM work request. The workRequestID is returned in the opc-workrequest-id header for any asynchronous operation in the Identity and Access Management service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetIamWorkRequestRequest
     * @return GetIamWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetIamWorkRequest.ts.html |here} to see how to use GetIamWorkRequest API.
     */
    getIamWorkRequest(getIamWorkRequestRequest: requests.GetIamWorkRequestRequest): Promise<responses.GetIamWorkRequestResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Gets the specified identity provider's information.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetIdentityProviderRequest
       * @return GetIdentityProviderResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetIdentityProvider.ts.html |here} to see how to use GetIdentityProvider API.
       */
    getIdentityProvider(getIdentityProviderRequest: requests.GetIdentityProviderRequest): Promise<responses.GetIdentityProviderResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Gets the specified group mapping.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetIdpGroupMappingRequest
       * @return GetIdpGroupMappingResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetIdpGroupMapping.ts.html |here} to see how to use GetIdpGroupMapping API.
       */
    getIdpGroupMapping(getIdpGroupMappingRequest: requests.GetIdpGroupMappingRequest): Promise<responses.GetIdpGroupMappingResponse>;
    /**
     * Get the specified MFA TOTP device for the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMfaTotpDeviceRequest
     * @return GetMfaTotpDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetMfaTotpDevice.ts.html |here} to see how to use GetMfaTotpDevice API.
     */
    getMfaTotpDevice(getMfaTotpDeviceRequest: requests.GetMfaTotpDeviceRequest): Promise<responses.GetMfaTotpDeviceResponse>;
    /**
     * Gets the specified network source's information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetNetworkSourceRequest
     * @return GetNetworkSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetNetworkSource.ts.html |here} to see how to use GetNetworkSource API.
     */
    getNetworkSource(getNetworkSourceRequest: requests.GetNetworkSourceRequest): Promise<responses.GetNetworkSourceResponse>;
    /**
     * Gets the specified policy's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPolicyRequest
     * @return GetPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetPolicy.ts.html |here} to see how to use GetPolicy API.
     */
    getPolicy(getPolicyRequest: requests.GetPolicyRequest): Promise<responses.GetPolicyResponse>;
    /**
     * Retrieve the standard tag namespace template given the standard tag namespace name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetStandardTagTemplateRequest
     * @return GetStandardTagTemplateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetStandardTagTemplate.ts.html |here} to see how to use GetStandardTagTemplate API.
     */
    getStandardTagTemplate(getStandardTagTemplateRequest: requests.GetStandardTagTemplateRequest): Promise<responses.GetStandardTagTemplateResponse>;
    /**
     * Gets the specified tag's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTagRequest
     * @return GetTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetTag.ts.html |here} to see how to use GetTag API.
     */
    getTag(getTagRequest: requests.GetTagRequest): Promise<responses.GetTagResponse>;
    /**
     * Retrieves the specified tag default.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTagDefaultRequest
     * @return GetTagDefaultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetTagDefault.ts.html |here} to see how to use GetTagDefault API.
     */
    getTagDefault(getTagDefaultRequest: requests.GetTagDefaultRequest): Promise<responses.GetTagDefaultResponse>;
    /**
     * Gets the specified tag namespace's information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTagNamespaceRequest
     * @return GetTagNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetTagNamespace.ts.html |here} to see how to use GetTagNamespace API.
     */
    getTagNamespace(getTagNamespaceRequest: requests.GetTagNamespaceRequest): Promise<responses.GetTagNamespaceResponse>;
    /**
     * Gets details on a specified work request. The workRequestID is returned in the opc-workrequest-id header
     * for any asynchronous operation in tagging service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTaggingWorkRequestRequest
     * @return GetTaggingWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetTaggingWorkRequest.ts.html |here} to see how to use GetTaggingWorkRequest API.
     */
    getTaggingWorkRequest(getTaggingWorkRequestRequest: requests.GetTaggingWorkRequestRequest): Promise<responses.GetTaggingWorkRequestResponse>;
    /**
     * Get the specified tenancy's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTenancyRequest
     * @return GetTenancyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetTenancy.ts.html |here} to see how to use GetTenancy API.
     */
    getTenancy(getTenancyRequest: requests.GetTenancyRequest): Promise<responses.GetTenancyResponse>;
    /**
     * Gets the specified user's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetUserRequest
     * @return GetUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetUser.ts.html |here} to see how to use GetUser API.
     */
    getUser(getUserRequest: requests.GetUserRequest): Promise<responses.GetUserResponse>;
    /**
     * Gets the specified UserGroupMembership's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetUserGroupMembershipRequest
     * @return GetUserGroupMembershipResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetUserGroupMembership.ts.html |here} to see how to use GetUserGroupMembership API.
     */
    getUserGroupMembership(getUserGroupMembershipRequest: requests.GetUserGroupMembershipRequest): Promise<responses.GetUserGroupMembershipResponse>;
    /**
     * Gets the specified user's console password information. The returned object contains the user's OCID,
     * but not the password itself. The actual password is returned only when created or reset.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetUserUIPasswordInformationRequest
     * @return GetUserUIPasswordInformationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetUserUIPasswordInformation.ts.html |here} to see how to use GetUserUIPasswordInformation API.
     */
    getUserUIPasswordInformation(getUserUIPasswordInformationRequest: requests.GetUserUIPasswordInformationRequest): Promise<responses.GetUserUIPasswordInformationResponse>;
    /**
     * Gets details on a specified work request. The workRequestID is returned in the opc-workrequest-id header
     * for any asynchronous operation in the compartment service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * OCI will release Tag Namespaces that our customers can import.
     * These Tag Namespaces will provide Tags for our customers and Partners to provide consistency and enable data reporting.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ImportStandardTagsRequest
     * @return ImportStandardTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ImportStandardTags.ts.html |here} to see how to use ImportStandardTags API.
     */
    importStandardTags(importStandardTagsRequest: requests.ImportStandardTagsRequest): Promise<responses.ImportStandardTagsResponse>;
    /**
       * (For tenancies that support identity domains) Lists the license types for identity domains supported by Oracle Cloud Infrastructure.
  * (License types are also referred to as domain types.)
  * <p>
  If `currentLicenseTypeName` is provided, then the request returns license types that the identity domain with the specified license
  * type name can change to. Otherwise, the request returns all valid license types currently supported.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAllowedDomainLicenseTypesRequest
       * @return ListAllowedDomainLicenseTypesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListAllowedDomainLicenseTypes.ts.html |here} to see how to use ListAllowedDomainLicenseTypes API.
       */
    listAllowedDomainLicenseTypes(listAllowedDomainLicenseTypesRequest: requests.ListAllowedDomainLicenseTypesRequest): Promise<responses.ListAllowedDomainLicenseTypesResponse>;
    /**
       * Lists the API signing keys for the specified user. A user can have a maximum of three keys.
  * <p>
  Every user has permission to use this API call for *their own user ID*.  An administrator in your
  * organization does not need to write a policy to give users this ability.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListApiKeysRequest
       * @return ListApiKeysResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListApiKeys.ts.html |here} to see how to use ListApiKeys API.
       */
    listApiKeys(listApiKeysRequest: requests.ListApiKeysRequest): Promise<responses.ListApiKeysResponse>;
    /**
     * Lists the auth tokens for the specified user. The returned object contains the token's OCID, but not
     * the token itself. The actual token is returned only upon creation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuthTokensRequest
     * @return ListAuthTokensResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListAuthTokens.ts.html |here} to see how to use ListAuthTokens API.
     */
    listAuthTokens(listAuthTokensRequest: requests.ListAuthTokensRequest): Promise<responses.ListAuthTokensResponse>;
    /**
     * Lists the availability domains in your tenancy. Specify the OCID of either the tenancy or another
     * of your compartments as the value for the compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     * Note that the order of the results returned can change if availability domains are added or removed; therefore, do not
     * create a dependency on the list order.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAvailabilityDomainsRequest
     * @return ListAvailabilityDomainsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListAvailabilityDomains.ts.html |here} to see how to use ListAvailabilityDomains API.
     */
    listAvailabilityDomains(listAvailabilityDomainsRequest: requests.ListAvailabilityDomainsRequest): Promise<responses.ListAvailabilityDomainsResponse>;
    /**
     * Lists the resource-types supported by compartment bulk actions. Use this API to help you provide the correct
     * resource-type information to the {@link #bulkDeleteResources(BulkDeleteResourcesRequest) bulkDeleteResources}
     * and {@link #bulkMoveResources(BulkMoveResourcesRequest) bulkMoveResources} operations. The returned list of
     * resource-types provides the appropriate resource-type names to use with the bulk action operations along with
     * the type of identifying information you'll need to provide for each resource-type. Most resource-types just
     * require an [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) to identify a specific resource, but some resource-types,
     * such as buckets, require you to provide other identifying information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListBulkActionResourceTypesRequest
     * @return ListBulkActionResourceTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListBulkActionResourceTypes.ts.html |here} to see how to use ListBulkActionResourceTypes API.
     */
    listBulkActionResourceTypes(listBulkActionResourceTypesRequest: requests.ListBulkActionResourceTypesRequest): Promise<responses.ListBulkActionResourceTypesResponse>;
    /**
     * Lists the resource types that support bulk tag editing.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListBulkEditTagsResourceTypesRequest
     * @return ListBulkEditTagsResourceTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListBulkEditTagsResourceTypes.ts.html |here} to see how to use ListBulkEditTagsResourceTypes API.
     */
    listBulkEditTagsResourceTypes(listBulkEditTagsResourceTypesRequest: requests.ListBulkEditTagsResourceTypesRequest): Promise<responses.ListBulkEditTagsResourceTypesResponse>;
    /**
       * Lists the compartments in a specified compartment. The members of the list
  * returned depends on the values set for several parameters.
  * <p>
  With the exception of the tenancy (root compartment), the ListCompartments operation
  * returns only the first-level child compartments in the parent compartment specified in
  * `compartmentId`. The list does not include any subcompartments of the child
  * compartments (grandchildren).
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (the resource can be in a subcompartment).
  * <p>
  The parameter `compartmentIdInSubtree` applies only when you perform ListCompartments on the
  * tenancy (root compartment). When set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ANY.
  * <p>
  See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListCompartmentsRequest
       * @return ListCompartmentsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListCompartments.ts.html |here} to see how to use ListCompartments API.
       */
    listCompartments(listCompartmentsRequest: requests.ListCompartmentsRequest): Promise<responses.ListCompartmentsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listCompartmentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Compartment objects
     * contained in responses from the listCompartments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCompartments(request: requests.ListCompartmentsRequest): AsyncIterableIterator<model.Compartment>;
    /**
     * NOTE: This function is deprecated in favor of listCompartmentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listCompartments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCompartmentsResponses(request: requests.ListCompartmentsRequest): AsyncIterableIterator<responses.ListCompartmentsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.Compartment objects
     * contained in responses from the listCompartments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCompartmentsRecordIterator(request: requests.ListCompartmentsRequest): AsyncIterableIterator<model.Compartment>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCompartments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCompartmentsResponseIterator(request: requests.ListCompartmentsRequest): AsyncIterableIterator<responses.ListCompartmentsResponse>;
    /**
     * Lists all the tags enabled for cost-tracking in the specified tenancy. For information about
     * cost-tracking tags, see [Using Cost-tracking Tags](https://docs.cloud.oracle.com/Content/Tagging/Tasks/usingcosttrackingtags.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCostTrackingTagsRequest
     * @return ListCostTrackingTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListCostTrackingTags.ts.html |here} to see how to use ListCostTrackingTags API.
     */
    listCostTrackingTags(listCostTrackingTagsRequest: requests.ListCostTrackingTagsRequest): Promise<responses.ListCostTrackingTagsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listCostTrackingTagsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Tag objects
     * contained in responses from the listCostTrackingTags operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCostTrackingTags(request: requests.ListCostTrackingTagsRequest): AsyncIterableIterator<model.Tag>;
    /**
     * NOTE: This function is deprecated in favor of listCostTrackingTagsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listCostTrackingTags operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCostTrackingTagsResponses(request: requests.ListCostTrackingTagsRequest): AsyncIterableIterator<responses.ListCostTrackingTagsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.Tag objects
     * contained in responses from the listCostTrackingTags operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCostTrackingTagsRecordIterator(request: requests.ListCostTrackingTagsRequest): AsyncIterableIterator<model.Tag>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCostTrackingTags operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCostTrackingTagsResponseIterator(request: requests.ListCostTrackingTagsRequest): AsyncIterableIterator<responses.ListCostTrackingTagsResponse>;
    /**
     * Lists the secret keys for the specified user. The returned object contains the secret key's OCID, but not
     * the secret key itself. The actual secret key is returned only upon creation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCustomerSecretKeysRequest
     * @return ListCustomerSecretKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListCustomerSecretKeys.ts.html |here} to see how to use ListCustomerSecretKeys API.
     */
    listCustomerSecretKeys(listCustomerSecretKeysRequest: requests.ListCustomerSecretKeysRequest): Promise<responses.ListCustomerSecretKeysResponse>;
    /**
     * Lists the DB credentials for the specified user. The returned object contains the credential's OCID
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDbCredentialsRequest
     * @return ListDbCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListDbCredentials.ts.html |here} to see how to use ListDbCredentials API.
     */
    listDbCredentials(listDbCredentialsRequest: requests.ListDbCredentialsRequest): Promise<responses.ListDbCredentialsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listDbCredentialsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.DbCredentialSummary objects
     * contained in responses from the listDbCredentials operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDbCredentials(request: requests.ListDbCredentialsRequest): AsyncIterableIterator<model.DbCredentialSummary>;
    /**
     * NOTE: This function is deprecated in favor of listDbCredentialsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listDbCredentials operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDbCredentialsResponses(request: requests.ListDbCredentialsRequest): AsyncIterableIterator<responses.ListDbCredentialsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.DbCredentialSummary objects
     * contained in responses from the listDbCredentials operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDbCredentialsRecordIterator(request: requests.ListDbCredentialsRequest): AsyncIterableIterator<model.DbCredentialSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDbCredentials operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDbCredentialsResponseIterator(request: requests.ListDbCredentialsRequest): AsyncIterableIterator<responses.ListDbCredentialsResponse>;
    /**
     * (For tenancies that support identity domains) Lists all identity domains within a tenancy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDomainsRequest
     * @return ListDomainsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListDomains.ts.html |here} to see how to use ListDomains API.
     */
    listDomains(listDomainsRequest: requests.ListDomainsRequest): Promise<responses.ListDomainsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listDomainsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.DomainSummary objects
     * contained in responses from the listDomains operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDomains(request: requests.ListDomainsRequest): AsyncIterableIterator<model.DomainSummary>;
    /**
     * NOTE: This function is deprecated in favor of listDomainsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listDomains operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDomainsResponses(request: requests.ListDomainsRequest): AsyncIterableIterator<responses.ListDomainsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.DomainSummary objects
     * contained in responses from the listDomains operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDomainsRecordIterator(request: requests.ListDomainsRequest): AsyncIterableIterator<model.DomainSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDomains operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDomainsResponseIterator(request: requests.ListDomainsRequest): AsyncIterableIterator<responses.ListDomainsResponse>;
    /**
     * Lists the dynamic groups in your tenancy. You must specify your tenancy's OCID as the value for
     * the compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDynamicGroupsRequest
     * @return ListDynamicGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListDynamicGroups.ts.html |here} to see how to use ListDynamicGroups API.
     */
    listDynamicGroups(listDynamicGroupsRequest: requests.ListDynamicGroupsRequest): Promise<responses.ListDynamicGroupsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listDynamicGroupsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.DynamicGroup objects
     * contained in responses from the listDynamicGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDynamicGroups(request: requests.ListDynamicGroupsRequest): AsyncIterableIterator<model.DynamicGroup>;
    /**
     * NOTE: This function is deprecated in favor of listDynamicGroupsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listDynamicGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDynamicGroupsResponses(request: requests.ListDynamicGroupsRequest): AsyncIterableIterator<responses.ListDynamicGroupsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.DynamicGroup objects
     * contained in responses from the listDynamicGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDynamicGroupsRecordIterator(request: requests.ListDynamicGroupsRequest): AsyncIterableIterator<model.DynamicGroup>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDynamicGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDynamicGroupsResponseIterator(request: requests.ListDynamicGroupsRequest): AsyncIterableIterator<responses.ListDynamicGroupsResponse>;
    /**
     * Lists the Fault Domains in your tenancy. Specify the OCID of either the tenancy or another
     * of your compartments as the value for the compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFaultDomainsRequest
     * @return ListFaultDomainsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListFaultDomains.ts.html |here} to see how to use ListFaultDomains API.
     */
    listFaultDomains(listFaultDomainsRequest: requests.ListFaultDomainsRequest): Promise<responses.ListFaultDomainsResponse>;
    /**
     * Lists the groups in your tenancy. You must specify your tenancy's OCID as the value for
     * the compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListGroupsRequest
     * @return ListGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListGroups.ts.html |here} to see how to use ListGroups API.
     */
    listGroups(listGroupsRequest: requests.ListGroupsRequest): Promise<responses.ListGroupsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listGroupsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Group objects
     * contained in responses from the listGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllGroups(request: requests.ListGroupsRequest): AsyncIterableIterator<model.Group>;
    /**
     * NOTE: This function is deprecated in favor of listGroupsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllGroupsResponses(request: requests.ListGroupsRequest): AsyncIterableIterator<responses.ListGroupsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.Group objects
     * contained in responses from the listGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listGroupsRecordIterator(request: requests.ListGroupsRequest): AsyncIterableIterator<model.Group>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listGroupsResponseIterator(request: requests.ListGroupsRequest): AsyncIterableIterator<responses.ListGroupsResponse>;
    /**
     * Gets error details for a specified IAM work request. The workRequestID is returned in the opc-workrequest-id header for any asynchronous operation in the Identity and Access Management service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListIamWorkRequestErrorsRequest
     * @return ListIamWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIamWorkRequestErrors.ts.html |here} to see how to use ListIamWorkRequestErrors API.
     */
    listIamWorkRequestErrors(listIamWorkRequestErrorsRequest: requests.ListIamWorkRequestErrorsRequest): Promise<responses.ListIamWorkRequestErrorsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IamWorkRequestErrorSummary objects
     * contained in responses from the listIamWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequestErrors(request: requests.ListIamWorkRequestErrorsRequest): AsyncIterableIterator<model.IamWorkRequestErrorSummary>;
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequestErrorsResponses(request: requests.ListIamWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListIamWorkRequestErrorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.IamWorkRequestErrorSummary objects
     * contained in responses from the listIamWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestErrorsRecordIterator(request: requests.ListIamWorkRequestErrorsRequest): AsyncIterableIterator<model.IamWorkRequestErrorSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestErrorsResponseIterator(request: requests.ListIamWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListIamWorkRequestErrorsResponse>;
    /**
     * Gets logs for a specified IAM work request. The workRequestID is returned in the opc-workrequest-id header for any asynchronous operation in the Identity and Access Management service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListIamWorkRequestLogsRequest
     * @return ListIamWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIamWorkRequestLogs.ts.html |here} to see how to use ListIamWorkRequestLogs API.
     */
    listIamWorkRequestLogs(listIamWorkRequestLogsRequest: requests.ListIamWorkRequestLogsRequest): Promise<responses.ListIamWorkRequestLogsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IamWorkRequestLogSummary objects
     * contained in responses from the listIamWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequestLogs(request: requests.ListIamWorkRequestLogsRequest): AsyncIterableIterator<model.IamWorkRequestLogSummary>;
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequestLogsResponses(request: requests.ListIamWorkRequestLogsRequest): AsyncIterableIterator<responses.ListIamWorkRequestLogsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.IamWorkRequestLogSummary objects
     * contained in responses from the listIamWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestLogsRecordIterator(request: requests.ListIamWorkRequestLogsRequest): AsyncIterableIterator<model.IamWorkRequestLogSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestLogsResponseIterator(request: requests.ListIamWorkRequestLogsRequest): AsyncIterableIterator<responses.ListIamWorkRequestLogsResponse>;
    /**
     * Lists the IAM work requests in compartment. The workRequestID is returned in the opc-workrequest-id header for any asynchronous operation in the Identity and Access Management service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListIamWorkRequestsRequest
     * @return ListIamWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIamWorkRequests.ts.html |here} to see how to use ListIamWorkRequests API.
     */
    listIamWorkRequests(listIamWorkRequestsRequest: requests.ListIamWorkRequestsRequest): Promise<responses.ListIamWorkRequestsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IamWorkRequestSummary objects
     * contained in responses from the listIamWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequests(request: requests.ListIamWorkRequestsRequest): AsyncIterableIterator<model.IamWorkRequestSummary>;
    /**
     * NOTE: This function is deprecated in favor of listIamWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIamWorkRequestsResponses(request: requests.ListIamWorkRequestsRequest): AsyncIterableIterator<responses.ListIamWorkRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.IamWorkRequestSummary objects
     * contained in responses from the listIamWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestsRecordIterator(request: requests.ListIamWorkRequestsRequest): AsyncIterableIterator<model.IamWorkRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIamWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIamWorkRequestsResponseIterator(request: requests.ListIamWorkRequestsRequest): AsyncIterableIterator<responses.ListIamWorkRequestsResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Lists the identity provider groups.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListIdentityProviderGroupsRequest
       * @return ListIdentityProviderGroupsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIdentityProviderGroups.ts.html |here} to see how to use ListIdentityProviderGroups API.
       */
    listIdentityProviderGroups(listIdentityProviderGroupsRequest: requests.ListIdentityProviderGroupsRequest): Promise<responses.ListIdentityProviderGroupsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listIdentityProviderGroupsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IdentityProviderGroupSummary objects
     * contained in responses from the listIdentityProviderGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdentityProviderGroups(request: requests.ListIdentityProviderGroupsRequest): AsyncIterableIterator<model.IdentityProviderGroupSummary>;
    /**
     * NOTE: This function is deprecated in favor of listIdentityProviderGroupsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIdentityProviderGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdentityProviderGroupsResponses(request: requests.ListIdentityProviderGroupsRequest): AsyncIterableIterator<responses.ListIdentityProviderGroupsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.IdentityProviderGroupSummary objects
     * contained in responses from the listIdentityProviderGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdentityProviderGroupsRecordIterator(request: requests.ListIdentityProviderGroupsRequest): AsyncIterableIterator<model.IdentityProviderGroupSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIdentityProviderGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdentityProviderGroupsResponseIterator(request: requests.ListIdentityProviderGroupsRequest): AsyncIterableIterator<responses.ListIdentityProviderGroupsResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Lists all the identity providers in your tenancy. You must specify the identity provider type (e.g., `SAML2` for
  * identity providers using the SAML2.0 protocol). You must specify your tenancy's OCID as the value for the
  * compartment ID (remember that the tenancy is simply the root compartment).
  * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListIdentityProvidersRequest
       * @return ListIdentityProvidersResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIdentityProviders.ts.html |here} to see how to use ListIdentityProviders API.
       */
    listIdentityProviders(listIdentityProvidersRequest: requests.ListIdentityProvidersRequest): Promise<responses.ListIdentityProvidersResponse>;
    /**
     * NOTE: This function is deprecated in favor of listIdentityProvidersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IdentityProvider objects
     * contained in responses from the listIdentityProviders operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdentityProviders(request: requests.ListIdentityProvidersRequest): AsyncIterableIterator<model.IdentityProvider>;
    /**
     * NOTE: This function is deprecated in favor of listIdentityProvidersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIdentityProviders operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdentityProvidersResponses(request: requests.ListIdentityProvidersRequest): AsyncIterableIterator<responses.ListIdentityProvidersResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.IdentityProvider objects
     * contained in responses from the listIdentityProviders operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdentityProvidersRecordIterator(request: requests.ListIdentityProvidersRequest): AsyncIterableIterator<model.IdentityProvider>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIdentityProviders operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdentityProvidersResponseIterator(request: requests.ListIdentityProvidersRequest): AsyncIterableIterator<responses.ListIdentityProvidersResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Lists the group mappings for the specified identity provider.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListIdpGroupMappingsRequest
       * @return ListIdpGroupMappingsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListIdpGroupMappings.ts.html |here} to see how to use ListIdpGroupMappings API.
       */
    listIdpGroupMappings(listIdpGroupMappingsRequest: requests.ListIdpGroupMappingsRequest): Promise<responses.ListIdpGroupMappingsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listIdpGroupMappingsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IdpGroupMapping objects
     * contained in responses from the listIdpGroupMappings operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdpGroupMappings(request: requests.ListIdpGroupMappingsRequest): AsyncIterableIterator<model.IdpGroupMapping>;
    /**
     * NOTE: This function is deprecated in favor of listIdpGroupMappingsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIdpGroupMappings operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIdpGroupMappingsResponses(request: requests.ListIdpGroupMappingsRequest): AsyncIterableIterator<responses.ListIdpGroupMappingsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.IdpGroupMapping objects
     * contained in responses from the listIdpGroupMappings operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdpGroupMappingsRecordIterator(request: requests.ListIdpGroupMappingsRequest): AsyncIterableIterator<model.IdpGroupMapping>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIdpGroupMappings operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIdpGroupMappingsResponseIterator(request: requests.ListIdpGroupMappingsRequest): AsyncIterableIterator<responses.ListIdpGroupMappingsResponse>;
    /**
     * Lists the MFA TOTP devices for the specified user. The returned object contains the device's OCID, but not
     * the seed. The seed is returned only upon creation or when the IAM service regenerates the MFA seed for the device.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMfaTotpDevicesRequest
     * @return ListMfaTotpDevicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListMfaTotpDevices.ts.html |here} to see how to use ListMfaTotpDevices API.
     */
    listMfaTotpDevices(listMfaTotpDevicesRequest: requests.ListMfaTotpDevicesRequest): Promise<responses.ListMfaTotpDevicesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listMfaTotpDevicesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.MfaTotpDeviceSummary objects
     * contained in responses from the listMfaTotpDevices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMfaTotpDevices(request: requests.ListMfaTotpDevicesRequest): AsyncIterableIterator<model.MfaTotpDeviceSummary>;
    /**
     * NOTE: This function is deprecated in favor of listMfaTotpDevicesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listMfaTotpDevices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMfaTotpDevicesResponses(request: requests.ListMfaTotpDevicesRequest): AsyncIterableIterator<responses.ListMfaTotpDevicesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.MfaTotpDeviceSummary objects
     * contained in responses from the listMfaTotpDevices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMfaTotpDevicesRecordIterator(request: requests.ListMfaTotpDevicesRequest): AsyncIterableIterator<model.MfaTotpDeviceSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMfaTotpDevices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMfaTotpDevicesResponseIterator(request: requests.ListMfaTotpDevicesRequest): AsyncIterableIterator<responses.ListMfaTotpDevicesResponse>;
    /**
     * Lists the network sources in your tenancy. You must specify your tenancy's OCID as the value for
     * the compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListNetworkSourcesRequest
     * @return ListNetworkSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListNetworkSources.ts.html |here} to see how to use ListNetworkSources API.
     */
    listNetworkSources(listNetworkSourcesRequest: requests.ListNetworkSourcesRequest): Promise<responses.ListNetworkSourcesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listNetworkSourcesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.NetworkSourcesSummary objects
     * contained in responses from the listNetworkSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNetworkSources(request: requests.ListNetworkSourcesRequest): AsyncIterableIterator<model.NetworkSourcesSummary>;
    /**
     * NOTE: This function is deprecated in favor of listNetworkSourcesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listNetworkSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNetworkSourcesResponses(request: requests.ListNetworkSourcesRequest): AsyncIterableIterator<responses.ListNetworkSourcesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.NetworkSourcesSummary objects
     * contained in responses from the listNetworkSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listNetworkSourcesRecordIterator(request: requests.ListNetworkSourcesRequest): AsyncIterableIterator<model.NetworkSourcesSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listNetworkSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listNetworkSourcesResponseIterator(request: requests.ListNetworkSourcesRequest): AsyncIterableIterator<responses.ListNetworkSourcesResponse>;
    /**
     * List of Oauth tokens for the user
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOAuthClientCredentialsRequest
     * @return ListOAuthClientCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListOAuthClientCredentials.ts.html |here} to see how to use ListOAuthClientCredentials API.
     */
    listOAuthClientCredentials(listOAuthClientCredentialsRequest: requests.ListOAuthClientCredentialsRequest): Promise<responses.ListOAuthClientCredentialsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listOAuthClientCredentialsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.OAuth2ClientCredentialSummary objects
     * contained in responses from the listOAuthClientCredentials operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOAuthClientCredentials(request: requests.ListOAuthClientCredentialsRequest): AsyncIterableIterator<model.OAuth2ClientCredentialSummary>;
    /**
     * NOTE: This function is deprecated in favor of listOAuthClientCredentialsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listOAuthClientCredentials operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOAuthClientCredentialsResponses(request: requests.ListOAuthClientCredentialsRequest): AsyncIterableIterator<responses.ListOAuthClientCredentialsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.OAuth2ClientCredentialSummary objects
     * contained in responses from the listOAuthClientCredentials operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOAuthClientCredentialsRecordIterator(request: requests.ListOAuthClientCredentialsRequest): AsyncIterableIterator<model.OAuth2ClientCredentialSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listOAuthClientCredentials operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOAuthClientCredentialsResponseIterator(request: requests.ListOAuthClientCredentialsRequest): AsyncIterableIterator<responses.ListOAuthClientCredentialsResponse>;
    /**
       * Lists the policies in the specified compartment (either the tenancy or another of your compartments).
  * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
  * <p>
  To determine which policies apply to a particular group or compartment, you must view the individual
  * statements inside all your policies. There isn't a way to automatically obtain that information via the API.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListPoliciesRequest
       * @return ListPoliciesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListPolicies.ts.html |here} to see how to use ListPolicies API.
       */
    listPolicies(listPoliciesRequest: requests.ListPoliciesRequest): Promise<responses.ListPoliciesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listPoliciesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Policy objects
     * contained in responses from the listPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPolicies(request: requests.ListPoliciesRequest): AsyncIterableIterator<model.Policy>;
    /**
     * NOTE: This function is deprecated in favor of listPoliciesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPoliciesResponses(request: requests.ListPoliciesRequest): AsyncIterableIterator<responses.ListPoliciesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.Policy objects
     * contained in responses from the listPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPoliciesRecordIterator(request: requests.ListPoliciesRequest): AsyncIterableIterator<model.Policy>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPoliciesResponseIterator(request: requests.ListPoliciesRequest): AsyncIterableIterator<responses.ListPoliciesResponse>;
    /**
     * Lists the region subscriptions for the specified tenancy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRegionSubscriptionsRequest
     * @return ListRegionSubscriptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListRegionSubscriptions.ts.html |here} to see how to use ListRegionSubscriptions API.
     */
    listRegionSubscriptions(listRegionSubscriptionsRequest: requests.ListRegionSubscriptionsRequest): Promise<responses.ListRegionSubscriptionsResponse>;
    /**
     * Lists all the regions offered by Oracle Cloud Infrastructure.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRegionsRequest
     * @return ListRegionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListRegions.ts.html |here} to see how to use ListRegions API.
     */
    listRegions(listRegionsRequest: requests.ListRegionsRequest): Promise<responses.ListRegionsResponse>;
    /**
     * Lists the SMTP credentials for the specified user. The returned object contains the credential's OCID,
     * the SMTP user name but not the SMTP password. The SMTP password is returned only upon creation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSmtpCredentialsRequest
     * @return ListSmtpCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListSmtpCredentials.ts.html |here} to see how to use ListSmtpCredentials API.
     */
    listSmtpCredentials(listSmtpCredentialsRequest: requests.ListSmtpCredentialsRequest): Promise<responses.ListSmtpCredentialsResponse>;
    /**
     * Lists available standard tag namespaces that users can create.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListStandardTagNamespacesRequest
     * @return ListStandardTagNamespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListStandardTagNamespaces.ts.html |here} to see how to use ListStandardTagNamespaces API.
     */
    listStandardTagNamespaces(listStandardTagNamespacesRequest: requests.ListStandardTagNamespacesRequest): Promise<responses.ListStandardTagNamespacesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listStandardTagNamespacesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.StandardTagNamespaceTemplateSummary objects
     * contained in responses from the listStandardTagNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllStandardTagNamespaces(request: requests.ListStandardTagNamespacesRequest): AsyncIterableIterator<model.StandardTagNamespaceTemplateSummary>;
    /**
     * NOTE: This function is deprecated in favor of listStandardTagNamespacesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listStandardTagNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllStandardTagNamespacesResponses(request: requests.ListStandardTagNamespacesRequest): AsyncIterableIterator<responses.ListStandardTagNamespacesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.StandardTagNamespaceTemplateSummary objects
     * contained in responses from the listStandardTagNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listStandardTagNamespacesRecordIterator(request: requests.ListStandardTagNamespacesRequest): AsyncIterableIterator<model.StandardTagNamespaceTemplateSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listStandardTagNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listStandardTagNamespacesResponseIterator(request: requests.ListStandardTagNamespacesRequest): AsyncIterableIterator<responses.ListStandardTagNamespacesResponse>;
    /**
       * **Deprecated. Use {@link #listAuthTokens(ListAuthTokensRequest) listAuthTokens} instead.**
  * <p>
  Lists the Swift passwords for the specified user. The returned object contains the password's OCID, but not
  * the password itself. The actual password is returned only upon creation.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSwiftPasswordsRequest
       * @return ListSwiftPasswordsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListSwiftPasswords.ts.html |here} to see how to use ListSwiftPasswords API.
       */
    listSwiftPasswords(listSwiftPasswordsRequest: requests.ListSwiftPasswordsRequest): Promise<responses.ListSwiftPasswordsResponse>;
    /**
     * Lists the tag defaults for tag definitions in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTagDefaultsRequest
     * @return ListTagDefaultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTagDefaults.ts.html |here} to see how to use ListTagDefaults API.
     */
    listTagDefaults(listTagDefaultsRequest: requests.ListTagDefaultsRequest): Promise<responses.ListTagDefaultsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listTagDefaultsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TagDefaultSummary objects
     * contained in responses from the listTagDefaults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTagDefaults(request: requests.ListTagDefaultsRequest): AsyncIterableIterator<model.TagDefaultSummary>;
    /**
     * NOTE: This function is deprecated in favor of listTagDefaultsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTagDefaults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTagDefaultsResponses(request: requests.ListTagDefaultsRequest): AsyncIterableIterator<responses.ListTagDefaultsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.TagDefaultSummary objects
     * contained in responses from the listTagDefaults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagDefaultsRecordIterator(request: requests.ListTagDefaultsRequest): AsyncIterableIterator<model.TagDefaultSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTagDefaults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagDefaultsResponseIterator(request: requests.ListTagDefaultsRequest): AsyncIterableIterator<responses.ListTagDefaultsResponse>;
    /**
     * Lists the tag namespaces in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTagNamespacesRequest
     * @return ListTagNamespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTagNamespaces.ts.html |here} to see how to use ListTagNamespaces API.
     */
    listTagNamespaces(listTagNamespacesRequest: requests.ListTagNamespacesRequest): Promise<responses.ListTagNamespacesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listTagNamespacesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TagNamespaceSummary objects
     * contained in responses from the listTagNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTagNamespaces(request: requests.ListTagNamespacesRequest): AsyncIterableIterator<model.TagNamespaceSummary>;
    /**
     * NOTE: This function is deprecated in favor of listTagNamespacesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTagNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTagNamespacesResponses(request: requests.ListTagNamespacesRequest): AsyncIterableIterator<responses.ListTagNamespacesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.TagNamespaceSummary objects
     * contained in responses from the listTagNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagNamespacesRecordIterator(request: requests.ListTagNamespacesRequest): AsyncIterableIterator<model.TagNamespaceSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTagNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagNamespacesResponseIterator(request: requests.ListTagNamespacesRequest): AsyncIterableIterator<responses.ListTagNamespacesResponse>;
    /**
     * Gets the errors for a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTaggingWorkRequestErrorsRequest
     * @return ListTaggingWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTaggingWorkRequestErrors.ts.html |here} to see how to use ListTaggingWorkRequestErrors API.
     */
    listTaggingWorkRequestErrors(listTaggingWorkRequestErrorsRequest: requests.ListTaggingWorkRequestErrorsRequest): Promise<responses.ListTaggingWorkRequestErrorsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestErrorSummary objects
     * contained in responses from the listTaggingWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequestErrors(request: requests.ListTaggingWorkRequestErrorsRequest): AsyncIterableIterator<model.TaggingWorkRequestErrorSummary>;
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequestErrorsResponses(request: requests.ListTaggingWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListTaggingWorkRequestErrorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestErrorSummary objects
     * contained in responses from the listTaggingWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestErrorsRecordIterator(request: requests.ListTaggingWorkRequestErrorsRequest): AsyncIterableIterator<model.TaggingWorkRequestErrorSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestErrorsResponseIterator(request: requests.ListTaggingWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListTaggingWorkRequestErrorsResponse>;
    /**
     * Gets the logs for a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTaggingWorkRequestLogsRequest
     * @return ListTaggingWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTaggingWorkRequestLogs.ts.html |here} to see how to use ListTaggingWorkRequestLogs API.
     */
    listTaggingWorkRequestLogs(listTaggingWorkRequestLogsRequest: requests.ListTaggingWorkRequestLogsRequest): Promise<responses.ListTaggingWorkRequestLogsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestLogSummary objects
     * contained in responses from the listTaggingWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequestLogs(request: requests.ListTaggingWorkRequestLogsRequest): AsyncIterableIterator<model.TaggingWorkRequestLogSummary>;
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequestLogsResponses(request: requests.ListTaggingWorkRequestLogsRequest): AsyncIterableIterator<responses.ListTaggingWorkRequestLogsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestLogSummary objects
     * contained in responses from the listTaggingWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestLogsRecordIterator(request: requests.ListTaggingWorkRequestLogsRequest): AsyncIterableIterator<model.TaggingWorkRequestLogSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestLogsResponseIterator(request: requests.ListTaggingWorkRequestLogsRequest): AsyncIterableIterator<responses.ListTaggingWorkRequestLogsResponse>;
    /**
     * Lists the tagging work requests in compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTaggingWorkRequestsRequest
     * @return ListTaggingWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTaggingWorkRequests.ts.html |here} to see how to use ListTaggingWorkRequests API.
     */
    listTaggingWorkRequests(listTaggingWorkRequestsRequest: requests.ListTaggingWorkRequestsRequest): Promise<responses.ListTaggingWorkRequestsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestSummary objects
     * contained in responses from the listTaggingWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequests(request: requests.ListTaggingWorkRequestsRequest): AsyncIterableIterator<model.TaggingWorkRequestSummary>;
    /**
     * NOTE: This function is deprecated in favor of listTaggingWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTaggingWorkRequestsResponses(request: requests.ListTaggingWorkRequestsRequest): AsyncIterableIterator<responses.ListTaggingWorkRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.TaggingWorkRequestSummary objects
     * contained in responses from the listTaggingWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestsRecordIterator(request: requests.ListTaggingWorkRequestsRequest): AsyncIterableIterator<model.TaggingWorkRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTaggingWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTaggingWorkRequestsResponseIterator(request: requests.ListTaggingWorkRequestsRequest): AsyncIterableIterator<responses.ListTaggingWorkRequestsResponse>;
    /**
     * Lists the tag definitions in the specified tag namespace.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTagsRequest
     * @return ListTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListTags.ts.html |here} to see how to use ListTags API.
     */
    listTags(listTagsRequest: requests.ListTagsRequest): Promise<responses.ListTagsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listTagsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TagSummary objects
     * contained in responses from the listTags operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTags(request: requests.ListTagsRequest): AsyncIterableIterator<model.TagSummary>;
    /**
     * NOTE: This function is deprecated in favor of listTagsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTags operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTagsResponses(request: requests.ListTagsRequest): AsyncIterableIterator<responses.ListTagsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.TagSummary objects
     * contained in responses from the listTags operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagsRecordIterator(request: requests.ListTagsRequest): AsyncIterableIterator<model.TagSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTags operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTagsResponseIterator(request: requests.ListTagsRequest): AsyncIterableIterator<responses.ListTagsResponse>;
    /**
       * Lists the `UserGroupMembership` objects in your tenancy. You must specify your tenancy's OCID
  * as the value for the compartment ID
  * (see [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five)).
  * You must also then filter the list in one of these ways:
  * <p>
  - You can limit the results to just the memberships for a given user by specifying a `userId`.
  * - Similarly, you can limit the results to just the memberships for a given group by specifying a `groupId`.
  * - You can set both the `userId` and `groupId` to determine if the specified user is in the specified group.
  * If the answer is no, the response is an empty list.
  * - Although`userId` and `groupId` are not individually required, you must set one of them.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListUserGroupMembershipsRequest
       * @return ListUserGroupMembershipsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListUserGroupMemberships.ts.html |here} to see how to use ListUserGroupMemberships API.
       */
    listUserGroupMemberships(listUserGroupMembershipsRequest: requests.ListUserGroupMembershipsRequest): Promise<responses.ListUserGroupMembershipsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listUserGroupMembershipsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.UserGroupMembership objects
     * contained in responses from the listUserGroupMemberships operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserGroupMemberships(request: requests.ListUserGroupMembershipsRequest): AsyncIterableIterator<model.UserGroupMembership>;
    /**
     * NOTE: This function is deprecated in favor of listUserGroupMembershipsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUserGroupMemberships operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserGroupMembershipsResponses(request: requests.ListUserGroupMembershipsRequest): AsyncIterableIterator<responses.ListUserGroupMembershipsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.UserGroupMembership objects
     * contained in responses from the listUserGroupMemberships operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserGroupMembershipsRecordIterator(request: requests.ListUserGroupMembershipsRequest): AsyncIterableIterator<model.UserGroupMembership>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUserGroupMemberships operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserGroupMembershipsResponseIterator(request: requests.ListUserGroupMembershipsRequest): AsyncIterableIterator<responses.ListUserGroupMembershipsResponse>;
    /**
     * Lists the users in your tenancy. You must specify your tenancy's OCID as the value for the
     * compartment ID (remember that the tenancy is simply the root compartment).
     * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#five).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListUsersRequest
     * @return ListUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListUsers.ts.html |here} to see how to use ListUsers API.
     */
    listUsers(listUsersRequest: requests.ListUsersRequest): Promise<responses.ListUsersResponse>;
    /**
     * NOTE: This function is deprecated in favor of listUsersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.User objects
     * contained in responses from the listUsers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUsers(request: requests.ListUsersRequest): AsyncIterableIterator<model.User>;
    /**
     * NOTE: This function is deprecated in favor of listUsersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUsersResponses(request: requests.ListUsersRequest): AsyncIterableIterator<responses.ListUsersResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.User objects
     * contained in responses from the listUsers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUsersRecordIterator(request: requests.ListUsersRequest): AsyncIterableIterator<model.User>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUsersResponseIterator(request: requests.ListUsersRequest): AsyncIterableIterator<responses.ListUsersResponse>;
    /**
     * Lists the work requests in compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<model.WorkRequestSummary>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<model.WorkRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
     * Move the compartment to a different parent compartment in the same tenancy. When you move a
     * compartment, all its contents (subcompartments and resources) are moved with it. Note that
     * the `CompartmentId` that you specify in the path is the compartment that you want to move.
     * <p>
     **IMPORTANT**: After you move a compartment to a new parent compartment, the access policies of
     * the new parent take effect and the policies of the previous parent no longer apply. Ensure that you
     * are aware of the implications for the compartment contents before you move it. For more
     * information, see [Moving a Compartment](https://docs.cloud.oracle.com/Content/Identity/compartments/managingcompartments.htm#MoveCompartment).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param MoveCompartmentRequest
     * @return MoveCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/MoveCompartment.ts.html |here} to see how to use MoveCompartment API.
     */
    moveCompartment(moveCompartmentRequest: requests.MoveCompartmentRequest): Promise<responses.MoveCompartmentResponse>;
    /**
     * Recover the compartment from DELETED state to ACTIVE state.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RecoverCompartmentRequest
     * @return RecoverCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/RecoverCompartment.ts.html |here} to see how to use RecoverCompartment API.
     */
    recoverCompartment(recoverCompartmentRequest: requests.RecoverCompartmentRequest): Promise<responses.RecoverCompartmentResponse>;
    /**
     * Removes a user from a group by deleting the corresponding `UserGroupMembership`.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveUserFromGroupRequest
     * @return RemoveUserFromGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/RemoveUserFromGroup.ts.html |here} to see how to use RemoveUserFromGroup API.
     */
    removeUserFromGroup(removeUserFromGroupRequest: requests.RemoveUserFromGroupRequest): Promise<responses.RemoveUserFromGroupResponse>;
    /**
     * Resets the OAuth2 client credentials for the SCIM client associated with this identity provider.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ResetIdpScimClientRequest
     * @return ResetIdpScimClientResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/ResetIdpScimClient.ts.html |here} to see how to use ResetIdpScimClient API.
     */
    resetIdpScimClient(resetIdpScimClientRequest: requests.ResetIdpScimClientRequest): Promise<responses.ResetIdpScimClientResponse>;
    /**
     * Updates the specified auth token's description.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuthTokenRequest
     * @return UpdateAuthTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateAuthToken.ts.html |here} to see how to use UpdateAuthToken API.
     */
    updateAuthToken(updateAuthTokenRequest: requests.UpdateAuthTokenRequest): Promise<responses.UpdateAuthTokenResponse>;
    /**
     * Updates authentication policy for the specified tenancy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuthenticationPolicyRequest
     * @return UpdateAuthenticationPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateAuthenticationPolicy.ts.html |here} to see how to use UpdateAuthenticationPolicy API.
     */
    updateAuthenticationPolicy(updateAuthenticationPolicyRequest: requests.UpdateAuthenticationPolicyRequest): Promise<responses.UpdateAuthenticationPolicyResponse>;
    /**
     * Updates the specified compartment's description or name. You can't update the root compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateCompartmentRequest
     * @return UpdateCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateCompartment.ts.html |here} to see how to use UpdateCompartment API.
     */
    updateCompartment(updateCompartmentRequest: requests.UpdateCompartmentRequest): Promise<responses.UpdateCompartmentResponse>;
    /**
     * Updates the specified secret key's description.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateCustomerSecretKeyRequest
     * @return UpdateCustomerSecretKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateCustomerSecretKey.ts.html |here} to see how to use UpdateCustomerSecretKey API.
     */
    updateCustomerSecretKey(updateCustomerSecretKeyRequest: requests.UpdateCustomerSecretKeyRequest): Promise<responses.UpdateCustomerSecretKeyResponse>;
    /**
       * (For tenancies that support identity domains) Updates identity domain information and the associated Identity Cloud Service (IDCS) stripe.
  * <p>
  To track the progress of the request, submitting an HTTP GET on the /iamWorkRequests/{iamWorkRequestsId} endpoint retrieves
  * the operation's status.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateDomainRequest
       * @return UpdateDomainResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateDomain.ts.html |here} to see how to use UpdateDomain API.
       */
    updateDomain(updateDomainRequest: requests.UpdateDomainRequest): Promise<responses.UpdateDomainResponse>;
    /**
     * Updates the specified dynamic group.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDynamicGroupRequest
     * @return UpdateDynamicGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateDynamicGroup.ts.html |here} to see how to use UpdateDynamicGroup API.
     */
    updateDynamicGroup(updateDynamicGroupRequest: requests.UpdateDynamicGroupRequest): Promise<responses.UpdateDynamicGroupResponse>;
    /**
     * Updates the specified group.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateGroupRequest
     * @return UpdateGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateGroup.ts.html |here} to see how to use UpdateGroup API.
     */
    updateGroup(updateGroupRequest: requests.UpdateGroupRequest): Promise<responses.UpdateGroupResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Updates the specified identity provider.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateIdentityProviderRequest
       * @return UpdateIdentityProviderResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateIdentityProvider.ts.html |here} to see how to use UpdateIdentityProvider API.
       */
    updateIdentityProvider(updateIdentityProviderRequest: requests.UpdateIdentityProviderRequest): Promise<responses.UpdateIdentityProviderResponse>;
    /**
       * **Deprecated.** For more information, see [Deprecated IAM Service APIs](https://docs.cloud.oracle.com/Content/Identity/Reference/deprecatediamapis.htm).
  * <p>
  Updates the specified group mapping.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateIdpGroupMappingRequest
       * @return UpdateIdpGroupMappingResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateIdpGroupMapping.ts.html |here} to see how to use UpdateIdpGroupMapping API.
       */
    updateIdpGroupMapping(updateIdpGroupMappingRequest: requests.UpdateIdpGroupMappingRequest): Promise<responses.UpdateIdpGroupMappingResponse>;
    /**
     * Updates the specified network source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateNetworkSourceRequest
     * @return UpdateNetworkSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateNetworkSource.ts.html |here} to see how to use UpdateNetworkSource API.
     */
    updateNetworkSource(updateNetworkSourceRequest: requests.UpdateNetworkSourceRequest): Promise<responses.UpdateNetworkSourceResponse>;
    /**
     * Updates Oauth token for the user
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOAuthClientCredentialRequest
     * @return UpdateOAuthClientCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateOAuthClientCredential.ts.html |here} to see how to use UpdateOAuthClientCredential API.
     */
    updateOAuthClientCredential(updateOAuthClientCredentialRequest: requests.UpdateOAuthClientCredentialRequest): Promise<responses.UpdateOAuthClientCredentialResponse>;
    /**
       * Updates the specified policy. You can update the description or the policy statements themselves.
  * <p>
  Policy changes take effect typically within 10 seconds.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdatePolicyRequest
       * @return UpdatePolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdatePolicy.ts.html |here} to see how to use UpdatePolicy API.
       */
    updatePolicy(updatePolicyRequest: requests.UpdatePolicyRequest): Promise<responses.UpdatePolicyResponse>;
    /**
     * Updates the specified SMTP credential's description.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSmtpCredentialRequest
     * @return UpdateSmtpCredentialResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateSmtpCredential.ts.html |here} to see how to use UpdateSmtpCredential API.
     */
    updateSmtpCredential(updateSmtpCredentialRequest: requests.UpdateSmtpCredentialRequest): Promise<responses.UpdateSmtpCredentialResponse>;
    /**
       * **Deprecated. Use {@link #updateAuthToken(UpdateAuthTokenRequest) updateAuthToken} instead.**
  * <p>
  Updates the specified Swift password's description.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateSwiftPasswordRequest
       * @return UpdateSwiftPasswordResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateSwiftPassword.ts.html |here} to see how to use UpdateSwiftPassword API.
       */
    updateSwiftPassword(updateSwiftPasswordRequest: requests.UpdateSwiftPasswordRequest): Promise<responses.UpdateSwiftPasswordResponse>;
    /**
       * Updates the specified tag definition.
  * <p>
  Setting `validator` determines the value type. Tags can use either a static value or a
  * list of possible values. Static values are entered by a user applying the tag to a resource.
  * Lists are created by you and the user must apply a value from the list. On update, any values
  * in a list that were previously set do not change, but new values must pass validation. Values
  * already applied to a resource do not change.
  * <p>
  You cannot remove list values that appear in a TagDefault. To remove a list value that
  * appears in a TagDefault, first update the TagDefault to use a different value.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateTagRequest
       * @return UpdateTagResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateTag.ts.html |here} to see how to use UpdateTag API.
       */
    updateTag(updateTagRequest: requests.UpdateTagRequest): Promise<responses.UpdateTagResponse>;
    /**
     * Updates the specified tag default. If you specify that a value is required, a value is set
     * during resource creation (either by the user creating the resource or another tag defualt).
     * If no value is set, resource creation is blocked.
     * <p>
     * If the `isRequired` flag is set to \"true\", the value is set during resource creation.
     * * If the `isRequired` flag is set to \"false\", the value you enter is set during resource creation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateTagDefaultRequest
     * @return UpdateTagDefaultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateTagDefault.ts.html |here} to see how to use UpdateTagDefault API.
     */
    updateTagDefault(updateTagDefaultRequest: requests.UpdateTagDefaultRequest): Promise<responses.UpdateTagDefaultResponse>;
    /**
       * Updates the the specified tag namespace. You can't update the namespace name.
  * <p>
  Updating `isRetired` to 'true' retires the namespace and all the tag definitions in the namespace. Reactivating a
  * namespace (changing `isRetired` from 'true' to 'false') does not reactivate tag definitions.
  * To reactivate the tag definitions, you must reactivate each one individually *after* you reactivate the namespace,
  * using {@link #updateTag(UpdateTagRequest) updateTag}. For more information about retiring tag namespaces, see
  * [Retiring Key Definitions and Namespace Definitions](https://docs.cloud.oracle.com/Content/Tagging/Tasks/managingtagsandtagnamespaces.htm#retiringkeys).
  * <p>
  You can't add a namespace with the same name as a retired namespace in the same tenancy.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateTagNamespaceRequest
       * @return UpdateTagNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateTagNamespace.ts.html |here} to see how to use UpdateTagNamespace API.
       */
    updateTagNamespace(updateTagNamespaceRequest: requests.UpdateTagNamespaceRequest): Promise<responses.UpdateTagNamespaceResponse>;
    /**
     * Updates the description of the specified user.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateUserRequest
     * @return UpdateUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateUser.ts.html |here} to see how to use UpdateUser API.
     */
    updateUser(updateUserRequest: requests.UpdateUserRequest): Promise<responses.UpdateUserResponse>;
    /**
     * Updates the capabilities of the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateUserCapabilitiesRequest
     * @return UpdateUserCapabilitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateUserCapabilities.ts.html |here} to see how to use UpdateUserCapabilities API.
     */
    updateUserCapabilities(updateUserCapabilitiesRequest: requests.UpdateUserCapabilitiesRequest): Promise<responses.UpdateUserCapabilitiesResponse>;
    /**
     * Updates the state of the specified user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateUserStateRequest
     * @return UpdateUserStateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UpdateUserState.ts.html |here} to see how to use UpdateUserState API.
     */
    updateUserState(updateUserStateRequest: requests.UpdateUserStateRequest): Promise<responses.UpdateUserStateResponse>;
    /**
       * Uploads an API signing key for the specified user.
  * <p>
  Every user has permission to use this operation to upload a key for *their own user ID*. An
  * administrator in your organization does not need to write a policy to give users this ability.
  * To compare, administrators who have permission to the tenancy can use this operation to upload a
  * key for any user, including themselves.
  * <p>
  **Important:** Even though you have permission to upload an API key, you might not yet
  * have permission to do much else. If you try calling an operation unrelated to your own credential
  * management (e.g., `ListUsers`, `LaunchInstance`) and receive an \"unauthorized\" error,
  * check with an administrator to confirm which IAM Service group(s) you're in and what access
  * you have. Also confirm you're working in the correct compartment.
  * <p>
  After you send your request, the new object's `lifecycleState` will temporarily be CREATING. Before using
  * the object, first make sure its `lifecycleState` has changed to ACTIVE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UploadApiKeyRequest
       * @return UploadApiKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.28.0/identity/UploadApiKey.ts.html |here} to see how to use UploadApiKey API.
       */
    uploadApiKey(uploadApiKeyRequest: requests.UploadApiKeyRequest): Promise<responses.UploadApiKeyResponse>;
}
