/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DatabaseClient } from "./client";
import { WorkRequestClient, responses } from "oci-workrequests";
export declare class DatabaseWaiter {
    private client;
    private workRequestClient;
    private readonly config?;
    constructor(client: DatabaseClient, workRequestClient: WorkRequestClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forActivateExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns ActivateExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forActivateExadataInfrastructure(request: serviceRequests.ActivateExadataInfrastructureRequest): Promise<{
        response: serviceResponses.ActivateExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forAddStorageCapacityExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns AddStorageCapacityExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forAddStorageCapacityExadataInfrastructure(request: serviceRequests.AddStorageCapacityExadataInfrastructureRequest): Promise<{
        response: serviceResponses.AddStorageCapacityExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forAddVirtualMachineToVmCluster
     *
     * @param request the request to send
     * @return response returns AddVirtualMachineToVmClusterResponse, GetWorkRequestResponse tuple
     */
    forAddVirtualMachineToVmCluster(request: serviceRequests.AddVirtualMachineToVmClusterRequest): Promise<{
        response: serviceResponses.AddVirtualMachineToVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forAutonomousDatabaseManualRefresh
     *
     * @param request the request to send
     * @return response returns AutonomousDatabaseManualRefreshResponse, GetWorkRequestResponse tuple
     */
    forAutonomousDatabaseManualRefresh(request: serviceRequests.AutonomousDatabaseManualRefreshRequest): Promise<{
        response: serviceResponses.AutonomousDatabaseManualRefreshResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeAutonomousContainerDatabaseCompartment
     *
     * @param request the request to send
     * @return response returns ChangeAutonomousContainerDatabaseCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeAutonomousContainerDatabaseCompartment(request: serviceRequests.ChangeAutonomousContainerDatabaseCompartmentRequest): Promise<{
        response: serviceResponses.ChangeAutonomousContainerDatabaseCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeAutonomousDatabaseCompartment
     *
     * @param request the request to send
     * @return response returns ChangeAutonomousDatabaseCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeAutonomousDatabaseCompartment(request: serviceRequests.ChangeAutonomousDatabaseCompartmentRequest): Promise<{
        response: serviceResponses.ChangeAutonomousDatabaseCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeAutonomousExadataInfrastructureCompartment
     *
     * @param request the request to send
     * @return response returns ChangeAutonomousExadataInfrastructureCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeAutonomousExadataInfrastructureCompartment(request: serviceRequests.ChangeAutonomousExadataInfrastructureCompartmentRequest): Promise<{
        response: serviceResponses.ChangeAutonomousExadataInfrastructureCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeAutonomousVmClusterCompartment
     *
     * @param request the request to send
     * @return response returns ChangeAutonomousVmClusterCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeAutonomousVmClusterCompartment(request: serviceRequests.ChangeAutonomousVmClusterCompartmentRequest): Promise<{
        response: serviceResponses.ChangeAutonomousVmClusterCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeBackupDestinationCompartment
     *
     * @param request the request to send
     * @return response returns ChangeBackupDestinationCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeBackupDestinationCompartment(request: serviceRequests.ChangeBackupDestinationCompartmentRequest): Promise<{
        response: serviceResponses.ChangeBackupDestinationCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeCloudAutonomousVmClusterCompartment
     *
     * @param request the request to send
     * @return response returns ChangeCloudAutonomousVmClusterCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeCloudAutonomousVmClusterCompartment(request: serviceRequests.ChangeCloudAutonomousVmClusterCompartmentRequest): Promise<{
        response: serviceResponses.ChangeCloudAutonomousVmClusterCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeCloudExadataInfrastructureCompartment
     *
     * @param request the request to send
     * @return response returns ChangeCloudExadataInfrastructureCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeCloudExadataInfrastructureCompartment(request: serviceRequests.ChangeCloudExadataInfrastructureCompartmentRequest): Promise<{
        response: serviceResponses.ChangeCloudExadataInfrastructureCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeCloudVmClusterCompartment
     *
     * @param request the request to send
     * @return response returns ChangeCloudVmClusterCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeCloudVmClusterCompartment(request: serviceRequests.ChangeCloudVmClusterCompartmentRequest): Promise<{
        response: serviceResponses.ChangeCloudVmClusterCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeDatabaseSoftwareImageCompartment
     *
     * @param request the request to send
     * @return response returns ChangeDatabaseSoftwareImageCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeDatabaseSoftwareImageCompartment(request: serviceRequests.ChangeDatabaseSoftwareImageCompartmentRequest): Promise<{
        response: serviceResponses.ChangeDatabaseSoftwareImageCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeDbSystemCompartment
     *
     * @param request the request to send
     * @return response returns ChangeDbSystemCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeDbSystemCompartment(request: serviceRequests.ChangeDbSystemCompartmentRequest): Promise<{
        response: serviceResponses.ChangeDbSystemCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeExadataInfrastructureCompartment
     *
     * @param request the request to send
     * @return response returns ChangeExadataInfrastructureCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeExadataInfrastructureCompartment(request: serviceRequests.ChangeExadataInfrastructureCompartmentRequest): Promise<{
        response: serviceResponses.ChangeExadataInfrastructureCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeExternalContainerDatabaseCompartment
     *
     * @param request the request to send
     * @return response returns ChangeExternalContainerDatabaseCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeExternalContainerDatabaseCompartment(request: serviceRequests.ChangeExternalContainerDatabaseCompartmentRequest): Promise<{
        response: serviceResponses.ChangeExternalContainerDatabaseCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeExternalNonContainerDatabaseCompartment
     *
     * @param request the request to send
     * @return response returns ChangeExternalNonContainerDatabaseCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeExternalNonContainerDatabaseCompartment(request: serviceRequests.ChangeExternalNonContainerDatabaseCompartmentRequest): Promise<{
        response: serviceResponses.ChangeExternalNonContainerDatabaseCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeExternalPluggableDatabaseCompartment
     *
     * @param request the request to send
     * @return response returns ChangeExternalPluggableDatabaseCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeExternalPluggableDatabaseCompartment(request: serviceRequests.ChangeExternalPluggableDatabaseCompartmentRequest): Promise<{
        response: serviceResponses.ChangeExternalPluggableDatabaseCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeKeyStoreCompartment
     *
     * @param request the request to send
     * @return response returns ChangeKeyStoreCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeKeyStoreCompartment(request: serviceRequests.ChangeKeyStoreCompartmentRequest): Promise<{
        response: serviceResponses.ChangeKeyStoreCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeVmClusterCompartment
     *
     * @param request the request to send
     * @return response returns ChangeVmClusterCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeVmClusterCompartment(request: serviceRequests.ChangeVmClusterCompartmentRequest): Promise<{
        response: serviceResponses.ChangeVmClusterCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCheckExternalDatabaseConnectorConnectionStatus
     *
     * @param request the request to send
     * @return response returns CheckExternalDatabaseConnectorConnectionStatusResponse, GetWorkRequestResponse tuple
     */
    forCheckExternalDatabaseConnectorConnectionStatus(request: serviceRequests.CheckExternalDatabaseConnectorConnectionStatusRequest): Promise<{
        response: serviceResponses.CheckExternalDatabaseConnectorConnectionStatusResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCompleteExternalBackupJob
     *
     * @param request the request to send
     * @return response returns CompleteExternalBackupJobResponse, GetWorkRequestResponse tuple
     */
    forCompleteExternalBackupJob(request: serviceRequests.CompleteExternalBackupJobRequest): Promise<{
        response: serviceResponses.CompleteExternalBackupJobResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forConfigureAutonomousDatabaseVaultKey
     *
     * @param request the request to send
     * @return response returns ConfigureAutonomousDatabaseVaultKeyResponse, GetWorkRequestResponse tuple
     */
    forConfigureAutonomousDatabaseVaultKey(request: serviceRequests.ConfigureAutonomousDatabaseVaultKeyRequest): Promise<{
        response: serviceResponses.ConfigureAutonomousDatabaseVaultKeyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forConvertToPdb
     *
     * @param request the request to send
     * @return response returns ConvertToPdbResponse, GetWorkRequestResponse tuple
     */
    forConvertToPdb(request: serviceRequests.ConvertToPdbRequest): Promise<{
        response: serviceResponses.ConvertToPdbResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateAutonomousContainerDatabase
     *
     * @param request the request to send
     * @return response returns CreateAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateAutonomousContainerDatabase(request: serviceRequests.CreateAutonomousContainerDatabaseRequest): Promise<{
        response: serviceResponses.CreateAutonomousContainerDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns CreateAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateAutonomousDatabase(request: serviceRequests.CreateAutonomousDatabaseRequest): Promise<{
        response: serviceResponses.CreateAutonomousDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateAutonomousDatabaseBackup
     *
     * @param request the request to send
     * @return response returns CreateAutonomousDatabaseBackupResponse, GetWorkRequestResponse tuple
     */
    forCreateAutonomousDatabaseBackup(request: serviceRequests.CreateAutonomousDatabaseBackupRequest): Promise<{
        response: serviceResponses.CreateAutonomousDatabaseBackupResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns CreateAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forCreateAutonomousVmCluster(request: serviceRequests.CreateAutonomousVmClusterRequest): Promise<{
        response: serviceResponses.CreateAutonomousVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateBackup
     *
     * @param request the request to send
     * @return response returns CreateBackupResponse, GetWorkRequestResponse tuple
     */
    forCreateBackup(request: serviceRequests.CreateBackupRequest): Promise<{
        response: serviceResponses.CreateBackupResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateCloudAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns CreateCloudAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forCreateCloudAutonomousVmCluster(request: serviceRequests.CreateCloudAutonomousVmClusterRequest): Promise<{
        response: serviceResponses.CreateCloudAutonomousVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateCloudExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns CreateCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forCreateCloudExadataInfrastructure(request: serviceRequests.CreateCloudExadataInfrastructureRequest): Promise<{
        response: serviceResponses.CreateCloudExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateCloudVmCluster
     *
     * @param request the request to send
     * @return response returns CreateCloudVmClusterResponse, GetWorkRequestResponse tuple
     */
    forCreateCloudVmCluster(request: serviceRequests.CreateCloudVmClusterRequest): Promise<{
        response: serviceResponses.CreateCloudVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateDataGuardAssociation
     *
     * @param request the request to send
     * @return response returns CreateDataGuardAssociationResponse, GetWorkRequestResponse tuple
     */
    forCreateDataGuardAssociation(request: serviceRequests.CreateDataGuardAssociationRequest): Promise<{
        response: serviceResponses.CreateDataGuardAssociationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateDatabase
     *
     * @param request the request to send
     * @return response returns CreateDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateDatabase(request: serviceRequests.CreateDatabaseRequest): Promise<{
        response: serviceResponses.CreateDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateDatabaseSoftwareImage
     *
     * @param request the request to send
     * @return response returns CreateDatabaseSoftwareImageResponse, GetWorkRequestResponse tuple
     */
    forCreateDatabaseSoftwareImage(request: serviceRequests.CreateDatabaseSoftwareImageRequest): Promise<{
        response: serviceResponses.CreateDatabaseSoftwareImageResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateDbHome
     *
     * @param request the request to send
     * @return response returns CreateDbHomeResponse, GetWorkRequestResponse tuple
     */
    forCreateDbHome(request: serviceRequests.CreateDbHomeRequest): Promise<{
        response: serviceResponses.CreateDbHomeResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns CreateExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forCreateExadataInfrastructure(request: serviceRequests.CreateExadataInfrastructureRequest): Promise<{
        response: serviceResponses.CreateExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateExternalBackupJob
     *
     * @param request the request to send
     * @return response returns CreateExternalBackupJobResponse, GetWorkRequestResponse tuple
     */
    forCreateExternalBackupJob(request: serviceRequests.CreateExternalBackupJobRequest): Promise<{
        response: serviceResponses.CreateExternalBackupJobResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateExternalContainerDatabase
     *
     * @param request the request to send
     * @return response returns CreateExternalContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateExternalContainerDatabase(request: serviceRequests.CreateExternalContainerDatabaseRequest): Promise<{
        response: serviceResponses.CreateExternalContainerDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateExternalDatabaseConnector
     *
     * @param request the request to send
     * @return response returns CreateExternalDatabaseConnectorResponse, GetWorkRequestResponse tuple
     */
    forCreateExternalDatabaseConnector(request: serviceRequests.CreateExternalDatabaseConnectorRequest): Promise<{
        response: serviceResponses.CreateExternalDatabaseConnectorResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateExternalNonContainerDatabase
     *
     * @param request the request to send
     * @return response returns CreateExternalNonContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateExternalNonContainerDatabase(request: serviceRequests.CreateExternalNonContainerDatabaseRequest): Promise<{
        response: serviceResponses.CreateExternalNonContainerDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateExternalPluggableDatabase
     *
     * @param request the request to send
     * @return response returns CreateExternalPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateExternalPluggableDatabase(request: serviceRequests.CreateExternalPluggableDatabaseRequest): Promise<{
        response: serviceResponses.CreateExternalPluggableDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreatePluggableDatabase
     *
     * @param request the request to send
     * @return response returns CreatePluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreatePluggableDatabase(request: serviceRequests.CreatePluggableDatabaseRequest): Promise<{
        response: serviceResponses.CreatePluggableDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateVmCluster
     *
     * @param request the request to send
     * @return response returns CreateVmClusterResponse, GetWorkRequestResponse tuple
     */
    forCreateVmCluster(request: serviceRequests.CreateVmClusterRequest): Promise<{
        response: serviceResponses.CreateVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateVmClusterNetwork
     *
     * @param request the request to send
     * @return response returns CreateVmClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forCreateVmClusterNetwork(request: serviceRequests.CreateVmClusterNetworkRequest): Promise<{
        response: serviceResponses.CreateVmClusterNetworkResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDbNodeAction
     *
     * @param request the request to send
     * @return response returns DbNodeActionResponse, GetWorkRequestResponse tuple
     */
    forDbNodeAction(request: serviceRequests.DbNodeActionRequest): Promise<{
        response: serviceResponses.DbNodeActionResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns DeleteAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeleteAutonomousDatabase(request: serviceRequests.DeleteAutonomousDatabaseRequest): Promise<{
        response: serviceResponses.DeleteAutonomousDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns DeleteAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forDeleteAutonomousVmCluster(request: serviceRequests.DeleteAutonomousVmClusterRequest): Promise<{
        response: serviceResponses.DeleteAutonomousVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteBackup
     *
     * @param request the request to send
     * @return response returns DeleteBackupResponse, GetWorkRequestResponse tuple
     */
    forDeleteBackup(request: serviceRequests.DeleteBackupRequest): Promise<{
        response: serviceResponses.DeleteBackupResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteCloudAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns DeleteCloudAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forDeleteCloudAutonomousVmCluster(request: serviceRequests.DeleteCloudAutonomousVmClusterRequest): Promise<{
        response: serviceResponses.DeleteCloudAutonomousVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteCloudExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns DeleteCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forDeleteCloudExadataInfrastructure(request: serviceRequests.DeleteCloudExadataInfrastructureRequest): Promise<{
        response: serviceResponses.DeleteCloudExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteCloudVmCluster
     *
     * @param request the request to send
     * @return response returns DeleteCloudVmClusterResponse, GetWorkRequestResponse tuple
     */
    forDeleteCloudVmCluster(request: serviceRequests.DeleteCloudVmClusterRequest): Promise<{
        response: serviceResponses.DeleteCloudVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteDatabase
     *
     * @param request the request to send
     * @return response returns DeleteDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeleteDatabase(request: serviceRequests.DeleteDatabaseRequest): Promise<{
        response: serviceResponses.DeleteDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteDatabaseSoftwareImage
     *
     * @param request the request to send
     * @return response returns DeleteDatabaseSoftwareImageResponse, GetWorkRequestResponse tuple
     */
    forDeleteDatabaseSoftwareImage(request: serviceRequests.DeleteDatabaseSoftwareImageRequest): Promise<{
        response: serviceResponses.DeleteDatabaseSoftwareImageResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteDbHome
     *
     * @param request the request to send
     * @return response returns DeleteDbHomeResponse, GetWorkRequestResponse tuple
     */
    forDeleteDbHome(request: serviceRequests.DeleteDbHomeRequest): Promise<{
        response: serviceResponses.DeleteDbHomeResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns DeleteExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forDeleteExadataInfrastructure(request: serviceRequests.DeleteExadataInfrastructureRequest): Promise<{
        response: serviceResponses.DeleteExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteExternalContainerDatabase
     *
     * @param request the request to send
     * @return response returns DeleteExternalContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeleteExternalContainerDatabase(request: serviceRequests.DeleteExternalContainerDatabaseRequest): Promise<{
        response: serviceResponses.DeleteExternalContainerDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteExternalDatabaseConnector
     *
     * @param request the request to send
     * @return response returns DeleteExternalDatabaseConnectorResponse, GetWorkRequestResponse tuple
     */
    forDeleteExternalDatabaseConnector(request: serviceRequests.DeleteExternalDatabaseConnectorRequest): Promise<{
        response: serviceResponses.DeleteExternalDatabaseConnectorResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteExternalNonContainerDatabase
     *
     * @param request the request to send
     * @return response returns DeleteExternalNonContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeleteExternalNonContainerDatabase(request: serviceRequests.DeleteExternalNonContainerDatabaseRequest): Promise<{
        response: serviceResponses.DeleteExternalNonContainerDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteExternalPluggableDatabase
     *
     * @param request the request to send
     * @return response returns DeleteExternalPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeleteExternalPluggableDatabase(request: serviceRequests.DeleteExternalPluggableDatabaseRequest): Promise<{
        response: serviceResponses.DeleteExternalPluggableDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeletePluggableDatabase
     *
     * @param request the request to send
     * @return response returns DeletePluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeletePluggableDatabase(request: serviceRequests.DeletePluggableDatabaseRequest): Promise<{
        response: serviceResponses.DeletePluggableDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteVmCluster
     *
     * @param request the request to send
     * @return response returns DeleteVmClusterResponse, GetWorkRequestResponse tuple
     */
    forDeleteVmCluster(request: serviceRequests.DeleteVmClusterRequest): Promise<{
        response: serviceResponses.DeleteVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteVmClusterNetwork
     *
     * @param request the request to send
     * @return response returns DeleteVmClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forDeleteVmClusterNetwork(request: serviceRequests.DeleteVmClusterNetworkRequest): Promise<{
        response: serviceResponses.DeleteVmClusterNetworkResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeregisterAutonomousDatabaseDataSafe
     *
     * @param request the request to send
     * @return response returns DeregisterAutonomousDatabaseDataSafeResponse, GetWorkRequestResponse tuple
     */
    forDeregisterAutonomousDatabaseDataSafe(request: serviceRequests.DeregisterAutonomousDatabaseDataSafeRequest): Promise<{
        response: serviceResponses.DeregisterAutonomousDatabaseDataSafeResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableAutonomousDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisableAutonomousDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisableAutonomousDatabaseManagement(request: serviceRequests.DisableAutonomousDatabaseManagementRequest): Promise<{
        response: serviceResponses.DisableAutonomousDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableAutonomousDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns DisableAutonomousDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forDisableAutonomousDatabaseOperationsInsights(request: serviceRequests.DisableAutonomousDatabaseOperationsInsightsRequest): Promise<{
        response: serviceResponses.DisableAutonomousDatabaseOperationsInsightsResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisableDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisableDatabaseManagement(request: serviceRequests.DisableDatabaseManagementRequest): Promise<{
        response: serviceResponses.DisableDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableExternalContainerDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisableExternalContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalContainerDatabaseDatabaseManagement(request: serviceRequests.DisableExternalContainerDatabaseDatabaseManagementRequest): Promise<{
        response: serviceResponses.DisableExternalContainerDatabaseDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableExternalContainerDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns DisableExternalContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalContainerDatabaseStackMonitoring(request: serviceRequests.DisableExternalContainerDatabaseStackMonitoringRequest): Promise<{
        response: serviceResponses.DisableExternalContainerDatabaseStackMonitoringResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableExternalNonContainerDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisableExternalNonContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalNonContainerDatabaseDatabaseManagement(request: serviceRequests.DisableExternalNonContainerDatabaseDatabaseManagementRequest): Promise<{
        response: serviceResponses.DisableExternalNonContainerDatabaseDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableExternalNonContainerDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns DisableExternalNonContainerDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalNonContainerDatabaseOperationsInsights(request: serviceRequests.DisableExternalNonContainerDatabaseOperationsInsightsRequest): Promise<{
        response: serviceResponses.DisableExternalNonContainerDatabaseOperationsInsightsResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableExternalNonContainerDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns DisableExternalNonContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalNonContainerDatabaseStackMonitoring(request: serviceRequests.DisableExternalNonContainerDatabaseStackMonitoringRequest): Promise<{
        response: serviceResponses.DisableExternalNonContainerDatabaseStackMonitoringResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableExternalPluggableDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisableExternalPluggableDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalPluggableDatabaseDatabaseManagement(request: serviceRequests.DisableExternalPluggableDatabaseDatabaseManagementRequest): Promise<{
        response: serviceResponses.DisableExternalPluggableDatabaseDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableExternalPluggableDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns DisableExternalPluggableDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalPluggableDatabaseOperationsInsights(request: serviceRequests.DisableExternalPluggableDatabaseOperationsInsightsRequest): Promise<{
        response: serviceResponses.DisableExternalPluggableDatabaseOperationsInsightsResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDisableExternalPluggableDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns DisableExternalPluggableDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalPluggableDatabaseStackMonitoring(request: serviceRequests.DisableExternalPluggableDatabaseStackMonitoringRequest): Promise<{
        response: serviceResponses.DisableExternalPluggableDatabaseStackMonitoringResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableAutonomousDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnableAutonomousDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnableAutonomousDatabaseManagement(request: serviceRequests.EnableAutonomousDatabaseManagementRequest): Promise<{
        response: serviceResponses.EnableAutonomousDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableAutonomousDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns EnableAutonomousDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forEnableAutonomousDatabaseOperationsInsights(request: serviceRequests.EnableAutonomousDatabaseOperationsInsightsRequest): Promise<{
        response: serviceResponses.EnableAutonomousDatabaseOperationsInsightsResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnableDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnableDatabaseManagement(request: serviceRequests.EnableDatabaseManagementRequest): Promise<{
        response: serviceResponses.EnableDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableExternalContainerDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnableExternalContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalContainerDatabaseDatabaseManagement(request: serviceRequests.EnableExternalContainerDatabaseDatabaseManagementRequest): Promise<{
        response: serviceResponses.EnableExternalContainerDatabaseDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableExternalContainerDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns EnableExternalContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalContainerDatabaseStackMonitoring(request: serviceRequests.EnableExternalContainerDatabaseStackMonitoringRequest): Promise<{
        response: serviceResponses.EnableExternalContainerDatabaseStackMonitoringResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableExternalNonContainerDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnableExternalNonContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalNonContainerDatabaseDatabaseManagement(request: serviceRequests.EnableExternalNonContainerDatabaseDatabaseManagementRequest): Promise<{
        response: serviceResponses.EnableExternalNonContainerDatabaseDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableExternalNonContainerDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns EnableExternalNonContainerDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalNonContainerDatabaseOperationsInsights(request: serviceRequests.EnableExternalNonContainerDatabaseOperationsInsightsRequest): Promise<{
        response: serviceResponses.EnableExternalNonContainerDatabaseOperationsInsightsResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableExternalNonContainerDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns EnableExternalNonContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalNonContainerDatabaseStackMonitoring(request: serviceRequests.EnableExternalNonContainerDatabaseStackMonitoringRequest): Promise<{
        response: serviceResponses.EnableExternalNonContainerDatabaseStackMonitoringResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableExternalPluggableDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnableExternalPluggableDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalPluggableDatabaseDatabaseManagement(request: serviceRequests.EnableExternalPluggableDatabaseDatabaseManagementRequest): Promise<{
        response: serviceResponses.EnableExternalPluggableDatabaseDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableExternalPluggableDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns EnableExternalPluggableDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalPluggableDatabaseOperationsInsights(request: serviceRequests.EnableExternalPluggableDatabaseOperationsInsightsRequest): Promise<{
        response: serviceResponses.EnableExternalPluggableDatabaseOperationsInsightsResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forEnableExternalPluggableDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns EnableExternalPluggableDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalPluggableDatabaseStackMonitoring(request: serviceRequests.EnableExternalPluggableDatabaseStackMonitoringRequest): Promise<{
        response: serviceResponses.EnableExternalPluggableDatabaseStackMonitoringResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forFailOverAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns FailOverAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forFailOverAutonomousDatabase(request: serviceRequests.FailOverAutonomousDatabaseRequest): Promise<{
        response: serviceResponses.FailOverAutonomousDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forFailoverAutonomousContainerDatabaseDataguardAssociation
     *
     * @param request the request to send
     * @return response returns FailoverAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
     */
    forFailoverAutonomousContainerDatabaseDataguardAssociation(request: serviceRequests.FailoverAutonomousContainerDatabaseDataguardAssociationRequest): Promise<{
        response: serviceResponses.FailoverAutonomousContainerDatabaseDataguardAssociationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forFailoverDataGuardAssociation
     *
     * @param request the request to send
     * @return response returns FailoverDataGuardAssociationResponse, GetWorkRequestResponse tuple
     */
    forFailoverDataGuardAssociation(request: serviceRequests.FailoverDataGuardAssociationRequest): Promise<{
        response: serviceResponses.FailoverDataGuardAssociationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forAutonomousContainerDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousContainerDatabaseResponse | null (null in case of 404 response)
     */
    forAutonomousContainerDatabase(request: serviceRequests.GetAutonomousContainerDatabaseRequest, ...targetStates: models.AutonomousContainerDatabase.LifecycleState[]): Promise<serviceResponses.GetAutonomousContainerDatabaseResponse | null>;
    /**
     * Waits forAutonomousContainerDatabaseDataguardAssociation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousContainerDatabaseDataguardAssociationResponse | null (null in case of 404 response)
     */
    forAutonomousContainerDatabaseDataguardAssociation(request: serviceRequests.GetAutonomousContainerDatabaseDataguardAssociationRequest, ...targetStates: models.AutonomousContainerDatabaseDataguardAssociation.LifecycleState[]): Promise<serviceResponses.GetAutonomousContainerDatabaseDataguardAssociationResponse | null>;
    /**
     * Waits forAutonomousDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousDatabaseResponse | null (null in case of 404 response)
     */
    forAutonomousDatabase(request: serviceRequests.GetAutonomousDatabaseRequest, ...targetStates: models.AutonomousDatabase.LifecycleState[]): Promise<serviceResponses.GetAutonomousDatabaseResponse | null>;
    /**
     * Waits forAutonomousDatabaseBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousDatabaseBackupResponse | null (null in case of 404 response)
     */
    forAutonomousDatabaseBackup(request: serviceRequests.GetAutonomousDatabaseBackupRequest, ...targetStates: models.AutonomousDatabaseBackup.LifecycleState[]): Promise<serviceResponses.GetAutonomousDatabaseBackupResponse | null>;
    /**
     * Waits forAutonomousDatabaseDataguardAssociation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousDatabaseDataguardAssociationResponse | null (null in case of 404 response)
     */
    forAutonomousDatabaseDataguardAssociation(request: serviceRequests.GetAutonomousDatabaseDataguardAssociationRequest, ...targetStates: models.AutonomousDatabaseDataguardAssociation.LifecycleState[]): Promise<serviceResponses.GetAutonomousDatabaseDataguardAssociationResponse | null>;
    /**
     * Waits forAutonomousDatabaseWallet till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousDatabaseWalletResponse
     */
    forAutonomousDatabaseWallet(request: serviceRequests.GetAutonomousDatabaseWalletRequest, ...targetStates: models.AutonomousDatabaseWallet.LifecycleState[]): Promise<serviceResponses.GetAutonomousDatabaseWalletResponse>;
    /**
     * Waits forAutonomousExadataInfrastructure till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousExadataInfrastructureResponse | null (null in case of 404 response)
     */
    forAutonomousExadataInfrastructure(request: serviceRequests.GetAutonomousExadataInfrastructureRequest, ...targetStates: models.AutonomousExadataInfrastructure.LifecycleState[]): Promise<serviceResponses.GetAutonomousExadataInfrastructureResponse | null>;
    /**
     * Waits forAutonomousPatch till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousPatchResponse
     */
    forAutonomousPatch(request: serviceRequests.GetAutonomousPatchRequest, ...targetStates: models.AutonomousPatch.LifecycleState[]): Promise<serviceResponses.GetAutonomousPatchResponse>;
    /**
     * Waits forAutonomousVmCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousVmClusterResponse | null (null in case of 404 response)
     */
    forAutonomousVmCluster(request: serviceRequests.GetAutonomousVmClusterRequest, ...targetStates: models.AutonomousVmCluster.LifecycleState[]): Promise<serviceResponses.GetAutonomousVmClusterResponse | null>;
    /**
     * Waits forBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBackupResponse | null (null in case of 404 response)
     */
    forBackup(request: serviceRequests.GetBackupRequest, ...targetStates: models.Backup.LifecycleState[]): Promise<serviceResponses.GetBackupResponse | null>;
    /**
     * Waits forBackupDestination till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBackupDestinationResponse | null (null in case of 404 response)
     */
    forBackupDestination(request: serviceRequests.GetBackupDestinationRequest, ...targetStates: models.BackupDestination.LifecycleState[]): Promise<serviceResponses.GetBackupDestinationResponse | null>;
    /**
     * Waits forCloudAutonomousVmCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCloudAutonomousVmClusterResponse | null (null in case of 404 response)
     */
    forCloudAutonomousVmCluster(request: serviceRequests.GetCloudAutonomousVmClusterRequest, ...targetStates: models.CloudAutonomousVmCluster.LifecycleState[]): Promise<serviceResponses.GetCloudAutonomousVmClusterResponse | null>;
    /**
     * Waits forCloudExadataInfrastructure till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCloudExadataInfrastructureResponse | null (null in case of 404 response)
     */
    forCloudExadataInfrastructure(request: serviceRequests.GetCloudExadataInfrastructureRequest, ...targetStates: models.CloudExadataInfrastructure.LifecycleState[]): Promise<serviceResponses.GetCloudExadataInfrastructureResponse | null>;
    /**
     * Waits forCloudVmCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCloudVmClusterResponse | null (null in case of 404 response)
     */
    forCloudVmCluster(request: serviceRequests.GetCloudVmClusterRequest, ...targetStates: models.CloudVmCluster.LifecycleState[]): Promise<serviceResponses.GetCloudVmClusterResponse | null>;
    /**
     * Waits forConsoleConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConsoleConnectionResponse | null (null in case of 404 response)
     */
    forConsoleConnection(request: serviceRequests.GetConsoleConnectionRequest, ...targetStates: models.ConsoleConnection.LifecycleState[]): Promise<serviceResponses.GetConsoleConnectionResponse | null>;
    /**
     * Waits forDataGuardAssociation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataGuardAssociationResponse | null (null in case of 404 response)
     */
    forDataGuardAssociation(request: serviceRequests.GetDataGuardAssociationRequest, ...targetStates: models.DataGuardAssociation.LifecycleState[]): Promise<serviceResponses.GetDataGuardAssociationResponse | null>;
    /**
     * Waits forDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDatabaseResponse | null (null in case of 404 response)
     */
    forDatabase(request: serviceRequests.GetDatabaseRequest, ...targetStates: models.Database.LifecycleState[]): Promise<serviceResponses.GetDatabaseResponse | null>;
    /**
     * Waits forDatabaseSoftwareImage till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDatabaseSoftwareImageResponse | null (null in case of 404 response)
     */
    forDatabaseSoftwareImage(request: serviceRequests.GetDatabaseSoftwareImageRequest, ...targetStates: models.DatabaseSoftwareImage.LifecycleState[]): Promise<serviceResponses.GetDatabaseSoftwareImageResponse | null>;
    /**
     * Waits forDatabaseUpgradeHistoryEntry till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDatabaseUpgradeHistoryEntryResponse
     */
    forDatabaseUpgradeHistoryEntry(request: serviceRequests.GetDatabaseUpgradeHistoryEntryRequest, ...targetStates: models.DatabaseUpgradeHistoryEntry.LifecycleState[]): Promise<serviceResponses.GetDatabaseUpgradeHistoryEntryResponse>;
    /**
     * Waits forDbHome till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbHomeResponse | null (null in case of 404 response)
     */
    forDbHome(request: serviceRequests.GetDbHomeRequest, ...targetStates: models.DbHome.LifecycleState[]): Promise<serviceResponses.GetDbHomeResponse | null>;
    /**
     * Waits forDbNode till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbNodeResponse | null (null in case of 404 response)
     */
    forDbNode(request: serviceRequests.GetDbNodeRequest, ...targetStates: models.DbNode.LifecycleState[]): Promise<serviceResponses.GetDbNodeResponse | null>;
    /**
     * Waits forDbServer till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbServerResponse | null (null in case of 404 response)
     */
    forDbServer(request: serviceRequests.GetDbServerRequest, ...targetStates: models.DbServer.LifecycleState[]): Promise<serviceResponses.GetDbServerResponse | null>;
    /**
     * Waits forDbSystem till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbSystemResponse | null (null in case of 404 response)
     */
    forDbSystem(request: serviceRequests.GetDbSystemRequest, ...targetStates: models.DbSystem.LifecycleState[]): Promise<serviceResponses.GetDbSystemResponse | null>;
    /**
     * Waits forDbSystemUpgradeHistoryEntry till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbSystemUpgradeHistoryEntryResponse
     */
    forDbSystemUpgradeHistoryEntry(request: serviceRequests.GetDbSystemUpgradeHistoryEntryRequest, ...targetStates: models.DbSystemUpgradeHistoryEntry.LifecycleState[]): Promise<serviceResponses.GetDbSystemUpgradeHistoryEntryResponse>;
    /**
     * Waits forExadataInfrastructure till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExadataInfrastructureResponse | null (null in case of 404 response)
     */
    forExadataInfrastructure(request: serviceRequests.GetExadataInfrastructureRequest, ...targetStates: models.ExadataInfrastructure.LifecycleState[]): Promise<serviceResponses.GetExadataInfrastructureResponse | null>;
    /**
     * Waits forExadataIormConfig till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExadataIormConfigResponse
     */
    forExadataIormConfig(request: serviceRequests.GetExadataIormConfigRequest, ...targetStates: models.ExadataIormConfig.LifecycleState[]): Promise<serviceResponses.GetExadataIormConfigResponse>;
    /**
     * Waits forExternalContainerDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalContainerDatabaseResponse | null (null in case of 404 response)
     */
    forExternalContainerDatabase(request: serviceRequests.GetExternalContainerDatabaseRequest, ...targetStates: models.ExternalContainerDatabase.LifecycleState[]): Promise<serviceResponses.GetExternalContainerDatabaseResponse | null>;
    /**
     * Waits forExternalDatabaseConnector till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDatabaseConnectorResponse | null (null in case of 404 response)
     */
    forExternalDatabaseConnector(request: serviceRequests.GetExternalDatabaseConnectorRequest, ...targetStates: models.ExternalDatabaseConnector.LifecycleState[]): Promise<serviceResponses.GetExternalDatabaseConnectorResponse | null>;
    /**
     * Waits forExternalNonContainerDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalNonContainerDatabaseResponse | null (null in case of 404 response)
     */
    forExternalNonContainerDatabase(request: serviceRequests.GetExternalNonContainerDatabaseRequest, ...targetStates: models.ExternalNonContainerDatabase.LifecycleState[]): Promise<serviceResponses.GetExternalNonContainerDatabaseResponse | null>;
    /**
     * Waits forExternalPluggableDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalPluggableDatabaseResponse | null (null in case of 404 response)
     */
    forExternalPluggableDatabase(request: serviceRequests.GetExternalPluggableDatabaseRequest, ...targetStates: models.ExternalPluggableDatabase.LifecycleState[]): Promise<serviceResponses.GetExternalPluggableDatabaseResponse | null>;
    /**
     * Waits forKeyStore till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetKeyStoreResponse | null (null in case of 404 response)
     */
    forKeyStore(request: serviceRequests.GetKeyStoreRequest, ...targetStates: models.KeyStore.LifecycleState[]): Promise<serviceResponses.GetKeyStoreResponse | null>;
    /**
     * Waits forMaintenanceRun till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMaintenanceRunResponse | null (null in case of 404 response)
     */
    forMaintenanceRun(request: serviceRequests.GetMaintenanceRunRequest, ...targetStates: models.MaintenanceRun.LifecycleState[]): Promise<serviceResponses.GetMaintenanceRunResponse | null>;
    /**
     * Waits forPdbConversionHistoryEntry till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPdbConversionHistoryEntryResponse
     */
    forPdbConversionHistoryEntry(request: serviceRequests.GetPdbConversionHistoryEntryRequest, ...targetStates: models.PdbConversionHistoryEntry.LifecycleState[]): Promise<serviceResponses.GetPdbConversionHistoryEntryResponse>;
    /**
     * Waits forPluggableDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPluggableDatabaseResponse | null (null in case of 404 response)
     */
    forPluggableDatabase(request: serviceRequests.GetPluggableDatabaseRequest, ...targetStates: models.PluggableDatabase.LifecycleState[]): Promise<serviceResponses.GetPluggableDatabaseResponse | null>;
    /**
     * Waits forVmCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVmClusterResponse | null (null in case of 404 response)
     */
    forVmCluster(request: serviceRequests.GetVmClusterRequest, ...targetStates: models.VmCluster.LifecycleState[]): Promise<serviceResponses.GetVmClusterResponse | null>;
    /**
     * Waits forVmClusterNetwork till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVmClusterNetworkResponse | null (null in case of 404 response)
     */
    forVmClusterNetwork(request: serviceRequests.GetVmClusterNetworkRequest, ...targetStates: models.VmClusterNetwork.LifecycleState[]): Promise<serviceResponses.GetVmClusterNetworkResponse | null>;
    /**
     * Waits forVmClusterUpdate till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVmClusterUpdateResponse
     */
    forVmClusterUpdate(request: serviceRequests.GetVmClusterUpdateRequest, ...targetStates: models.VmClusterUpdate.LifecycleState[]): Promise<serviceResponses.GetVmClusterUpdateResponse>;
    /**
     * Waits forVmClusterUpdateHistoryEntry till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVmClusterUpdateHistoryEntryResponse
     */
    forVmClusterUpdateHistoryEntry(request: serviceRequests.GetVmClusterUpdateHistoryEntryRequest, ...targetStates: models.VmClusterUpdateHistoryEntry.LifecycleState[]): Promise<serviceResponses.GetVmClusterUpdateHistoryEntryResponse>;
    /**
     * Waits forLaunchAutonomousExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns LaunchAutonomousExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forLaunchAutonomousExadataInfrastructure(request: serviceRequests.LaunchAutonomousExadataInfrastructureRequest): Promise<{
        response: serviceResponses.LaunchAutonomousExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forLaunchDbSystem
     *
     * @param request the request to send
     * @return response returns LaunchDbSystemResponse, GetWorkRequestResponse tuple
     */
    forLaunchDbSystem(request: serviceRequests.LaunchDbSystemRequest): Promise<{
        response: serviceResponses.LaunchDbSystemResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forLocalClonePluggableDatabase
     *
     * @param request the request to send
     * @return response returns LocalClonePluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forLocalClonePluggableDatabase(request: serviceRequests.LocalClonePluggableDatabaseRequest): Promise<{
        response: serviceResponses.LocalClonePluggableDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forMigrateExadataDbSystemResourceModel
     *
     * @param request the request to send
     * @return response returns MigrateExadataDbSystemResourceModelResponse, GetWorkRequestResponse tuple
     */
    forMigrateExadataDbSystemResourceModel(request: serviceRequests.MigrateExadataDbSystemResourceModelRequest): Promise<{
        response: serviceResponses.MigrateExadataDbSystemResourceModelResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forMigrateVaultKey
     *
     * @param request the request to send
     * @return response returns MigrateVaultKeyResponse, GetWorkRequestResponse tuple
     */
    forMigrateVaultKey(request: serviceRequests.MigrateVaultKeyRequest): Promise<{
        response: serviceResponses.MigrateVaultKeyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forModifyDatabaseManagement
     *
     * @param request the request to send
     * @return response returns ModifyDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forModifyDatabaseManagement(request: serviceRequests.ModifyDatabaseManagementRequest): Promise<{
        response: serviceResponses.ModifyDatabaseManagementResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRegisterAutonomousDatabaseDataSafe
     *
     * @param request the request to send
     * @return response returns RegisterAutonomousDatabaseDataSafeResponse, GetWorkRequestResponse tuple
     */
    forRegisterAutonomousDatabaseDataSafe(request: serviceRequests.RegisterAutonomousDatabaseDataSafeRequest): Promise<{
        response: serviceResponses.RegisterAutonomousDatabaseDataSafeResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forReinstateAutonomousContainerDatabaseDataguardAssociation
     *
     * @param request the request to send
     * @return response returns ReinstateAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
     */
    forReinstateAutonomousContainerDatabaseDataguardAssociation(request: serviceRequests.ReinstateAutonomousContainerDatabaseDataguardAssociationRequest): Promise<{
        response: serviceResponses.ReinstateAutonomousContainerDatabaseDataguardAssociationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forReinstateDataGuardAssociation
     *
     * @param request the request to send
     * @return response returns ReinstateDataGuardAssociationResponse, GetWorkRequestResponse tuple
     */
    forReinstateDataGuardAssociation(request: serviceRequests.ReinstateDataGuardAssociationRequest): Promise<{
        response: serviceResponses.ReinstateDataGuardAssociationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRemoteClonePluggableDatabase
     *
     * @param request the request to send
     * @return response returns RemoteClonePluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRemoteClonePluggableDatabase(request: serviceRequests.RemoteClonePluggableDatabaseRequest): Promise<{
        response: serviceResponses.RemoteClonePluggableDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRemoveVirtualMachineFromVmCluster
     *
     * @param request the request to send
     * @return response returns RemoveVirtualMachineFromVmClusterResponse, GetWorkRequestResponse tuple
     */
    forRemoveVirtualMachineFromVmCluster(request: serviceRequests.RemoveVirtualMachineFromVmClusterRequest): Promise<{
        response: serviceResponses.RemoveVirtualMachineFromVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRestartAutonomousContainerDatabase
     *
     * @param request the request to send
     * @return response returns RestartAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRestartAutonomousContainerDatabase(request: serviceRequests.RestartAutonomousContainerDatabaseRequest): Promise<{
        response: serviceResponses.RestartAutonomousContainerDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRestartAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns RestartAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRestartAutonomousDatabase(request: serviceRequests.RestartAutonomousDatabaseRequest): Promise<{
        response: serviceResponses.RestartAutonomousDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRestoreAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns RestoreAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRestoreAutonomousDatabase(request: serviceRequests.RestoreAutonomousDatabaseRequest): Promise<{
        response: serviceResponses.RestoreAutonomousDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRestoreDatabase
     *
     * @param request the request to send
     * @return response returns RestoreDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRestoreDatabase(request: serviceRequests.RestoreDatabaseRequest): Promise<{
        response: serviceResponses.RestoreDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRotateAutonomousContainerDatabaseEncryptionKey
     *
     * @param request the request to send
     * @return response returns RotateAutonomousContainerDatabaseEncryptionKeyResponse, GetWorkRequestResponse tuple
     */
    forRotateAutonomousContainerDatabaseEncryptionKey(request: serviceRequests.RotateAutonomousContainerDatabaseEncryptionKeyRequest): Promise<{
        response: serviceResponses.RotateAutonomousContainerDatabaseEncryptionKeyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRotateAutonomousDatabaseEncryptionKey
     *
     * @param request the request to send
     * @return response returns RotateAutonomousDatabaseEncryptionKeyResponse, GetWorkRequestResponse tuple
     */
    forRotateAutonomousDatabaseEncryptionKey(request: serviceRequests.RotateAutonomousDatabaseEncryptionKeyRequest): Promise<{
        response: serviceResponses.RotateAutonomousDatabaseEncryptionKeyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRotateCloudAutonomousVmClusterOrdsCerts
     *
     * @param request the request to send
     * @return response returns RotateCloudAutonomousVmClusterOrdsCertsResponse, GetWorkRequestResponse tuple
     */
    forRotateCloudAutonomousVmClusterOrdsCerts(request: serviceRequests.RotateCloudAutonomousVmClusterOrdsCertsRequest): Promise<{
        response: serviceResponses.RotateCloudAutonomousVmClusterOrdsCertsResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRotateCloudAutonomousVmClusterSslCerts
     *
     * @param request the request to send
     * @return response returns RotateCloudAutonomousVmClusterSslCertsResponse, GetWorkRequestResponse tuple
     */
    forRotateCloudAutonomousVmClusterSslCerts(request: serviceRequests.RotateCloudAutonomousVmClusterSslCertsRequest): Promise<{
        response: serviceResponses.RotateCloudAutonomousVmClusterSslCertsResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRotateOrdsCerts
     *
     * @param request the request to send
     * @return response returns RotateOrdsCertsResponse, GetWorkRequestResponse tuple
     */
    forRotateOrdsCerts(request: serviceRequests.RotateOrdsCertsRequest): Promise<{
        response: serviceResponses.RotateOrdsCertsResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRotateSslCerts
     *
     * @param request the request to send
     * @return response returns RotateSslCertsResponse, GetWorkRequestResponse tuple
     */
    forRotateSslCerts(request: serviceRequests.RotateSslCertsRequest): Promise<{
        response: serviceResponses.RotateSslCertsResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forRotateVaultKey
     *
     * @param request the request to send
     * @return response returns RotateVaultKeyResponse, GetWorkRequestResponse tuple
     */
    forRotateVaultKey(request: serviceRequests.RotateVaultKeyRequest): Promise<{
        response: serviceResponses.RotateVaultKeyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forScanExternalContainerDatabasePluggableDatabases
     *
     * @param request the request to send
     * @return response returns ScanExternalContainerDatabasePluggableDatabasesResponse, GetWorkRequestResponse tuple
     */
    forScanExternalContainerDatabasePluggableDatabases(request: serviceRequests.ScanExternalContainerDatabasePluggableDatabasesRequest): Promise<{
        response: serviceResponses.ScanExternalContainerDatabasePluggableDatabasesResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forShrinkAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns ShrinkAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forShrinkAutonomousDatabase(request: serviceRequests.ShrinkAutonomousDatabaseRequest): Promise<{
        response: serviceResponses.ShrinkAutonomousDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forStartAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns StartAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forStartAutonomousDatabase(request: serviceRequests.StartAutonomousDatabaseRequest): Promise<{
        response: serviceResponses.StartAutonomousDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forStartPluggableDatabase
     *
     * @param request the request to send
     * @return response returns StartPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forStartPluggableDatabase(request: serviceRequests.StartPluggableDatabaseRequest): Promise<{
        response: serviceResponses.StartPluggableDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forStopAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns StopAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forStopAutonomousDatabase(request: serviceRequests.StopAutonomousDatabaseRequest): Promise<{
        response: serviceResponses.StopAutonomousDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forStopPluggableDatabase
     *
     * @param request the request to send
     * @return response returns StopPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forStopPluggableDatabase(request: serviceRequests.StopPluggableDatabaseRequest): Promise<{
        response: serviceResponses.StopPluggableDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forSwitchoverAutonomousContainerDatabaseDataguardAssociation
     *
     * @param request the request to send
     * @return response returns SwitchoverAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
     */
    forSwitchoverAutonomousContainerDatabaseDataguardAssociation(request: serviceRequests.SwitchoverAutonomousContainerDatabaseDataguardAssociationRequest): Promise<{
        response: serviceResponses.SwitchoverAutonomousContainerDatabaseDataguardAssociationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forSwitchoverAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns SwitchoverAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forSwitchoverAutonomousDatabase(request: serviceRequests.SwitchoverAutonomousDatabaseRequest): Promise<{
        response: serviceResponses.SwitchoverAutonomousDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forSwitchoverDataGuardAssociation
     *
     * @param request the request to send
     * @return response returns SwitchoverDataGuardAssociationResponse, GetWorkRequestResponse tuple
     */
    forSwitchoverDataGuardAssociation(request: serviceRequests.SwitchoverDataGuardAssociationRequest): Promise<{
        response: serviceResponses.SwitchoverDataGuardAssociationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forTerminateAutonomousContainerDatabase
     *
     * @param request the request to send
     * @return response returns TerminateAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forTerminateAutonomousContainerDatabase(request: serviceRequests.TerminateAutonomousContainerDatabaseRequest): Promise<{
        response: serviceResponses.TerminateAutonomousContainerDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forTerminateAutonomousExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns TerminateAutonomousExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forTerminateAutonomousExadataInfrastructure(request: serviceRequests.TerminateAutonomousExadataInfrastructureRequest): Promise<{
        response: serviceResponses.TerminateAutonomousExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forTerminateDbSystem
     *
     * @param request the request to send
     * @return response returns TerminateDbSystemResponse, GetWorkRequestResponse tuple
     */
    forTerminateDbSystem(request: serviceRequests.TerminateDbSystemRequest): Promise<{
        response: serviceResponses.TerminateDbSystemResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateAutonomousContainerDatabase
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousContainerDatabase(request: serviceRequests.UpdateAutonomousContainerDatabaseRequest): Promise<{
        response: serviceResponses.UpdateAutonomousContainerDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateAutonomousContainerDatabaseDataguardAssociation
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousContainerDatabaseDataguardAssociation(request: serviceRequests.UpdateAutonomousContainerDatabaseDataguardAssociationRequest): Promise<{
        response: serviceResponses.UpdateAutonomousContainerDatabaseDataguardAssociationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousDatabase(request: serviceRequests.UpdateAutonomousDatabaseRequest): Promise<{
        response: serviceResponses.UpdateAutonomousDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateAutonomousDatabaseRegionalWallet
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousDatabaseRegionalWalletResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousDatabaseRegionalWallet(request: serviceRequests.UpdateAutonomousDatabaseRegionalWalletRequest): Promise<{
        response: serviceResponses.UpdateAutonomousDatabaseRegionalWalletResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateAutonomousDatabaseWallet
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousDatabaseWalletResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousDatabaseWallet(request: serviceRequests.UpdateAutonomousDatabaseWalletRequest): Promise<{
        response: serviceResponses.UpdateAutonomousDatabaseWalletResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateAutonomousExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousExadataInfrastructure(request: serviceRequests.UpdateAutonomousExadataInfrastructureRequest): Promise<{
        response: serviceResponses.UpdateAutonomousExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousVmCluster(request: serviceRequests.UpdateAutonomousVmClusterRequest): Promise<{
        response: serviceResponses.UpdateAutonomousVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateCloudAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns UpdateCloudAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forUpdateCloudAutonomousVmCluster(request: serviceRequests.UpdateCloudAutonomousVmClusterRequest): Promise<{
        response: serviceResponses.UpdateCloudAutonomousVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateCloudExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns UpdateCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forUpdateCloudExadataInfrastructure(request: serviceRequests.UpdateCloudExadataInfrastructureRequest): Promise<{
        response: serviceResponses.UpdateCloudExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateCloudVmCluster
     *
     * @param request the request to send
     * @return response returns UpdateCloudVmClusterResponse, GetWorkRequestResponse tuple
     */
    forUpdateCloudVmCluster(request: serviceRequests.UpdateCloudVmClusterRequest): Promise<{
        response: serviceResponses.UpdateCloudVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateCloudVmClusterIormConfig
     *
     * @param request the request to send
     * @return response returns UpdateCloudVmClusterIormConfigResponse, GetWorkRequestResponse tuple
     */
    forUpdateCloudVmClusterIormConfig(request: serviceRequests.UpdateCloudVmClusterIormConfigRequest): Promise<{
        response: serviceResponses.UpdateCloudVmClusterIormConfigResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateDataGuardAssociation
     *
     * @param request the request to send
     * @return response returns UpdateDataGuardAssociationResponse, GetWorkRequestResponse tuple
     */
    forUpdateDataGuardAssociation(request: serviceRequests.UpdateDataGuardAssociationRequest): Promise<{
        response: serviceResponses.UpdateDataGuardAssociationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateDatabase
     *
     * @param request the request to send
     * @return response returns UpdateDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateDatabase(request: serviceRequests.UpdateDatabaseRequest): Promise<{
        response: serviceResponses.UpdateDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateDbHome
     *
     * @param request the request to send
     * @return response returns UpdateDbHomeResponse, GetWorkRequestResponse tuple
     */
    forUpdateDbHome(request: serviceRequests.UpdateDbHomeRequest): Promise<{
        response: serviceResponses.UpdateDbHomeResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateDbSystem
     *
     * @param request the request to send
     * @return response returns UpdateDbSystemResponse, GetWorkRequestResponse tuple
     */
    forUpdateDbSystem(request: serviceRequests.UpdateDbSystemRequest): Promise<{
        response: serviceResponses.UpdateDbSystemResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns UpdateExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forUpdateExadataInfrastructure(request: serviceRequests.UpdateExadataInfrastructureRequest): Promise<{
        response: serviceResponses.UpdateExadataInfrastructureResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateExadataIormConfig
     *
     * @param request the request to send
     * @return response returns UpdateExadataIormConfigResponse, GetWorkRequestResponse tuple
     */
    forUpdateExadataIormConfig(request: serviceRequests.UpdateExadataIormConfigRequest): Promise<{
        response: serviceResponses.UpdateExadataIormConfigResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateExternalContainerDatabase
     *
     * @param request the request to send
     * @return response returns UpdateExternalContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateExternalContainerDatabase(request: serviceRequests.UpdateExternalContainerDatabaseRequest): Promise<{
        response: serviceResponses.UpdateExternalContainerDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateExternalDatabaseConnector
     *
     * @param request the request to send
     * @return response returns UpdateExternalDatabaseConnectorResponse, GetWorkRequestResponse tuple
     */
    forUpdateExternalDatabaseConnector(request: serviceRequests.UpdateExternalDatabaseConnectorRequest): Promise<{
        response: serviceResponses.UpdateExternalDatabaseConnectorResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateExternalNonContainerDatabase
     *
     * @param request the request to send
     * @return response returns UpdateExternalNonContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateExternalNonContainerDatabase(request: serviceRequests.UpdateExternalNonContainerDatabaseRequest): Promise<{
        response: serviceResponses.UpdateExternalNonContainerDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateExternalPluggableDatabase
     *
     * @param request the request to send
     * @return response returns UpdateExternalPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateExternalPluggableDatabase(request: serviceRequests.UpdateExternalPluggableDatabaseRequest): Promise<{
        response: serviceResponses.UpdateExternalPluggableDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdatePluggableDatabase
     *
     * @param request the request to send
     * @return response returns UpdatePluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdatePluggableDatabase(request: serviceRequests.UpdatePluggableDatabaseRequest): Promise<{
        response: serviceResponses.UpdatePluggableDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateVmCluster
     *
     * @param request the request to send
     * @return response returns UpdateVmClusterResponse, GetWorkRequestResponse tuple
     */
    forUpdateVmCluster(request: serviceRequests.UpdateVmClusterRequest): Promise<{
        response: serviceResponses.UpdateVmClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateVmClusterNetwork
     *
     * @param request the request to send
     * @return response returns UpdateVmClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forUpdateVmClusterNetwork(request: serviceRequests.UpdateVmClusterNetworkRequest): Promise<{
        response: serviceResponses.UpdateVmClusterNetworkResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpgradeDatabase
     *
     * @param request the request to send
     * @return response returns UpgradeDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpgradeDatabase(request: serviceRequests.UpgradeDatabaseRequest): Promise<{
        response: serviceResponses.UpgradeDatabaseResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpgradeDbSystem
     *
     * @param request the request to send
     * @return response returns UpgradeDbSystemResponse, GetWorkRequestResponse tuple
     */
    forUpgradeDbSystem(request: serviceRequests.UpgradeDbSystemRequest): Promise<{
        response: serviceResponses.UpgradeDbSystemResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forValidateVmClusterNetwork
     *
     * @param request the request to send
     * @return response returns ValidateVmClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forValidateVmClusterNetwork(request: serviceRequests.ValidateVmClusterNetworkRequest): Promise<{
        response: serviceResponses.ValidateVmClusterNetworkResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
}
