"use strict";
/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseConnectionStringProfile = void 0;
var DatabaseConnectionStringProfile;
(function (DatabaseConnectionStringProfile) {
    let ConsumerGroup;
    (function (ConsumerGroup) {
        ConsumerGroup["High"] = "HIGH";
        ConsumerGroup["Medium"] = "MEDIUM";
        ConsumerGroup["Low"] = "LOW";
        ConsumerGroup["Tp"] = "TP";
        ConsumerGroup["Tpurgent"] = "TPURGENT";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ConsumerGroup["UnknownValue"] = "UNKNOWN_VALUE";
    })(ConsumerGroup = DatabaseConnectionStringProfile.ConsumerGroup || (DatabaseConnectionStringProfile.ConsumerGroup = {}));
    let Protocol;
    (function (Protocol) {
        Protocol["Tcp"] = "TCP";
        Protocol["Tcps"] = "TCPS";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Protocol["UnknownValue"] = "UNKNOWN_VALUE";
    })(Protocol = DatabaseConnectionStringProfile.Protocol || (DatabaseConnectionStringProfile.Protocol = {}));
    let TlsAuthentication;
    (function (TlsAuthentication) {
        TlsAuthentication["Server"] = "SERVER";
        TlsAuthentication["Mutual"] = "MUTUAL";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        TlsAuthentication["UnknownValue"] = "UNKNOWN_VALUE";
    })(TlsAuthentication = DatabaseConnectionStringProfile.TlsAuthentication || (DatabaseConnectionStringProfile.TlsAuthentication = {}));
    let HostFormat;
    (function (HostFormat) {
        HostFormat["Fqdn"] = "FQDN";
        HostFormat["Ip"] = "IP";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        HostFormat["UnknownValue"] = "UNKNOWN_VALUE";
    })(HostFormat = DatabaseConnectionStringProfile.HostFormat || (DatabaseConnectionStringProfile.HostFormat = {}));
    let SessionMode;
    (function (SessionMode) {
        SessionMode["Direct"] = "DIRECT";
        SessionMode["Redirect"] = "REDIRECT";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        SessionMode["UnknownValue"] = "UNKNOWN_VALUE";
    })(SessionMode = DatabaseConnectionStringProfile.SessionMode || (DatabaseConnectionStringProfile.SessionMode = {}));
    let SyntaxFormat;
    (function (SyntaxFormat) {
        SyntaxFormat["Long"] = "LONG";
        SyntaxFormat["Ezconnect"] = "EZCONNECT";
        SyntaxFormat["Ezconnectplus"] = "EZCONNECTPLUS";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        SyntaxFormat["UnknownValue"] = "UNKNOWN_VALUE";
    })(SyntaxFormat = DatabaseConnectionStringProfile.SyntaxFormat || (DatabaseConnectionStringProfile.SyntaxFormat = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    DatabaseConnectionStringProfile.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    DatabaseConnectionStringProfile.getDeserializedJsonObj = getDeserializedJsonObj;
})(DatabaseConnectionStringProfile = exports.DatabaseConnectionStringProfile || (exports.DatabaseConnectionStringProfile = {}));
//# sourceMappingURL=database-connection-string-profile.js.map