"use strict";
/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LaunchDbSystemBase = void 0;
const model = __importStar(require("../model"));
var LaunchDbSystemBase;
(function (LaunchDbSystemBase) {
    let StorageVolumePerformanceMode;
    (function (StorageVolumePerformanceMode) {
        StorageVolumePerformanceMode["Balanced"] = "BALANCED";
        StorageVolumePerformanceMode["HighPerformance"] = "HIGH_PERFORMANCE";
    })(StorageVolumePerformanceMode = LaunchDbSystemBase.StorageVolumePerformanceMode || (LaunchDbSystemBase.StorageVolumePerformanceMode = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "dbSystemOptions": obj.dbSystemOptions
                ? model.DbSystemOptions.getJsonObj(obj.dbSystemOptions)
                : undefined
        });
        if (obj && "source" in obj && obj.source) {
            switch (obj.source) {
                case "NONE":
                    return model.LaunchDbSystemDetails.getJsonObj(jsonObj, true);
                case "DB_SYSTEM":
                    return model.LaunchDbSystemFromDbSystemDetails.getJsonObj(jsonObj, true);
                case "DATABASE":
                    return model.LaunchDbSystemFromDatabaseDetails.getJsonObj(jsonObj, true);
                case "DB_BACKUP":
                    return model.LaunchDbSystemFromBackupDetails.getJsonObj(jsonObj, true);
                default:
                    throw Error("Unknown value for: " + obj.source);
            }
        }
        return jsonObj;
    }
    LaunchDbSystemBase.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "dbSystemOptions": obj.dbSystemOptions
                ? model.DbSystemOptions.getDeserializedJsonObj(obj.dbSystemOptions)
                : undefined
        });
        if (obj && "source" in obj && obj.source) {
            switch (obj.source) {
                case "NONE":
                    return model.LaunchDbSystemDetails.getDeserializedJsonObj(jsonObj, true);
                case "DB_SYSTEM":
                    return model.LaunchDbSystemFromDbSystemDetails.getDeserializedJsonObj(jsonObj, true);
                case "DATABASE":
                    return model.LaunchDbSystemFromDatabaseDetails.getDeserializedJsonObj(jsonObj, true);
                case "DB_BACKUP":
                    return model.LaunchDbSystemFromBackupDetails.getDeserializedJsonObj(jsonObj, true);
                default:
                    throw Error("Unknown value for: " + obj.source);
            }
        }
        return jsonObj;
    }
    LaunchDbSystemBase.getDeserializedJsonObj = getDeserializedJsonObj;
})(LaunchDbSystemBase = exports.LaunchDbSystemBase || (exports.LaunchDbSystemBase = {}));
//# sourceMappingURL=launch-db-system-base.js.map