"use strict";
/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaintenanceRun = void 0;
const model = __importStar(require("../model"));
var MaintenanceRun;
(function (MaintenanceRun) {
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Scheduled"] = "SCHEDULED";
        LifecycleState["InProgress"] = "IN_PROGRESS";
        LifecycleState["Succeeded"] = "SUCCEEDED";
        LifecycleState["Skipped"] = "SKIPPED";
        LifecycleState["Failed"] = "FAILED";
        LifecycleState["Updating"] = "UPDATING";
        LifecycleState["Deleting"] = "DELETING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Canceled"] = "CANCELED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = MaintenanceRun.LifecycleState || (MaintenanceRun.LifecycleState = {}));
    let TargetResourceType;
    (function (TargetResourceType) {
        TargetResourceType["AutonomousExadataInfrastructure"] = "AUTONOMOUS_EXADATA_INFRASTRUCTURE";
        TargetResourceType["AutonomousContainerDatabase"] = "AUTONOMOUS_CONTAINER_DATABASE";
        TargetResourceType["ExadataDbSystem"] = "EXADATA_DB_SYSTEM";
        TargetResourceType["CloudExadataInfrastructure"] = "CLOUD_EXADATA_INFRASTRUCTURE";
        TargetResourceType["ExaccInfrastructure"] = "EXACC_INFRASTRUCTURE";
        TargetResourceType["AutonomousVmCluster"] = "AUTONOMOUS_VM_CLUSTER";
        TargetResourceType["AutonomousDatabase"] = "AUTONOMOUS_DATABASE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        TargetResourceType["UnknownValue"] = "UNKNOWN_VALUE";
    })(TargetResourceType = MaintenanceRun.TargetResourceType || (MaintenanceRun.TargetResourceType = {}));
    let MaintenanceType;
    (function (MaintenanceType) {
        MaintenanceType["Planned"] = "PLANNED";
        MaintenanceType["Unplanned"] = "UNPLANNED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        MaintenanceType["UnknownValue"] = "UNKNOWN_VALUE";
    })(MaintenanceType = MaintenanceRun.MaintenanceType || (MaintenanceRun.MaintenanceType = {}));
    let MaintenanceSubtype;
    (function (MaintenanceSubtype) {
        MaintenanceSubtype["Quarterly"] = "QUARTERLY";
        MaintenanceSubtype["Hardware"] = "HARDWARE";
        MaintenanceSubtype["Critical"] = "CRITICAL";
        MaintenanceSubtype["Infrastructure"] = "INFRASTRUCTURE";
        MaintenanceSubtype["Database"] = "DATABASE";
        MaintenanceSubtype["Oneoff"] = "ONEOFF";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        MaintenanceSubtype["UnknownValue"] = "UNKNOWN_VALUE";
    })(MaintenanceSubtype = MaintenanceRun.MaintenanceSubtype || (MaintenanceRun.MaintenanceSubtype = {}));
    let PatchingMode;
    (function (PatchingMode) {
        PatchingMode["Rolling"] = "ROLLING";
        PatchingMode["Nonrolling"] = "NONROLLING";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        PatchingMode["UnknownValue"] = "UNKNOWN_VALUE";
    })(PatchingMode = MaintenanceRun.PatchingMode || (MaintenanceRun.PatchingMode = {}));
    let PatchingStatus;
    (function (PatchingStatus) {
        PatchingStatus["Patching"] = "PATCHING";
        PatchingStatus["Waiting"] = "WAITING";
        PatchingStatus["Scheduled"] = "SCHEDULED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        PatchingStatus["UnknownValue"] = "UNKNOWN_VALUE";
    })(PatchingStatus = MaintenanceRun.PatchingStatus || (MaintenanceRun.PatchingStatus = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "estimatedPatchingTime": obj.estimatedPatchingTime
                ? model.EstimatedPatchingTime.getJsonObj(obj.estimatedPatchingTime)
                : undefined
        });
        return jsonObj;
    }
    MaintenanceRun.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "estimatedPatchingTime": obj.estimatedPatchingTime
                ? model.EstimatedPatchingTime.getDeserializedJsonObj(obj.estimatedPatchingTime)
                : undefined
        });
        return jsonObj;
    }
    MaintenanceRun.getDeserializedJsonObj = getDeserializedJsonObj;
})(MaintenanceRun = exports.MaintenanceRun || (exports.MaintenanceRun = {}));
//# sourceMappingURL=maintenance-run.js.map